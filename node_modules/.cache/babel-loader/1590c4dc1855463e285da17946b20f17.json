{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rotate = exports.intersperse = exports.prependToAll = exports.unzip = exports.zip = exports.zipWith = exports.sort = exports.lefts = exports.rights = exports.reverse = exports.modifyAt = exports.deleteAt = exports.updateAt = exports.insertAt = exports.copy = exports.findLastIndex = exports.findLastMap = exports.findLast = exports.findFirstMap = exports.findFirst = exports.findIndex = exports.dropLeftWhile = exports.dropRight = exports.dropLeft = exports.spanLeft = exports.takeLeftWhile = exports.takeRight = exports.takeLeft = exports.init = exports.tail = exports.last = exports.head = exports.snoc = exports.cons = exports.lookup = exports.isOutOfBound = exports.isNonEmpty = exports.isEmpty = exports.scanRight = exports.scanLeft = exports.foldRight = exports.foldLeft = exports.flatten = exports.replicate = exports.range = exports.makeBy = exports.getOrd = exports.getEq = exports.getMonoid = exports.getShow = void 0;\nexports.Applicative = exports.FunctorWithIndex = exports.Functor = exports.URI = exports.zero = exports.unfold = exports.wilt = exports.wither = exports.traverseWithIndex = exports.sequence = exports.traverse = exports.reduceRightWithIndex = exports.reduceRight = exports.reduceWithIndex = exports.reduce = exports.foldMapWithIndex = exports.foldMap = exports.duplicate = exports.extend = exports.filterWithIndex = exports.filterMapWithIndex = exports.alt = exports.altW = exports.partitionMapWithIndex = exports.partitionMap = exports.partitionWithIndex = exports.partition = exports.filterMap = exports.filter = exports.separate = exports.compact = exports.mapWithIndex = exports.chainFirst = exports.chainWithIndex = exports.chain = exports.apSecond = exports.apFirst = exports.ap = exports.map = exports.of = exports.difference = exports.intersection = exports.union = exports.comprehension = exports.chunksOf = exports.splitAt = exports.chop = exports.sortBy = exports.uniq = exports.elem = void 0;\nexports.apS = exports.bind = exports.bindTo = exports.Do = exports.some = exports.every = exports.empty = exports.unsafeDeleteAt = exports.unsafeUpdateAt = exports.unsafeInsertAt = exports.array = exports.Witherable = exports.TraversableWithIndex = exports.Traversable = exports.FoldableWithIndex = exports.Foldable = exports.FilterableWithIndex = exports.Filterable = exports.Compactable = exports.Extend = exports.Alternative = exports.Alt = exports.Unfoldable = exports.Monad = void 0;\n\nvar RA = __importStar(require(\"./ReadonlyArray\")); // -------------------------------------------------------------------------------------\n// model\n// -------------------------------------------------------------------------------------\n\n/* tslint:disable:readonly-array */\n\n/**\n * @category instances\n * @since 2.0.0\n */\n\n\nexports.getShow = RA.getShow;\n/**\n * Returns a `Monoid` for `Array<A>`\n *\n * @example\n * import { getMonoid } from 'fp-ts/Array'\n *\n * const M = getMonoid<number>()\n * assert.deepStrictEqual(M.concat([1, 2], [3, 4]), [1, 2, 3, 4])\n *\n * @category instances\n * @since 2.0.0\n */\n\nexports.getMonoid = RA.getMonoid;\n/**\n * Derives an `Eq` over the `Array` of a given element type from the `Eq` of that type. The derived `Eq` defines two\n * arrays as equal if all elements of both arrays are compared equal pairwise with the given `E`. In case of arrays of\n * different lengths, the result is non equality.\n *\n * @example\n * import { eqString } from 'fp-ts/Eq'\n * import { getEq } from 'fp-ts/Array'\n *\n * const E = getEq(eqString)\n * assert.strictEqual(E.equals(['a', 'b'], ['a', 'b']), true)\n * assert.strictEqual(E.equals(['a'], []), false)\n *\n * @category instances\n * @since 2.0.0\n */\n\nexports.getEq = RA.getEq;\n/**\n * Derives an `Ord` over the `Array` of a given element type from the `Ord` of that type. The ordering between two such\n * arrays is equal to: the first non equal comparison of each arrays elements taken pairwise in increasing order, in\n * case of equality over all the pairwise elements; the longest array is considered the greatest, if both arrays have\n * the same length, the result is equality.\n *\n * @example\n * import { getOrd } from 'fp-ts/Array'\n * import { ordString } from 'fp-ts/Ord'\n *\n * const O = getOrd(ordString)\n * assert.strictEqual(O.compare(['b'], ['a']), 1)\n * assert.strictEqual(O.compare(['a'], ['a']), 0)\n * assert.strictEqual(O.compare(['a'], ['b']), -1)\n *\n * @category instances\n * @since 2.0.0\n */\n\nexports.getOrd = RA.getOrd; // -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n\n/**\n * Return a list of length `n` with element `i` initialized with `f(i)`\n *\n * @example\n * import { makeBy } from 'fp-ts/Array'\n *\n * const double = (n: number): number => n * 2\n * assert.deepStrictEqual(makeBy(5, double), [0, 2, 4, 6, 8])\n *\n * @category constructors\n * @since 2.0.0\n */\n\nexports.makeBy = RA.makeBy;\n/**\n * Create an array containing a range of integers, including both endpoints\n *\n * @example\n * import { range } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(range(1, 5), [1, 2, 3, 4, 5])\n *\n * @category constructors\n * @since 2.0.0\n */\n\nexports.range = RA.range;\n/**\n * Create an array containing a value repeated the specified number of times\n *\n * @example\n * import { replicate } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(replicate(3, 'a'), ['a', 'a', 'a'])\n *\n * @category constructors\n * @since 2.0.0\n */\n\nexports.replicate = RA.replicate;\n/**\n * Removes one level of nesting.\n *\n * Derivable from `Monad`.\n *\n * @example\n * import { flatten } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(flatten([[1], [2], [3]]), [1, 2, 3])\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexports.flatten = RA.flatten;\n/**\n * Break an array into its first element and remaining elements\n *\n * @example\n * import { foldLeft } from 'fp-ts/Array'\n *\n * const len: <A>(as: Array<A>) => number = foldLeft(() => 0, (_, tail) => 1 + len(tail))\n * assert.strictEqual(len([1, 2, 3]), 3)\n *\n * @category destructors\n * @since 2.0.0\n */\n\nexports.foldLeft = RA.foldLeft;\n/**\n * Break an array into its initial elements and the last element\n *\n * @category destructors\n * @since 2.0.0\n */\n\nexports.foldRight = RA.foldRight;\n/**\n * Same as `reduce` but it carries over the intermediate steps\n *\n * @example\n * import { scanLeft } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(scanLeft(10, (b, a: number) => b - a)([1, 2, 3]), [10, 9, 7, 4])\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexports.scanLeft = RA.scanLeft;\n/**\n * Fold an array from the right, keeping all intermediate results instead of only the final result\n *\n * @example\n * import { scanRight } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(scanRight(10, (a: number, b) => b - a)([1, 2, 3]), [4, 5, 7, 10])\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexports.scanRight = RA.scanRight;\n/**\n * Test whether an array is empty\n *\n * @example\n * import { isEmpty } from 'fp-ts/Array'\n *\n * assert.strictEqual(isEmpty([]), true)\n *\n * @since 2.0.0\n */\n\nexports.isEmpty = RA.isEmpty;\n/**\n * Test whether an array is non empty narrowing down the type to `NonEmptyArray<A>`\n *\n * @category guards\n * @since 2.0.0\n */\n\nexports.isNonEmpty = RA.isNonEmpty;\n/**\n * Test whether an array contains a particular index\n *\n * @since 2.0.0\n */\n\nexports.isOutOfBound = RA.isOutOfBound; // TODO: remove non-curried overloading in v3\n\n/**\n * This function provides a safe way to read a value at a particular index from an array\n *\n * @example\n * import { lookup } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([1, 2, 3], lookup(1)), some(2))\n * assert.deepStrictEqual(pipe([1, 2, 3], lookup(3)), none)\n *\n * @since 2.0.0\n */\n\nexports.lookup = RA.lookup; // TODO: remove non-curried overloading in v3\n\n/**\n * Attaches an element to the front of an array, creating a new non empty array\n *\n * @example\n * import { cons } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([1, 2, 3], cons(0)), [0, 1, 2, 3])\n *\n * @category constructors\n * @since 2.0.0\n */\n\nexports.cons = RA.cons; // TODO: curry in v3\n\n/**\n * Append an element to the end of an array, creating a new non empty array\n *\n * @example\n * import { snoc } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(snoc([1, 2, 3], 4), [1, 2, 3, 4])\n *\n * @category constructors\n * @since 2.0.0\n */\n\nexports.snoc = RA.snoc;\n/**\n * Get the first element in an array, or `None` if the array is empty\n *\n * @example\n * import { head } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(head([1, 2, 3]), some(1))\n * assert.deepStrictEqual(head([]), none)\n *\n * @category destructors\n * @since 2.0.0\n */\n\nexports.head = RA.head;\n/**\n * Get the last element in an array, or `None` if the array is empty\n *\n * @example\n * import { last } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(last([1, 2, 3]), some(3))\n * assert.deepStrictEqual(last([]), none)\n *\n * @category destructors\n * @since 2.0.0\n */\n\nexports.last = RA.last;\n/**\n * Get all but the first element of an array, creating a new array, or `None` if the array is empty\n *\n * @example\n * import { tail } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(tail([1, 2, 3]), some([2, 3]))\n * assert.deepStrictEqual(tail([]), none)\n *\n * @category destructors\n * @since 2.0.0\n */\n\nexports.tail = RA.tail;\n/**\n * Get all but the last element of an array, creating a new array, or `None` if the array is empty\n *\n * @example\n * import { init } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(init([1, 2, 3]), some([1, 2]))\n * assert.deepStrictEqual(init([]), none)\n *\n * @category destructors\n * @since 2.0.0\n */\n\nexports.init = RA.init;\n/**\n * Keep only a number of elements from the start of an array, creating a new array.\n * `n` must be a natural number\n *\n * @example\n * import { takeLeft } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(takeLeft(2)([1, 2, 3]), [1, 2])\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexports.takeLeft = RA.takeLeft;\n/**\n * Keep only a number of elements from the end of an array, creating a new array.\n * `n` must be a natural number\n *\n * @example\n * import { takeRight } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(takeRight(2)([1, 2, 3, 4, 5]), [4, 5])\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexports.takeRight = RA.takeRight;\n\nfunction takeLeftWhile(predicate) {\n  return RA.takeLeftWhile(predicate);\n}\n\nexports.takeLeftWhile = takeLeftWhile;\n\nfunction spanLeft(predicate) {\n  return RA.spanLeft(predicate);\n}\n\nexports.spanLeft = spanLeft;\n/* tslint:enable:readonly-keyword */\n\n/**\n * Drop a number of elements from the start of an array, creating a new array\n *\n * @example\n * import { dropLeft } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(dropLeft(2)([1, 2, 3]), [3])\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexports.dropLeft = RA.dropLeft;\n/**\n * Drop a number of elements from the end of an array, creating a new array\n *\n * @example\n * import { dropRight } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(dropRight(2)([1, 2, 3, 4, 5]), [1, 2, 3])\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexports.dropRight = RA.dropRight;\n/**\n * Remove the longest initial subarray for which all element satisfy the specified predicate, creating a new array\n *\n * @example\n * import { dropLeftWhile } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(dropLeftWhile((n: number) => n % 2 === 1)([1, 3, 2, 4, 5]), [2, 4, 5])\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexports.dropLeftWhile = RA.dropLeftWhile;\n/**\n * Find the first index for which a predicate holds\n *\n * @example\n * import { findIndex } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(findIndex((n: number) => n === 2)([1, 2, 3]), some(1))\n * assert.deepStrictEqual(findIndex((n: number) => n === 2)([]), none)\n *\n * @since 2.0.0\n */\n\nexports.findIndex = RA.findIndex;\n\nfunction findFirst(predicate) {\n  return RA.findFirst(predicate);\n}\n\nexports.findFirst = findFirst;\n/**\n * Find the first element returned by an option based selector function\n *\n * @example\n * import { findFirstMap } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * interface Person {\n *   name: string\n *   age?: number\n * }\n *\n * const persons: Array<Person> = [{ name: 'John' }, { name: 'Mary', age: 45 }, { name: 'Joey', age: 28 }]\n *\n * // returns the name of the first person that has an age\n * assert.deepStrictEqual(findFirstMap((p: Person) => (p.age === undefined ? none : some(p.name)))(persons), some('Mary'))\n *\n * @category destructors\n * @since 2.0.0\n */\n\nexports.findFirstMap = RA.findFirstMap;\n\nfunction findLast(predicate) {\n  return RA.findLast(predicate);\n}\n\nexports.findLast = findLast;\n/**\n * Find the last element returned by an option based selector function\n *\n * @example\n * import { findLastMap } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * interface Person {\n *   name: string\n *   age?: number\n * }\n *\n * const persons: Array<Person> = [{ name: 'John' }, { name: 'Mary', age: 45 }, { name: 'Joey', age: 28 }]\n *\n * // returns the name of the last person that has an age\n * assert.deepStrictEqual(findLastMap((p: Person) => (p.age === undefined ? none : some(p.name)))(persons), some('Joey'))\n *\n * @category destructors\n * @since 2.0.0\n */\n\nexports.findLastMap = RA.findLastMap;\n/**\n * Returns the index of the last element of the list which matches the predicate\n *\n * @example\n * import { findLastIndex } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * interface X {\n *   a: number\n *   b: number\n * }\n * const xs: Array<X> = [{ a: 1, b: 0 }, { a: 1, b: 1 }]\n * assert.deepStrictEqual(findLastIndex((x: { a: number }) => x.a === 1)(xs), some(1))\n * assert.deepStrictEqual(findLastIndex((x: { a: number }) => x.a === 4)(xs), none)\n *\n *\n * @since 2.0.0\n */\n\nexports.findLastIndex = RA.findLastIndex;\n/**\n * @category combinators\n * @since 2.0.0\n */\n\nexports.copy = RA.toArray;\n/**\n * Insert an element at the specified index, creating a new array, or returning `None` if the index is out of bounds\n *\n * @example\n * import { insertAt } from 'fp-ts/Array'\n * import { some } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(insertAt(2, 5)([1, 2, 3, 4]), some([1, 2, 5, 3, 4]))\n *\n * @since 2.0.0\n */\n\nexports.insertAt = RA.insertAt;\n/**\n * Change the element at the specified index, creating a new array, or returning `None` if the index is out of bounds\n *\n * @example\n * import { updateAt } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(updateAt(1, 1)([1, 2, 3]), some([1, 1, 3]))\n * assert.deepStrictEqual(updateAt(1, 1)([]), none)\n *\n * @since 2.0.0\n */\n\nexports.updateAt = RA.updateAt;\n/**\n * Delete the element at the specified index, creating a new array, or returning `None` if the index is out of bounds\n *\n * @example\n * import { deleteAt } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(deleteAt(0)([1, 2, 3]), some([2, 3]))\n * assert.deepStrictEqual(deleteAt(1)([]), none)\n *\n * @since 2.0.0\n */\n\nexports.deleteAt = RA.deleteAt;\n/**\n * Apply a function to the element at the specified index, creating a new array, or returning `None` if the index is out\n * of bounds\n *\n * @example\n * import { modifyAt } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * const double = (x: number): number => x * 2\n * assert.deepStrictEqual(modifyAt(1, double)([1, 2, 3]), some([1, 4, 3]))\n * assert.deepStrictEqual(modifyAt(1, double)([]), none)\n *\n * @since 2.0.0\n */\n\nexports.modifyAt = RA.modifyAt;\n/**\n * Reverse an array, creating a new array\n *\n * @example\n * import { reverse } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(reverse([1, 2, 3]), [3, 2, 1])\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexports.reverse = RA.reverse;\n/**\n * Extracts from an array of `Either` all the `Right` elements. All the `Right` elements are extracted in order\n *\n * @example\n * import { rights } from 'fp-ts/Array'\n * import { right, left } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(rights([right(1), left('foo'), right(2)]), [1, 2])\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexports.rights = RA.rights;\n/**\n * Extracts from an array of `Either` all the `Left` elements. All the `Left` elements are extracted in order\n *\n * @example\n * import { lefts } from 'fp-ts/Array'\n * import { left, right } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(lefts([right(1), left('foo'), right(2)]), ['foo'])\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexports.lefts = RA.lefts;\n/**\n * Sort the elements of an array in increasing order, creating a new array\n *\n * @example\n * import { sort } from 'fp-ts/Array'\n * import { ordNumber } from 'fp-ts/Ord'\n *\n * assert.deepStrictEqual(sort(ordNumber)([3, 2, 1]), [1, 2, 3])\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexports.sort = RA.sort;\n/**\n * Apply a function to pairs of elements at the same index in two arrays, collecting the results in a new array. If one\n * input array is short, excess elements of the longer array are discarded.\n *\n * @example\n * import { zipWith } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(zipWith([1, 2, 3], ['a', 'b', 'c', 'd'], (n, s) => s + n), ['a1', 'b2', 'c3'])\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexports.zipWith = RA.zipWith; // TODO: remove non-curried overloading in v3\n\n/**\n * Takes two arrays and returns an array of corresponding pairs. If one input array is short, excess elements of the\n * longer array are discarded\n *\n * @example\n * import { zip } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([1, 2, 3], zip(['a', 'b', 'c', 'd'])), [[1, 'a'], [2, 'b'], [3, 'c']])\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexports.zip = RA.zip;\n/**\n * The function is reverse of `zip`. Takes an array of pairs and return two corresponding arrays\n *\n * @example\n * import { unzip } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(unzip([[1, 'a'], [2, 'b'], [3, 'c']]), [[1, 2, 3], ['a', 'b', 'c']])\n *\n * @since 2.0.0\n */\n\nexports.unzip = RA.unzip;\n/**\n * Prepend an element to every member of an array\n *\n * @example\n * import { prependToAll } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(prependToAll(9)([1, 2, 3, 4]), [9, 1, 9, 2, 9, 3, 9, 4])\n *\n * @category combinators\n * @since 2.9.0\n */\n\nexports.prependToAll = RA.prependToAll;\n/**\n * Places an element in between members of an array\n *\n * @example\n * import { intersperse } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(intersperse(9)([1, 2, 3, 4]), [1, 9, 2, 9, 3, 9, 4])\n *\n * @category combinators\n * @since 2.9.0\n */\n\nexports.intersperse = RA.intersperse;\n/**\n * Rotate an array to the right by `n` steps\n *\n * @example\n * import { rotate } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(rotate(2)([1, 2, 3, 4, 5]), [4, 5, 1, 2, 3])\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexports.rotate = RA.rotate; // TODO: remove non-curried overloading in v3\n\n/**\n * Test if a value is a member of an array. Takes a `Eq<A>` as a single\n * argument which returns the function to use to search for a value of type `A` in\n * an array of type `Array<A>`.\n *\n * @example\n * import { elem } from 'fp-ts/Array'\n * import { eqNumber } from 'fp-ts/Eq'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(pipe([1, 2, 3], elem(eqNumber)(2)), true)\n * assert.strictEqual(pipe([1, 2, 3], elem(eqNumber)(0)), false)\n *\n * @since 2.0.0\n */\n\nexports.elem = RA.elem;\n/**\n * Remove duplicates from an array, keeping the first occurrence of an element.\n *\n * @example\n * import { uniq } from 'fp-ts/Array'\n * import { eqNumber } from 'fp-ts/Eq'\n *\n * assert.deepStrictEqual(uniq(eqNumber)([1, 2, 1]), [1, 2])\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexports.uniq = RA.uniq;\n/**\n * Sort the elements of an array in increasing order, where elements are compared using first `ords[0]`, then `ords[1]`,\n * etc...\n *\n * @example\n * import { sortBy } from 'fp-ts/Array'\n * import { ord, ordString, ordNumber } from 'fp-ts/Ord'\n *\n * interface Person {\n *   name: string\n *   age: number\n * }\n * const byName = ord.contramap(ordString, (p: Person) => p.name)\n * const byAge = ord.contramap(ordNumber, (p: Person) => p.age)\n *\n * const sortByNameByAge = sortBy([byName, byAge])\n *\n * const persons = [{ name: 'a', age: 1 }, { name: 'b', age: 3 }, { name: 'c', age: 2 }, { name: 'b', age: 2 }]\n * assert.deepStrictEqual(sortByNameByAge(persons), [\n *   { name: 'a', age: 1 },\n *   { name: 'b', age: 2 },\n *   { name: 'b', age: 3 },\n *   { name: 'c', age: 2 }\n * ])\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexports.sortBy = RA.sortBy;\n/**\n * A useful recursion pattern for processing an array to produce a new array, often used for \"chopping\" up the input\n * array. Typically chop is called with some function that will consume an initial prefix of the array and produce a\n * value and the rest of the array.\n *\n * @example\n * import { Eq, eqNumber } from 'fp-ts/Eq'\n * import { chop, spanLeft } from 'fp-ts/Array'\n *\n * const group = <A>(S: Eq<A>): ((as: Array<A>) => Array<Array<A>>) => {\n *   return chop(as => {\n *     const { init, rest } = spanLeft((a: A) => S.equals(a, as[0]))(as)\n *     return [init, rest]\n *   })\n * }\n * assert.deepStrictEqual(group(eqNumber)([1, 1, 2, 3, 3, 4]), [[1, 1], [2], [3, 3], [4]])\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexports.chop = RA.chop;\n/**\n * Splits an array into two pieces, the first piece has `n` elements.\n *\n * @example\n * import { splitAt } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(splitAt(2)([1, 2, 3, 4, 5]), [[1, 2], [3, 4, 5]])\n *\n * @since 2.0.0\n */\n\nexports.splitAt = RA.splitAt;\n/**\n * Splits an array into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n * the array. Note that `chunksOf(n)([])` is `[]`, not `[[]]`. This is intentional, and is consistent with a recursive\n * definition of `chunksOf`; it satisfies the property that\n *\n * ```ts\n * chunksOf(n)(xs).concat(chunksOf(n)(ys)) == chunksOf(n)(xs.concat(ys)))\n * ```\n *\n * whenever `n` evenly divides the length of `xs`.\n *\n * @example\n * import { chunksOf } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(chunksOf(2)([1, 2, 3, 4, 5]), [[1, 2], [3, 4], [5]])\n *\n * @since 2.0.0\n */\n\nexports.chunksOf = RA.chunksOf;\n\nfunction comprehension(input, f, g) {\n  if (g === void 0) {\n    g = function () {\n      return true;\n    };\n  }\n\n  return RA.comprehension(input, f, g);\n}\n\nexports.comprehension = comprehension; // TODO: remove non-curried overloading in v3\n\n/**\n * Creates an array of unique values, in order, from all given arrays using a `Eq` for equality comparisons\n *\n * @example\n * import { union } from 'fp-ts/Array'\n * import { eqNumber } from 'fp-ts/Eq'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([1, 2], union(eqNumber)([2, 3])), [1, 2, 3])\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexports.union = RA.union; // TODO: remove non-curried overloading in v3\n\n/**\n * Creates an array of unique values that are included in all given arrays using a `Eq` for equality\n * comparisons. The order and references of result values are determined by the first array.\n *\n * @example\n * import { intersection } from 'fp-ts/Array'\n * import { eqNumber } from 'fp-ts/Eq'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([1, 2], intersection(eqNumber)([2, 3])), [2])\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexports.intersection = RA.intersection; // TODO: remove non-curried overloading in v3\n\n/**\n * Creates an array of array values not included in the other given array using a `Eq` for equality\n * comparisons. The order and references of result values are determined by the first array.\n *\n * @example\n * import { difference } from 'fp-ts/Array'\n * import { eqNumber } from 'fp-ts/Eq'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([1, 2], difference(eqNumber)([2, 3])), [1])\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexports.difference = RA.difference;\n/**\n * Wrap a value into the type constructor.\n *\n * @category Applicative\n * @since 2.0.0\n */\n\nexports.of = RA.of; // -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\n\nvar map_ = RA.Monad.map;\nvar ap_ = RA.Monad.ap;\nvar chain_ = RA.Monad.chain;\nvar mapWithIndex_ = RA.FunctorWithIndex.mapWithIndex;\nvar filter_ = RA.Filterable.filter;\nvar filterMap_ = RA.Filterable.filterMap;\nvar partition_ = RA.Filterable.partition;\nvar partitionMap_ = RA.Filterable.partitionMap;\nvar filterWithIndex_ = RA.FilterableWithIndex.filterWithIndex;\nvar filterMapWithIndex_ = RA.FilterableWithIndex.filterMapWithIndex;\nvar partitionWithIndex_ = RA.FilterableWithIndex.partitionWithIndex;\nvar partitionMapWithIndex_ = RA.FilterableWithIndex.partitionMapWithIndex;\nvar reduce_ = RA.Foldable.reduce;\nvar foldMap_ = RA.Foldable.foldMap;\nvar reduceRight_ = RA.Foldable.reduceRight;\nvar traverse_ = RA.Traversable.traverse;\nvar alt_ = RA.Alternative.alt;\nvar reduceWithIndex_ = RA.FoldableWithIndex.reduceWithIndex;\nvar foldMapWithIndex_ = RA.FoldableWithIndex.foldMapWithIndex;\nvar reduceRightWithIndex_ = RA.FoldableWithIndex.reduceRightWithIndex;\nvar traverseWithIndex_ = RA.TraversableWithIndex.traverseWithIndex;\nvar extend_ = RA.Extend.extend;\nvar wither_ = RA.Witherable.wither;\nvar wilt_ = RA.Witherable.wilt; // -------------------------------------------------------------------------------------\n// pipeables\n// -------------------------------------------------------------------------------------\n\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category Functor\n * @since 2.0.0\n */\n\nexports.map = RA.map;\n/**\n * Apply a function to an argument under a type constructor.\n *\n * @category Apply\n * @since 2.0.0\n */\n\nexports.ap = RA.ap;\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexports.apFirst = RA.apFirst;\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexports.apSecond = RA.apSecond;\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation.\n *\n * @category Monad\n * @since 2.0.0\n */\n\nexports.chain = RA.chain;\n/**\n * @since 2.7.0\n */\n\nexports.chainWithIndex = RA.chainWithIndex;\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * Derivable from `Monad`.\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexports.chainFirst = RA.chainFirst;\n/**\n * @category FunctorWithIndex\n * @since 2.0.0\n */\n\nexports.mapWithIndex = RA.mapWithIndex;\n/**\n * @category Compactable\n * @since 2.0.0\n */\n\nexports.compact = RA.compact;\n/**\n * @category Compactable\n * @since 2.0.0\n */\n\nexports.separate = RA.separate;\n/**\n * @category Filterable\n * @since 2.0.0\n */\n\nexports.filter = RA.filter;\n/**\n * @category Filterable\n * @since 2.0.0\n */\n\nexports.filterMap = RA.filterMap;\n/**\n * @category Filterable\n * @since 2.0.0\n */\n\nexports.partition = RA.partition;\n/**\n * @category FilterableWithIndex\n * @since 2.0.0\n */\n\nexports.partitionWithIndex = RA.partitionWithIndex;\n/**\n * @category Filterable\n * @since 2.0.0\n */\n\nexports.partitionMap = RA.partitionMap;\n/**\n * @category FilterableWithIndex\n * @since 2.0.0\n */\n\nexports.partitionMapWithIndex = RA.partitionMapWithIndex;\n/**\n * Less strict version of [`alt`](#alt).\n *\n * @category Alt\n * @since 2.9.0\n */\n\nexports.altW = RA.altW;\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * @category Alt\n * @since 2.0.0\n */\n\nexports.alt = RA.alt;\n/**\n * @category FilterableWithIndex\n * @since 2.0.0\n */\n\nexports.filterMapWithIndex = RA.filterMapWithIndex;\n/**\n * @category FilterableWithIndex\n * @since 2.0.0\n */\n\nexports.filterWithIndex = RA.filterWithIndex;\n/**\n * @category Extend\n * @since 2.0.0\n */\n\nexports.extend = RA.extend;\n/**\n * Derivable from `Extend`.\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexports.duplicate = RA.duplicate;\n/**\n * @category Foldable\n * @since 2.0.0\n */\n\nexports.foldMap = RA.foldMap;\n/**\n * @category FoldableWithIndex\n * @since 2.0.0\n */\n\nexports.foldMapWithIndex = RA.foldMapWithIndex;\n/**\n * @category Foldable\n * @since 2.0.0\n */\n\nexports.reduce = RA.reduce;\n/**\n * @category FoldableWithIndex\n * @since 2.0.0\n */\n\nexports.reduceWithIndex = RA.reduceWithIndex;\n/**\n * @category Foldable\n * @since 2.0.0\n */\n\nexports.reduceRight = RA.reduceRight;\n/**\n * @category FoldableWithIndex\n * @since 2.0.0\n */\n\nexports.reduceRightWithIndex = RA.reduceRightWithIndex;\n/**\n * **for optimized and stack safe version check the data types `traverseArray` function**\n * @category Traversable\n * @since 2.6.3\n */\n\nexports.traverse = RA.traverse;\n/**\n * **for optimized and stack safe version check the data types `sequenceArray` function**\n * @category Traversable\n * @since 2.6.3\n */\n\nexports.sequence = RA.sequence;\n/**\n * **for optimized and stack safe version check the data types `traverseArrayWithIndex` function**\n * @category TraversableWithIndex\n * @since 2.6.3\n */\n\nexports.traverseWithIndex = RA.traverseWithIndex;\n/**\n * @category Witherable\n * @since 2.6.5\n */\n\nexports.wither = RA.wither;\n/**\n * @category Witherable\n * @since 2.6.5\n */\n\nexports.wilt = RA.wilt;\n/**\n * @category Unfoldable\n * @since 2.6.6\n */\n\nexports.unfold = RA.unfold;\n/**\n * @category Alternative\n * @since 2.7.0\n */\n\nexports.zero = RA.Alternative.zero; // -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n\n/**\n * @category instances\n * @since 2.0.0\n */\n\nexports.URI = 'Array';\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexports.Functor = {\n  URI: exports.URI,\n  map: map_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexports.FunctorWithIndex = {\n  URI: exports.URI,\n  map: map_,\n  mapWithIndex: mapWithIndex_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexports.Applicative = {\n  URI: exports.URI,\n  map: map_,\n  ap: ap_,\n  of: exports.of\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexports.Monad = {\n  URI: exports.URI,\n  map: map_,\n  ap: ap_,\n  of: exports.of,\n  chain: chain_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexports.Unfoldable = {\n  URI: exports.URI,\n  unfold: exports.unfold\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexports.Alt = {\n  URI: exports.URI,\n  map: map_,\n  alt: alt_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexports.Alternative = {\n  URI: exports.URI,\n  map: map_,\n  ap: ap_,\n  of: exports.of,\n  alt: alt_,\n  zero: exports.zero\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexports.Extend = {\n  URI: exports.URI,\n  map: map_,\n  extend: extend_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexports.Compactable = {\n  URI: exports.URI,\n  compact: exports.compact,\n  separate: exports.separate\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexports.Filterable = {\n  URI: exports.URI,\n  map: map_,\n  compact: exports.compact,\n  separate: exports.separate,\n  filter: filter_,\n  filterMap: filterMap_,\n  partition: partition_,\n  partitionMap: partitionMap_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexports.FilterableWithIndex = {\n  URI: exports.URI,\n  map: map_,\n  mapWithIndex: mapWithIndex_,\n  compact: exports.compact,\n  separate: exports.separate,\n  filter: filter_,\n  filterMap: filterMap_,\n  partition: partition_,\n  partitionMap: partitionMap_,\n  partitionMapWithIndex: partitionMapWithIndex_,\n  partitionWithIndex: partitionWithIndex_,\n  filterMapWithIndex: filterMapWithIndex_,\n  filterWithIndex: filterWithIndex_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexports.Foldable = {\n  URI: exports.URI,\n  reduce: reduce_,\n  foldMap: foldMap_,\n  reduceRight: reduceRight_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexports.FoldableWithIndex = {\n  URI: exports.URI,\n  reduce: reduce_,\n  foldMap: foldMap_,\n  reduceRight: reduceRight_,\n  reduceWithIndex: reduceWithIndex_,\n  foldMapWithIndex: foldMapWithIndex_,\n  reduceRightWithIndex: reduceRightWithIndex_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexports.Traversable = {\n  URI: exports.URI,\n  map: map_,\n  reduce: reduce_,\n  foldMap: foldMap_,\n  reduceRight: reduceRight_,\n  traverse: traverse_,\n  sequence: exports.sequence\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexports.TraversableWithIndex = {\n  URI: exports.URI,\n  map: map_,\n  mapWithIndex: mapWithIndex_,\n  reduce: reduce_,\n  foldMap: foldMap_,\n  reduceRight: reduceRight_,\n  reduceWithIndex: reduceWithIndex_,\n  foldMapWithIndex: foldMapWithIndex_,\n  reduceRightWithIndex: reduceRightWithIndex_,\n  traverse: traverse_,\n  sequence: exports.sequence,\n  traverseWithIndex: traverseWithIndex_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexports.Witherable = {\n  URI: exports.URI,\n  map: map_,\n  compact: exports.compact,\n  separate: exports.separate,\n  filter: filter_,\n  filterMap: filterMap_,\n  partition: partition_,\n  partitionMap: partitionMap_,\n  reduce: reduce_,\n  foldMap: foldMap_,\n  reduceRight: reduceRight_,\n  traverse: traverse_,\n  sequence: exports.sequence,\n  wither: wither_,\n  wilt: wilt_\n}; // TODO: remove in v3\n\n/**\n * @category instances\n * @since 2.0.0\n */\n\nexports.array = {\n  URI: exports.URI,\n  compact: exports.compact,\n  separate: exports.separate,\n  map: map_,\n  ap: ap_,\n  of: exports.of,\n  chain: chain_,\n  filter: filter_,\n  filterMap: filterMap_,\n  partition: partition_,\n  partitionMap: partitionMap_,\n  mapWithIndex: mapWithIndex_,\n  partitionMapWithIndex: partitionMapWithIndex_,\n  partitionWithIndex: partitionWithIndex_,\n  filterMapWithIndex: filterMapWithIndex_,\n  filterWithIndex: filterWithIndex_,\n  alt: alt_,\n  zero: exports.zero,\n  unfold: exports.unfold,\n  reduce: reduce_,\n  foldMap: foldMap_,\n  reduceRight: reduceRight_,\n  traverse: traverse_,\n  sequence: exports.sequence,\n  reduceWithIndex: reduceWithIndex_,\n  foldMapWithIndex: foldMapWithIndex_,\n  reduceRightWithIndex: reduceRightWithIndex_,\n  traverseWithIndex: traverseWithIndex_,\n  extend: extend_,\n  wither: wither_,\n  wilt: wilt_\n}; // -------------------------------------------------------------------------------------\n// unsafe\n// -------------------------------------------------------------------------------------\n\n/**\n * @category unsafe\n * @since 2.0.0\n */\n\nexports.unsafeInsertAt = RA.unsafeInsertAt;\n/**\n * @category unsafe\n * @since 2.0.0\n */\n\nexports.unsafeUpdateAt = RA.unsafeUpdateAt;\n/**\n * @category unsafe\n * @since 2.0.0\n */\n\nexports.unsafeDeleteAt = RA.unsafeDeleteAt; // -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n\n/**\n * An empty array\n *\n * @since 2.0.0\n */\n\nexports.empty = [];\n/**\n * @since 2.9.0\n */\n\nexports.every = RA.every;\n/**\n * @since 2.9.0\n */\n\nexports.some = RA.some; // -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n\n/**\n * @since 2.9.0\n */\n\nexports.Do = /*#__PURE__*/exports.of({});\n/**\n * @since 2.8.0\n */\n\nexports.bindTo = RA.bindTo;\n/**\n * @since 2.8.0\n */\n\nexports.bind = RA.bind; // -------------------------------------------------------------------------------------\n// pipeable sequence S\n// -------------------------------------------------------------------------------------\n\n/**\n * @since 2.8.0\n */\n\nexports.apS = RA.apS;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__setModuleDefault","v","value","__importStar","mod","__esModule","result","prototype","hasOwnProperty","call","exports","rotate","intersperse","prependToAll","unzip","zip","zipWith","sort","lefts","rights","reverse","modifyAt","deleteAt","updateAt","insertAt","copy","findLastIndex","findLastMap","findLast","findFirstMap","findFirst","findIndex","dropLeftWhile","dropRight","dropLeft","spanLeft","takeLeftWhile","takeRight","takeLeft","init","tail","last","head","snoc","cons","lookup","isOutOfBound","isNonEmpty","isEmpty","scanRight","scanLeft","foldRight","foldLeft","flatten","replicate","range","makeBy","getOrd","getEq","getMonoid","getShow","Applicative","FunctorWithIndex","Functor","URI","zero","unfold","wilt","wither","traverseWithIndex","sequence","traverse","reduceRightWithIndex","reduceRight","reduceWithIndex","reduce","foldMapWithIndex","foldMap","duplicate","extend","filterWithIndex","filterMapWithIndex","alt","altW","partitionMapWithIndex","partitionMap","partitionWithIndex","partition","filterMap","filter","separate","compact","mapWithIndex","chainFirst","chainWithIndex","chain","apSecond","apFirst","ap","map","of","difference","intersection","union","comprehension","chunksOf","splitAt","chop","sortBy","uniq","elem","apS","bind","bindTo","Do","some","every","empty","unsafeDeleteAt","unsafeUpdateAt","unsafeInsertAt","array","Witherable","TraversableWithIndex","Traversable","FoldableWithIndex","Foldable","FilterableWithIndex","Filterable","Compactable","Extend","Alternative","Alt","Unfoldable","Monad","RA","require","predicate","toArray","input","f","g","map_","ap_","chain_","mapWithIndex_","filter_","filterMap_","partition_","partitionMap_","filterWithIndex_","filterMapWithIndex_","partitionWithIndex_","partitionMapWithIndex_","reduce_","foldMap_","reduceRight_","traverse_","alt_","reduceWithIndex_","foldMapWithIndex_","reduceRightWithIndex_","traverseWithIndex_","extend_","wither_","wilt_"],"sources":["/Users/ngocban/Desktop/imx-integration-reactjs/node_modules/fp-ts/lib/Array.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.rotate = exports.intersperse = exports.prependToAll = exports.unzip = exports.zip = exports.zipWith = exports.sort = exports.lefts = exports.rights = exports.reverse = exports.modifyAt = exports.deleteAt = exports.updateAt = exports.insertAt = exports.copy = exports.findLastIndex = exports.findLastMap = exports.findLast = exports.findFirstMap = exports.findFirst = exports.findIndex = exports.dropLeftWhile = exports.dropRight = exports.dropLeft = exports.spanLeft = exports.takeLeftWhile = exports.takeRight = exports.takeLeft = exports.init = exports.tail = exports.last = exports.head = exports.snoc = exports.cons = exports.lookup = exports.isOutOfBound = exports.isNonEmpty = exports.isEmpty = exports.scanRight = exports.scanLeft = exports.foldRight = exports.foldLeft = exports.flatten = exports.replicate = exports.range = exports.makeBy = exports.getOrd = exports.getEq = exports.getMonoid = exports.getShow = void 0;\nexports.Applicative = exports.FunctorWithIndex = exports.Functor = exports.URI = exports.zero = exports.unfold = exports.wilt = exports.wither = exports.traverseWithIndex = exports.sequence = exports.traverse = exports.reduceRightWithIndex = exports.reduceRight = exports.reduceWithIndex = exports.reduce = exports.foldMapWithIndex = exports.foldMap = exports.duplicate = exports.extend = exports.filterWithIndex = exports.filterMapWithIndex = exports.alt = exports.altW = exports.partitionMapWithIndex = exports.partitionMap = exports.partitionWithIndex = exports.partition = exports.filterMap = exports.filter = exports.separate = exports.compact = exports.mapWithIndex = exports.chainFirst = exports.chainWithIndex = exports.chain = exports.apSecond = exports.apFirst = exports.ap = exports.map = exports.of = exports.difference = exports.intersection = exports.union = exports.comprehension = exports.chunksOf = exports.splitAt = exports.chop = exports.sortBy = exports.uniq = exports.elem = void 0;\nexports.apS = exports.bind = exports.bindTo = exports.Do = exports.some = exports.every = exports.empty = exports.unsafeDeleteAt = exports.unsafeUpdateAt = exports.unsafeInsertAt = exports.array = exports.Witherable = exports.TraversableWithIndex = exports.Traversable = exports.FoldableWithIndex = exports.Foldable = exports.FilterableWithIndex = exports.Filterable = exports.Compactable = exports.Extend = exports.Alternative = exports.Alt = exports.Unfoldable = exports.Monad = void 0;\nvar RA = __importStar(require(\"./ReadonlyArray\"));\n// -------------------------------------------------------------------------------------\n// model\n// -------------------------------------------------------------------------------------\n/* tslint:disable:readonly-array */\n/**\n * @category instances\n * @since 2.0.0\n */\nexports.getShow = RA.getShow;\n/**\n * Returns a `Monoid` for `Array<A>`\n *\n * @example\n * import { getMonoid } from 'fp-ts/Array'\n *\n * const M = getMonoid<number>()\n * assert.deepStrictEqual(M.concat([1, 2], [3, 4]), [1, 2, 3, 4])\n *\n * @category instances\n * @since 2.0.0\n */\nexports.getMonoid = RA.getMonoid;\n/**\n * Derives an `Eq` over the `Array` of a given element type from the `Eq` of that type. The derived `Eq` defines two\n * arrays as equal if all elements of both arrays are compared equal pairwise with the given `E`. In case of arrays of\n * different lengths, the result is non equality.\n *\n * @example\n * import { eqString } from 'fp-ts/Eq'\n * import { getEq } from 'fp-ts/Array'\n *\n * const E = getEq(eqString)\n * assert.strictEqual(E.equals(['a', 'b'], ['a', 'b']), true)\n * assert.strictEqual(E.equals(['a'], []), false)\n *\n * @category instances\n * @since 2.0.0\n */\nexports.getEq = RA.getEq;\n/**\n * Derives an `Ord` over the `Array` of a given element type from the `Ord` of that type. The ordering between two such\n * arrays is equal to: the first non equal comparison of each arrays elements taken pairwise in increasing order, in\n * case of equality over all the pairwise elements; the longest array is considered the greatest, if both arrays have\n * the same length, the result is equality.\n *\n * @example\n * import { getOrd } from 'fp-ts/Array'\n * import { ordString } from 'fp-ts/Ord'\n *\n * const O = getOrd(ordString)\n * assert.strictEqual(O.compare(['b'], ['a']), 1)\n * assert.strictEqual(O.compare(['a'], ['a']), 0)\n * assert.strictEqual(O.compare(['a'], ['b']), -1)\n *\n * @category instances\n * @since 2.0.0\n */\nexports.getOrd = RA.getOrd;\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * Return a list of length `n` with element `i` initialized with `f(i)`\n *\n * @example\n * import { makeBy } from 'fp-ts/Array'\n *\n * const double = (n: number): number => n * 2\n * assert.deepStrictEqual(makeBy(5, double), [0, 2, 4, 6, 8])\n *\n * @category constructors\n * @since 2.0.0\n */\nexports.makeBy = RA.makeBy;\n/**\n * Create an array containing a range of integers, including both endpoints\n *\n * @example\n * import { range } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(range(1, 5), [1, 2, 3, 4, 5])\n *\n * @category constructors\n * @since 2.0.0\n */\nexports.range = RA.range;\n/**\n * Create an array containing a value repeated the specified number of times\n *\n * @example\n * import { replicate } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(replicate(3, 'a'), ['a', 'a', 'a'])\n *\n * @category constructors\n * @since 2.0.0\n */\nexports.replicate = RA.replicate;\n/**\n * Removes one level of nesting.\n *\n * Derivable from `Monad`.\n *\n * @example\n * import { flatten } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(flatten([[1], [2], [3]]), [1, 2, 3])\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.flatten = RA.flatten;\n/**\n * Break an array into its first element and remaining elements\n *\n * @example\n * import { foldLeft } from 'fp-ts/Array'\n *\n * const len: <A>(as: Array<A>) => number = foldLeft(() => 0, (_, tail) => 1 + len(tail))\n * assert.strictEqual(len([1, 2, 3]), 3)\n *\n * @category destructors\n * @since 2.0.0\n */\nexports.foldLeft = RA.foldLeft;\n/**\n * Break an array into its initial elements and the last element\n *\n * @category destructors\n * @since 2.0.0\n */\nexports.foldRight = RA.foldRight;\n/**\n * Same as `reduce` but it carries over the intermediate steps\n *\n * @example\n * import { scanLeft } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(scanLeft(10, (b, a: number) => b - a)([1, 2, 3]), [10, 9, 7, 4])\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.scanLeft = RA.scanLeft;\n/**\n * Fold an array from the right, keeping all intermediate results instead of only the final result\n *\n * @example\n * import { scanRight } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(scanRight(10, (a: number, b) => b - a)([1, 2, 3]), [4, 5, 7, 10])\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.scanRight = RA.scanRight;\n/**\n * Test whether an array is empty\n *\n * @example\n * import { isEmpty } from 'fp-ts/Array'\n *\n * assert.strictEqual(isEmpty([]), true)\n *\n * @since 2.0.0\n */\nexports.isEmpty = RA.isEmpty;\n/**\n * Test whether an array is non empty narrowing down the type to `NonEmptyArray<A>`\n *\n * @category guards\n * @since 2.0.0\n */\nexports.isNonEmpty = RA.isNonEmpty;\n/**\n * Test whether an array contains a particular index\n *\n * @since 2.0.0\n */\nexports.isOutOfBound = RA.isOutOfBound;\n// TODO: remove non-curried overloading in v3\n/**\n * This function provides a safe way to read a value at a particular index from an array\n *\n * @example\n * import { lookup } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([1, 2, 3], lookup(1)), some(2))\n * assert.deepStrictEqual(pipe([1, 2, 3], lookup(3)), none)\n *\n * @since 2.0.0\n */\nexports.lookup = RA.lookup;\n// TODO: remove non-curried overloading in v3\n/**\n * Attaches an element to the front of an array, creating a new non empty array\n *\n * @example\n * import { cons } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([1, 2, 3], cons(0)), [0, 1, 2, 3])\n *\n * @category constructors\n * @since 2.0.0\n */\nexports.cons = RA.cons;\n// TODO: curry in v3\n/**\n * Append an element to the end of an array, creating a new non empty array\n *\n * @example\n * import { snoc } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(snoc([1, 2, 3], 4), [1, 2, 3, 4])\n *\n * @category constructors\n * @since 2.0.0\n */\nexports.snoc = RA.snoc;\n/**\n * Get the first element in an array, or `None` if the array is empty\n *\n * @example\n * import { head } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(head([1, 2, 3]), some(1))\n * assert.deepStrictEqual(head([]), none)\n *\n * @category destructors\n * @since 2.0.0\n */\nexports.head = RA.head;\n/**\n * Get the last element in an array, or `None` if the array is empty\n *\n * @example\n * import { last } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(last([1, 2, 3]), some(3))\n * assert.deepStrictEqual(last([]), none)\n *\n * @category destructors\n * @since 2.0.0\n */\nexports.last = RA.last;\n/**\n * Get all but the first element of an array, creating a new array, or `None` if the array is empty\n *\n * @example\n * import { tail } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(tail([1, 2, 3]), some([2, 3]))\n * assert.deepStrictEqual(tail([]), none)\n *\n * @category destructors\n * @since 2.0.0\n */\nexports.tail = RA.tail;\n/**\n * Get all but the last element of an array, creating a new array, or `None` if the array is empty\n *\n * @example\n * import { init } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(init([1, 2, 3]), some([1, 2]))\n * assert.deepStrictEqual(init([]), none)\n *\n * @category destructors\n * @since 2.0.0\n */\nexports.init = RA.init;\n/**\n * Keep only a number of elements from the start of an array, creating a new array.\n * `n` must be a natural number\n *\n * @example\n * import { takeLeft } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(takeLeft(2)([1, 2, 3]), [1, 2])\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.takeLeft = RA.takeLeft;\n/**\n * Keep only a number of elements from the end of an array, creating a new array.\n * `n` must be a natural number\n *\n * @example\n * import { takeRight } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(takeRight(2)([1, 2, 3, 4, 5]), [4, 5])\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.takeRight = RA.takeRight;\nfunction takeLeftWhile(predicate) {\n    return RA.takeLeftWhile(predicate);\n}\nexports.takeLeftWhile = takeLeftWhile;\nfunction spanLeft(predicate) {\n    return RA.spanLeft(predicate);\n}\nexports.spanLeft = spanLeft;\n/* tslint:enable:readonly-keyword */\n/**\n * Drop a number of elements from the start of an array, creating a new array\n *\n * @example\n * import { dropLeft } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(dropLeft(2)([1, 2, 3]), [3])\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.dropLeft = RA.dropLeft;\n/**\n * Drop a number of elements from the end of an array, creating a new array\n *\n * @example\n * import { dropRight } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(dropRight(2)([1, 2, 3, 4, 5]), [1, 2, 3])\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.dropRight = RA.dropRight;\n/**\n * Remove the longest initial subarray for which all element satisfy the specified predicate, creating a new array\n *\n * @example\n * import { dropLeftWhile } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(dropLeftWhile((n: number) => n % 2 === 1)([1, 3, 2, 4, 5]), [2, 4, 5])\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.dropLeftWhile = RA.dropLeftWhile;\n/**\n * Find the first index for which a predicate holds\n *\n * @example\n * import { findIndex } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(findIndex((n: number) => n === 2)([1, 2, 3]), some(1))\n * assert.deepStrictEqual(findIndex((n: number) => n === 2)([]), none)\n *\n * @since 2.0.0\n */\nexports.findIndex = RA.findIndex;\nfunction findFirst(predicate) {\n    return RA.findFirst(predicate);\n}\nexports.findFirst = findFirst;\n/**\n * Find the first element returned by an option based selector function\n *\n * @example\n * import { findFirstMap } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * interface Person {\n *   name: string\n *   age?: number\n * }\n *\n * const persons: Array<Person> = [{ name: 'John' }, { name: 'Mary', age: 45 }, { name: 'Joey', age: 28 }]\n *\n * // returns the name of the first person that has an age\n * assert.deepStrictEqual(findFirstMap((p: Person) => (p.age === undefined ? none : some(p.name)))(persons), some('Mary'))\n *\n * @category destructors\n * @since 2.0.0\n */\nexports.findFirstMap = RA.findFirstMap;\nfunction findLast(predicate) {\n    return RA.findLast(predicate);\n}\nexports.findLast = findLast;\n/**\n * Find the last element returned by an option based selector function\n *\n * @example\n * import { findLastMap } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * interface Person {\n *   name: string\n *   age?: number\n * }\n *\n * const persons: Array<Person> = [{ name: 'John' }, { name: 'Mary', age: 45 }, { name: 'Joey', age: 28 }]\n *\n * // returns the name of the last person that has an age\n * assert.deepStrictEqual(findLastMap((p: Person) => (p.age === undefined ? none : some(p.name)))(persons), some('Joey'))\n *\n * @category destructors\n * @since 2.0.0\n */\nexports.findLastMap = RA.findLastMap;\n/**\n * Returns the index of the last element of the list which matches the predicate\n *\n * @example\n * import { findLastIndex } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * interface X {\n *   a: number\n *   b: number\n * }\n * const xs: Array<X> = [{ a: 1, b: 0 }, { a: 1, b: 1 }]\n * assert.deepStrictEqual(findLastIndex((x: { a: number }) => x.a === 1)(xs), some(1))\n * assert.deepStrictEqual(findLastIndex((x: { a: number }) => x.a === 4)(xs), none)\n *\n *\n * @since 2.0.0\n */\nexports.findLastIndex = RA.findLastIndex;\n/**\n * @category combinators\n * @since 2.0.0\n */\nexports.copy = RA.toArray;\n/**\n * Insert an element at the specified index, creating a new array, or returning `None` if the index is out of bounds\n *\n * @example\n * import { insertAt } from 'fp-ts/Array'\n * import { some } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(insertAt(2, 5)([1, 2, 3, 4]), some([1, 2, 5, 3, 4]))\n *\n * @since 2.0.0\n */\nexports.insertAt = RA.insertAt;\n/**\n * Change the element at the specified index, creating a new array, or returning `None` if the index is out of bounds\n *\n * @example\n * import { updateAt } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(updateAt(1, 1)([1, 2, 3]), some([1, 1, 3]))\n * assert.deepStrictEqual(updateAt(1, 1)([]), none)\n *\n * @since 2.0.0\n */\nexports.updateAt = RA.updateAt;\n/**\n * Delete the element at the specified index, creating a new array, or returning `None` if the index is out of bounds\n *\n * @example\n * import { deleteAt } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(deleteAt(0)([1, 2, 3]), some([2, 3]))\n * assert.deepStrictEqual(deleteAt(1)([]), none)\n *\n * @since 2.0.0\n */\nexports.deleteAt = RA.deleteAt;\n/**\n * Apply a function to the element at the specified index, creating a new array, or returning `None` if the index is out\n * of bounds\n *\n * @example\n * import { modifyAt } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * const double = (x: number): number => x * 2\n * assert.deepStrictEqual(modifyAt(1, double)([1, 2, 3]), some([1, 4, 3]))\n * assert.deepStrictEqual(modifyAt(1, double)([]), none)\n *\n * @since 2.0.0\n */\nexports.modifyAt = RA.modifyAt;\n/**\n * Reverse an array, creating a new array\n *\n * @example\n * import { reverse } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(reverse([1, 2, 3]), [3, 2, 1])\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.reverse = RA.reverse;\n/**\n * Extracts from an array of `Either` all the `Right` elements. All the `Right` elements are extracted in order\n *\n * @example\n * import { rights } from 'fp-ts/Array'\n * import { right, left } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(rights([right(1), left('foo'), right(2)]), [1, 2])\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.rights = RA.rights;\n/**\n * Extracts from an array of `Either` all the `Left` elements. All the `Left` elements are extracted in order\n *\n * @example\n * import { lefts } from 'fp-ts/Array'\n * import { left, right } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(lefts([right(1), left('foo'), right(2)]), ['foo'])\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.lefts = RA.lefts;\n/**\n * Sort the elements of an array in increasing order, creating a new array\n *\n * @example\n * import { sort } from 'fp-ts/Array'\n * import { ordNumber } from 'fp-ts/Ord'\n *\n * assert.deepStrictEqual(sort(ordNumber)([3, 2, 1]), [1, 2, 3])\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.sort = RA.sort;\n/**\n * Apply a function to pairs of elements at the same index in two arrays, collecting the results in a new array. If one\n * input array is short, excess elements of the longer array are discarded.\n *\n * @example\n * import { zipWith } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(zipWith([1, 2, 3], ['a', 'b', 'c', 'd'], (n, s) => s + n), ['a1', 'b2', 'c3'])\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.zipWith = RA.zipWith;\n// TODO: remove non-curried overloading in v3\n/**\n * Takes two arrays and returns an array of corresponding pairs. If one input array is short, excess elements of the\n * longer array are discarded\n *\n * @example\n * import { zip } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([1, 2, 3], zip(['a', 'b', 'c', 'd'])), [[1, 'a'], [2, 'b'], [3, 'c']])\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.zip = RA.zip;\n/**\n * The function is reverse of `zip`. Takes an array of pairs and return two corresponding arrays\n *\n * @example\n * import { unzip } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(unzip([[1, 'a'], [2, 'b'], [3, 'c']]), [[1, 2, 3], ['a', 'b', 'c']])\n *\n * @since 2.0.0\n */\nexports.unzip = RA.unzip;\n/**\n * Prepend an element to every member of an array\n *\n * @example\n * import { prependToAll } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(prependToAll(9)([1, 2, 3, 4]), [9, 1, 9, 2, 9, 3, 9, 4])\n *\n * @category combinators\n * @since 2.9.0\n */\nexports.prependToAll = RA.prependToAll;\n/**\n * Places an element in between members of an array\n *\n * @example\n * import { intersperse } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(intersperse(9)([1, 2, 3, 4]), [1, 9, 2, 9, 3, 9, 4])\n *\n * @category combinators\n * @since 2.9.0\n */\nexports.intersperse = RA.intersperse;\n/**\n * Rotate an array to the right by `n` steps\n *\n * @example\n * import { rotate } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(rotate(2)([1, 2, 3, 4, 5]), [4, 5, 1, 2, 3])\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.rotate = RA.rotate;\n// TODO: remove non-curried overloading in v3\n/**\n * Test if a value is a member of an array. Takes a `Eq<A>` as a single\n * argument which returns the function to use to search for a value of type `A` in\n * an array of type `Array<A>`.\n *\n * @example\n * import { elem } from 'fp-ts/Array'\n * import { eqNumber } from 'fp-ts/Eq'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(pipe([1, 2, 3], elem(eqNumber)(2)), true)\n * assert.strictEqual(pipe([1, 2, 3], elem(eqNumber)(0)), false)\n *\n * @since 2.0.0\n */\nexports.elem = RA.elem;\n/**\n * Remove duplicates from an array, keeping the first occurrence of an element.\n *\n * @example\n * import { uniq } from 'fp-ts/Array'\n * import { eqNumber } from 'fp-ts/Eq'\n *\n * assert.deepStrictEqual(uniq(eqNumber)([1, 2, 1]), [1, 2])\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.uniq = RA.uniq;\n/**\n * Sort the elements of an array in increasing order, where elements are compared using first `ords[0]`, then `ords[1]`,\n * etc...\n *\n * @example\n * import { sortBy } from 'fp-ts/Array'\n * import { ord, ordString, ordNumber } from 'fp-ts/Ord'\n *\n * interface Person {\n *   name: string\n *   age: number\n * }\n * const byName = ord.contramap(ordString, (p: Person) => p.name)\n * const byAge = ord.contramap(ordNumber, (p: Person) => p.age)\n *\n * const sortByNameByAge = sortBy([byName, byAge])\n *\n * const persons = [{ name: 'a', age: 1 }, { name: 'b', age: 3 }, { name: 'c', age: 2 }, { name: 'b', age: 2 }]\n * assert.deepStrictEqual(sortByNameByAge(persons), [\n *   { name: 'a', age: 1 },\n *   { name: 'b', age: 2 },\n *   { name: 'b', age: 3 },\n *   { name: 'c', age: 2 }\n * ])\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.sortBy = RA.sortBy;\n/**\n * A useful recursion pattern for processing an array to produce a new array, often used for \"chopping\" up the input\n * array. Typically chop is called with some function that will consume an initial prefix of the array and produce a\n * value and the rest of the array.\n *\n * @example\n * import { Eq, eqNumber } from 'fp-ts/Eq'\n * import { chop, spanLeft } from 'fp-ts/Array'\n *\n * const group = <A>(S: Eq<A>): ((as: Array<A>) => Array<Array<A>>) => {\n *   return chop(as => {\n *     const { init, rest } = spanLeft((a: A) => S.equals(a, as[0]))(as)\n *     return [init, rest]\n *   })\n * }\n * assert.deepStrictEqual(group(eqNumber)([1, 1, 2, 3, 3, 4]), [[1, 1], [2], [3, 3], [4]])\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.chop = RA.chop;\n/**\n * Splits an array into two pieces, the first piece has `n` elements.\n *\n * @example\n * import { splitAt } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(splitAt(2)([1, 2, 3, 4, 5]), [[1, 2], [3, 4, 5]])\n *\n * @since 2.0.0\n */\nexports.splitAt = RA.splitAt;\n/**\n * Splits an array into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n * the array. Note that `chunksOf(n)([])` is `[]`, not `[[]]`. This is intentional, and is consistent with a recursive\n * definition of `chunksOf`; it satisfies the property that\n *\n * ```ts\n * chunksOf(n)(xs).concat(chunksOf(n)(ys)) == chunksOf(n)(xs.concat(ys)))\n * ```\n *\n * whenever `n` evenly divides the length of `xs`.\n *\n * @example\n * import { chunksOf } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(chunksOf(2)([1, 2, 3, 4, 5]), [[1, 2], [3, 4], [5]])\n *\n * @since 2.0.0\n */\nexports.chunksOf = RA.chunksOf;\nfunction comprehension(input, f, g) {\n    if (g === void 0) { g = function () { return true; }; }\n    return RA.comprehension(input, f, g);\n}\nexports.comprehension = comprehension;\n// TODO: remove non-curried overloading in v3\n/**\n * Creates an array of unique values, in order, from all given arrays using a `Eq` for equality comparisons\n *\n * @example\n * import { union } from 'fp-ts/Array'\n * import { eqNumber } from 'fp-ts/Eq'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([1, 2], union(eqNumber)([2, 3])), [1, 2, 3])\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.union = RA.union;\n// TODO: remove non-curried overloading in v3\n/**\n * Creates an array of unique values that are included in all given arrays using a `Eq` for equality\n * comparisons. The order and references of result values are determined by the first array.\n *\n * @example\n * import { intersection } from 'fp-ts/Array'\n * import { eqNumber } from 'fp-ts/Eq'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([1, 2], intersection(eqNumber)([2, 3])), [2])\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.intersection = RA.intersection;\n// TODO: remove non-curried overloading in v3\n/**\n * Creates an array of array values not included in the other given array using a `Eq` for equality\n * comparisons. The order and references of result values are determined by the first array.\n *\n * @example\n * import { difference } from 'fp-ts/Array'\n * import { eqNumber } from 'fp-ts/Eq'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([1, 2], difference(eqNumber)([2, 3])), [1])\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.difference = RA.difference;\n/**\n * Wrap a value into the type constructor.\n *\n * @category Applicative\n * @since 2.0.0\n */\nexports.of = RA.of;\n// -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\nvar map_ = RA.Monad.map;\nvar ap_ = RA.Monad.ap;\nvar chain_ = RA.Monad.chain;\nvar mapWithIndex_ = RA.FunctorWithIndex.mapWithIndex;\nvar filter_ = RA.Filterable.filter;\nvar filterMap_ = RA.Filterable.filterMap;\nvar partition_ = RA.Filterable.partition;\nvar partitionMap_ = RA.Filterable.partitionMap;\nvar filterWithIndex_ = RA.FilterableWithIndex\n    .filterWithIndex;\nvar filterMapWithIndex_ = RA.FilterableWithIndex\n    .filterMapWithIndex;\nvar partitionWithIndex_ = RA.FilterableWithIndex\n    .partitionWithIndex;\nvar partitionMapWithIndex_ = RA.FilterableWithIndex\n    .partitionMapWithIndex;\nvar reduce_ = RA.Foldable.reduce;\nvar foldMap_ = RA.Foldable.foldMap;\nvar reduceRight_ = RA.Foldable.reduceRight;\nvar traverse_ = RA.Traversable.traverse;\nvar alt_ = RA.Alternative.alt;\nvar reduceWithIndex_ = RA.FoldableWithIndex.reduceWithIndex;\nvar foldMapWithIndex_ = RA.FoldableWithIndex.foldMapWithIndex;\nvar reduceRightWithIndex_ = RA.FoldableWithIndex.reduceRightWithIndex;\nvar traverseWithIndex_ = RA.TraversableWithIndex\n    .traverseWithIndex;\nvar extend_ = RA.Extend.extend;\nvar wither_ = RA.Witherable.wither;\nvar wilt_ = RA.Witherable.wilt;\n// -------------------------------------------------------------------------------------\n// pipeables\n// -------------------------------------------------------------------------------------\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category Functor\n * @since 2.0.0\n */\nexports.map = RA.map;\n/**\n * Apply a function to an argument under a type constructor.\n *\n * @category Apply\n * @since 2.0.0\n */\nexports.ap = RA.ap;\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.apFirst = RA.apFirst;\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.apSecond = RA.apSecond;\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation.\n *\n * @category Monad\n * @since 2.0.0\n */\nexports.chain = RA.chain;\n/**\n * @since 2.7.0\n */\nexports.chainWithIndex = RA.chainWithIndex;\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * Derivable from `Monad`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.chainFirst = RA.chainFirst;\n/**\n * @category FunctorWithIndex\n * @since 2.0.0\n */\nexports.mapWithIndex = RA.mapWithIndex;\n/**\n * @category Compactable\n * @since 2.0.0\n */\nexports.compact = RA.compact;\n/**\n * @category Compactable\n * @since 2.0.0\n */\nexports.separate = RA.separate;\n/**\n * @category Filterable\n * @since 2.0.0\n */\nexports.filter = RA.filter;\n/**\n * @category Filterable\n * @since 2.0.0\n */\nexports.filterMap = RA.filterMap;\n/**\n * @category Filterable\n * @since 2.0.0\n */\nexports.partition = RA.partition;\n/**\n * @category FilterableWithIndex\n * @since 2.0.0\n */\nexports.partitionWithIndex = RA.partitionWithIndex;\n/**\n * @category Filterable\n * @since 2.0.0\n */\nexports.partitionMap = RA.partitionMap;\n/**\n * @category FilterableWithIndex\n * @since 2.0.0\n */\nexports.partitionMapWithIndex = RA.partitionMapWithIndex;\n/**\n * Less strict version of [`alt`](#alt).\n *\n * @category Alt\n * @since 2.9.0\n */\nexports.altW = RA.altW;\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * @category Alt\n * @since 2.0.0\n */\nexports.alt = RA.alt;\n/**\n * @category FilterableWithIndex\n * @since 2.0.0\n */\nexports.filterMapWithIndex = RA.filterMapWithIndex;\n/**\n * @category FilterableWithIndex\n * @since 2.0.0\n */\nexports.filterWithIndex = RA.filterWithIndex;\n/**\n * @category Extend\n * @since 2.0.0\n */\nexports.extend = RA.extend;\n/**\n * Derivable from `Extend`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.duplicate = RA.duplicate;\n/**\n * @category Foldable\n * @since 2.0.0\n */\nexports.foldMap = RA.foldMap;\n/**\n * @category FoldableWithIndex\n * @since 2.0.0\n */\nexports.foldMapWithIndex = RA.foldMapWithIndex;\n/**\n * @category Foldable\n * @since 2.0.0\n */\nexports.reduce = RA.reduce;\n/**\n * @category FoldableWithIndex\n * @since 2.0.0\n */\nexports.reduceWithIndex = RA.reduceWithIndex;\n/**\n * @category Foldable\n * @since 2.0.0\n */\nexports.reduceRight = RA.reduceRight;\n/**\n * @category FoldableWithIndex\n * @since 2.0.0\n */\nexports.reduceRightWithIndex = RA.reduceRightWithIndex;\n/**\n * **for optimized and stack safe version check the data types `traverseArray` function**\n * @category Traversable\n * @since 2.6.3\n */\nexports.traverse = RA.traverse;\n/**\n * **for optimized and stack safe version check the data types `sequenceArray` function**\n * @category Traversable\n * @since 2.6.3\n */\nexports.sequence = RA.sequence;\n/**\n * **for optimized and stack safe version check the data types `traverseArrayWithIndex` function**\n * @category TraversableWithIndex\n * @since 2.6.3\n */\nexports.traverseWithIndex = RA.traverseWithIndex;\n/**\n * @category Witherable\n * @since 2.6.5\n */\nexports.wither = RA.wither;\n/**\n * @category Witherable\n * @since 2.6.5\n */\nexports.wilt = RA.wilt;\n/**\n * @category Unfoldable\n * @since 2.6.6\n */\nexports.unfold = RA.unfold;\n/**\n * @category Alternative\n * @since 2.7.0\n */\nexports.zero = RA.Alternative.zero;\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.0.0\n */\nexports.URI = 'Array';\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Functor = {\n    URI: exports.URI,\n    map: map_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.FunctorWithIndex = {\n    URI: exports.URI,\n    map: map_,\n    mapWithIndex: mapWithIndex_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Applicative = {\n    URI: exports.URI,\n    map: map_,\n    ap: ap_,\n    of: exports.of\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Monad = {\n    URI: exports.URI,\n    map: map_,\n    ap: ap_,\n    of: exports.of,\n    chain: chain_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Unfoldable = {\n    URI: exports.URI,\n    unfold: exports.unfold\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Alt = {\n    URI: exports.URI,\n    map: map_,\n    alt: alt_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Alternative = {\n    URI: exports.URI,\n    map: map_,\n    ap: ap_,\n    of: exports.of,\n    alt: alt_,\n    zero: exports.zero\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Extend = {\n    URI: exports.URI,\n    map: map_,\n    extend: extend_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Compactable = {\n    URI: exports.URI,\n    compact: exports.compact,\n    separate: exports.separate\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Filterable = {\n    URI: exports.URI,\n    map: map_,\n    compact: exports.compact,\n    separate: exports.separate,\n    filter: filter_,\n    filterMap: filterMap_,\n    partition: partition_,\n    partitionMap: partitionMap_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.FilterableWithIndex = {\n    URI: exports.URI,\n    map: map_,\n    mapWithIndex: mapWithIndex_,\n    compact: exports.compact,\n    separate: exports.separate,\n    filter: filter_,\n    filterMap: filterMap_,\n    partition: partition_,\n    partitionMap: partitionMap_,\n    partitionMapWithIndex: partitionMapWithIndex_,\n    partitionWithIndex: partitionWithIndex_,\n    filterMapWithIndex: filterMapWithIndex_,\n    filterWithIndex: filterWithIndex_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Foldable = {\n    URI: exports.URI,\n    reduce: reduce_,\n    foldMap: foldMap_,\n    reduceRight: reduceRight_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.FoldableWithIndex = {\n    URI: exports.URI,\n    reduce: reduce_,\n    foldMap: foldMap_,\n    reduceRight: reduceRight_,\n    reduceWithIndex: reduceWithIndex_,\n    foldMapWithIndex: foldMapWithIndex_,\n    reduceRightWithIndex: reduceRightWithIndex_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Traversable = {\n    URI: exports.URI,\n    map: map_,\n    reduce: reduce_,\n    foldMap: foldMap_,\n    reduceRight: reduceRight_,\n    traverse: traverse_,\n    sequence: exports.sequence\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.TraversableWithIndex = {\n    URI: exports.URI,\n    map: map_,\n    mapWithIndex: mapWithIndex_,\n    reduce: reduce_,\n    foldMap: foldMap_,\n    reduceRight: reduceRight_,\n    reduceWithIndex: reduceWithIndex_,\n    foldMapWithIndex: foldMapWithIndex_,\n    reduceRightWithIndex: reduceRightWithIndex_,\n    traverse: traverse_,\n    sequence: exports.sequence,\n    traverseWithIndex: traverseWithIndex_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Witherable = {\n    URI: exports.URI,\n    map: map_,\n    compact: exports.compact,\n    separate: exports.separate,\n    filter: filter_,\n    filterMap: filterMap_,\n    partition: partition_,\n    partitionMap: partitionMap_,\n    reduce: reduce_,\n    foldMap: foldMap_,\n    reduceRight: reduceRight_,\n    traverse: traverse_,\n    sequence: exports.sequence,\n    wither: wither_,\n    wilt: wilt_\n};\n// TODO: remove in v3\n/**\n * @category instances\n * @since 2.0.0\n */\nexports.array = {\n    URI: exports.URI,\n    compact: exports.compact,\n    separate: exports.separate,\n    map: map_,\n    ap: ap_,\n    of: exports.of,\n    chain: chain_,\n    filter: filter_,\n    filterMap: filterMap_,\n    partition: partition_,\n    partitionMap: partitionMap_,\n    mapWithIndex: mapWithIndex_,\n    partitionMapWithIndex: partitionMapWithIndex_,\n    partitionWithIndex: partitionWithIndex_,\n    filterMapWithIndex: filterMapWithIndex_,\n    filterWithIndex: filterWithIndex_,\n    alt: alt_,\n    zero: exports.zero,\n    unfold: exports.unfold,\n    reduce: reduce_,\n    foldMap: foldMap_,\n    reduceRight: reduceRight_,\n    traverse: traverse_,\n    sequence: exports.sequence,\n    reduceWithIndex: reduceWithIndex_,\n    foldMapWithIndex: foldMapWithIndex_,\n    reduceRightWithIndex: reduceRightWithIndex_,\n    traverseWithIndex: traverseWithIndex_,\n    extend: extend_,\n    wither: wither_,\n    wilt: wilt_\n};\n// -------------------------------------------------------------------------------------\n// unsafe\n// -------------------------------------------------------------------------------------\n/**\n * @category unsafe\n * @since 2.0.0\n */\nexports.unsafeInsertAt = RA.unsafeInsertAt;\n/**\n * @category unsafe\n * @since 2.0.0\n */\nexports.unsafeUpdateAt = RA.unsafeUpdateAt;\n/**\n * @category unsafe\n * @since 2.0.0\n */\nexports.unsafeDeleteAt = RA.unsafeDeleteAt;\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * An empty array\n *\n * @since 2.0.0\n */\nexports.empty = [];\n/**\n * @since 2.9.0\n */\nexports.every = RA.every;\n/**\n * @since 2.9.0\n */\nexports.some = RA.some;\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.9.0\n */\nexports.Do = \n/*#__PURE__*/\nexports.of({});\n/**\n * @since 2.8.0\n */\nexports.bindTo = RA.bindTo;\n/**\n * @since 2.8.0\n */\nexports.bind = RA.bind;\n// -------------------------------------------------------------------------------------\n// pipeable sequence S\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.8.0\n */\nexports.apS = RA.apS;\n"],"mappings":"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gD,KAAR,GAAgB6E,EAAE,CAAC7E,KAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAhD,OAAO,CAAC+C,MAAR,GAAiB8E,EAAE,CAAC9E,MAApB,C,CACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA/C,OAAO,CAAC8C,MAAR,GAAiB+E,EAAE,CAAC/E,MAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA9C,OAAO,CAAC6C,KAAR,GAAgBgF,EAAE,CAAChF,KAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA7C,OAAO,CAAC4C,SAAR,GAAoBiF,EAAE,CAACjF,SAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA5C,OAAO,CAAC2C,OAAR,GAAkBkF,EAAE,CAAClF,OAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA3C,OAAO,CAAC0C,QAAR,GAAmBmF,EAAE,CAACnF,QAAtB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA1C,OAAO,CAACyC,SAAR,GAAoBoF,EAAE,CAACpF,SAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAzC,OAAO,CAACwC,QAAR,GAAmBqF,EAAE,CAACrF,QAAtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAxC,OAAO,CAACuC,SAAR,GAAoBsF,EAAE,CAACtF,SAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAvC,OAAO,CAACsC,OAAR,GAAkBuF,EAAE,CAACvF,OAArB;AACA;AACA;AACA;AACA;AACA;AACA;;AACAtC,OAAO,CAACqC,UAAR,GAAqBwF,EAAE,CAACxF,UAAxB;AACA;AACA;AACA;AACA;AACA;;AACArC,OAAO,CAACoC,YAAR,GAAuByF,EAAE,CAACzF,YAA1B,C,CACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACApC,OAAO,CAACmC,MAAR,GAAiB0F,EAAE,CAAC1F,MAApB,C,CACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAnC,OAAO,CAACkC,IAAR,GAAe2F,EAAE,CAAC3F,IAAlB,C,CACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAlC,OAAO,CAACiC,IAAR,GAAe4F,EAAE,CAAC5F,IAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAjC,OAAO,CAACgC,IAAR,GAAe6F,EAAE,CAAC7F,IAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAhC,OAAO,CAAC+B,IAAR,GAAe8F,EAAE,CAAC9F,IAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA/B,OAAO,CAAC8B,IAAR,GAAe+F,EAAE,CAAC/F,IAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA9B,OAAO,CAAC6B,IAAR,GAAegG,EAAE,CAAChG,IAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA7B,OAAO,CAAC4B,QAAR,GAAmBiG,EAAE,CAACjG,QAAtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA5B,OAAO,CAAC2B,SAAR,GAAoBkG,EAAE,CAAClG,SAAvB;;AACA,SAASD,aAAT,CAAuBqG,SAAvB,EAAkC;EAC9B,OAAOF,EAAE,CAACnG,aAAH,CAAiBqG,SAAjB,CAAP;AACH;;AACD/H,OAAO,CAAC0B,aAAR,GAAwBA,aAAxB;;AACA,SAASD,QAAT,CAAkBsG,SAAlB,EAA6B;EACzB,OAAOF,EAAE,CAACpG,QAAH,CAAYsG,SAAZ,CAAP;AACH;;AACD/H,OAAO,CAACyB,QAAR,GAAmBA,QAAnB;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAzB,OAAO,CAACwB,QAAR,GAAmBqG,EAAE,CAACrG,QAAtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAxB,OAAO,CAACuB,SAAR,GAAoBsG,EAAE,CAACtG,SAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAvB,OAAO,CAACsB,aAAR,GAAwBuG,EAAE,CAACvG,aAA3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAtB,OAAO,CAACqB,SAAR,GAAoBwG,EAAE,CAACxG,SAAvB;;AACA,SAASD,SAAT,CAAmB2G,SAAnB,EAA8B;EAC1B,OAAOF,EAAE,CAACzG,SAAH,CAAa2G,SAAb,CAAP;AACH;;AACD/H,OAAO,CAACoB,SAAR,GAAoBA,SAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACApB,OAAO,CAACmB,YAAR,GAAuB0G,EAAE,CAAC1G,YAA1B;;AACA,SAASD,QAAT,CAAkB6G,SAAlB,EAA6B;EACzB,OAAOF,EAAE,CAAC3G,QAAH,CAAY6G,SAAZ,CAAP;AACH;;AACD/H,OAAO,CAACkB,QAAR,GAAmBA,QAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAlB,OAAO,CAACiB,WAAR,GAAsB4G,EAAE,CAAC5G,WAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAjB,OAAO,CAACgB,aAAR,GAAwB6G,EAAE,CAAC7G,aAA3B;AACA;AACA;AACA;AACA;;AACAhB,OAAO,CAACe,IAAR,GAAe8G,EAAE,CAACG,OAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAhI,OAAO,CAACc,QAAR,GAAmB+G,EAAE,CAAC/G,QAAtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAd,OAAO,CAACa,QAAR,GAAmBgH,EAAE,CAAChH,QAAtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAb,OAAO,CAACY,QAAR,GAAmBiH,EAAE,CAACjH,QAAtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAZ,OAAO,CAACW,QAAR,GAAmBkH,EAAE,CAAClH,QAAtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAX,OAAO,CAACU,OAAR,GAAkBmH,EAAE,CAACnH,OAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAV,OAAO,CAACS,MAAR,GAAiBoH,EAAE,CAACpH,MAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAT,OAAO,CAACQ,KAAR,GAAgBqH,EAAE,CAACrH,KAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAR,OAAO,CAACO,IAAR,GAAesH,EAAE,CAACtH,IAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAP,OAAO,CAACM,OAAR,GAAkBuH,EAAE,CAACvH,OAArB,C,CACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAN,OAAO,CAACK,GAAR,GAAcwH,EAAE,CAACxH,GAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAL,OAAO,CAACI,KAAR,GAAgByH,EAAE,CAACzH,KAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAJ,OAAO,CAACG,YAAR,GAAuB0H,EAAE,CAAC1H,YAA1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAH,OAAO,CAACE,WAAR,GAAsB2H,EAAE,CAAC3H,WAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAF,OAAO,CAACC,MAAR,GAAiB4H,EAAE,CAAC5H,MAApB,C,CACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAD,OAAO,CAACoG,IAAR,GAAeyB,EAAE,CAACzB,IAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACApG,OAAO,CAACmG,IAAR,GAAe0B,EAAE,CAAC1B,IAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAnG,OAAO,CAACkG,MAAR,GAAiB2B,EAAE,CAAC3B,MAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAlG,OAAO,CAACiG,IAAR,GAAe4B,EAAE,CAAC5B,IAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAjG,OAAO,CAACgG,OAAR,GAAkB6B,EAAE,CAAC7B,OAArB;AACA;AACA;AACA;AACA;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xF,OAAO,CAACuF,OAAR,GAAkBsC,EAAE,CAACtC,OAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAvF,OAAO,CAACsF,QAAR,GAAmBuC,EAAE,CAACvC,QAAtB;AACA;AACA;AACA;AACA;AACA;AACA;;AACAtF,OAAO,CAACqF,KAAR,GAAgBwC,EAAE,CAACxC,KAAnB;AACA;AACA;AACA;;AACArF,OAAO,CAACoF,cAAR,GAAyByC,EAAE,CAACzC,cAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACApF,OAAO,CAACmF,UAAR,GAAqB0C,EAAE,CAAC1C,UAAxB;AACA;AACA;AACA;AACA;;AACAnF,OAAO,CAACkF,YAAR,GAAuB2C,EAAE,CAAC3C,YAA1B;AACA;AACA;AACA;AACA;;AACAlF,OAAO,CAACiF,OAAR,GAAkB4C,EAAE,CAAC5C,OAArB;AACA;AACA;AACA;AACA;;AACAjF,OAAO,CAACgF,QAAR,GAAmB6C,EAAE,CAAC7C,QAAtB;AACA;AACA;AACA;AACA;;AACAhF,OAAO,CAAC+E,MAAR,GAAiB8C,EAAE,CAAC9C,MAApB;AACA;AACA;AACA;AACA;;AACA/E,OAAO,CAAC8E,SAAR,GAAoB+C,EAAE,CAAC/C,SAAvB;AACA;AACA;AACA;AACA;;AACA9E,OAAO,CAAC6E,SAAR,GAAoBgD,EAAE,CAAChD,SAAvB;AACA;AACA;AACA;AACA;;AACA7E,OAAO,CAAC4E,kBAAR,GAA6BiD,EAAE,CAACjD,kBAAhC;AACA;AACA;AACA;AACA;;AACA5E,OAAO,CAAC2E,YAAR,GAAuBkD,EAAE,CAAClD,YAA1B;AACA;AACA;AACA;AACA;;AACA3E,OAAO,CAAC0E,qBAAR,GAAgCmD,EAAE,CAACnD,qBAAnC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA1E,OAAO,CAACyE,IAAR,GAAeoD,EAAE,CAACpD,IAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAzE,OAAO,CAACwE,GAAR,GAAcqD,EAAE,CAACrD,GAAjB;AACA;AACA;AACA;AACA;;AACAxE,OAAO,CAACuE,kBAAR,GAA6BsD,EAAE,CAACtD,kBAAhC;AACA;AACA;AACA;AACA;;AACAvE,OAAO,CAACsE,eAAR,GAA0BuD,EAAE,CAACvD,eAA7B;AACA;AACA;AACA;AACA;;AACAtE,OAAO,CAACqE,MAAR,GAAiBwD,EAAE,CAACxD,MAApB;AACA;AACA;AACA;AACA;AACA;AACA;;AACArE,OAAO,CAACoE,SAAR,GAAoByD,EAAE,CAACzD,SAAvB;AACA;AACA;AACA;AACA;;AACApE,OAAO,CAACmE,OAAR,GAAkB0D,EAAE,CAAC1D,OAArB;AACA;AACA;AACA;AACA;;AACAnE,OAAO,CAACkE,gBAAR,GAA2B2D,EAAE,CAAC3D,gBAA9B;AACA;AACA;AACA;AACA;;AACAlE,OAAO,CAACiE,MAAR,GAAiB4D,EAAE,CAAC5D,MAApB;AACA;AACA;AACA;AACA;;AACAjE,OAAO,CAACgE,eAAR,GAA0B6D,EAAE,CAAC7D,eAA7B;AACA;AACA;AACA;AACA;;AACAhE,OAAO,CAAC+D,WAAR,GAAsB8D,EAAE,CAAC9D,WAAzB;AACA;AACA;AACA;AACA;;AACA/D,OAAO,CAAC8D,oBAAR,GAA+B+D,EAAE,CAAC/D,oBAAlC;AACA;AACA;AACA;AACA;AACA;;AACA9D,OAAO,CAAC6D,QAAR,GAAmBgE,EAAE,CAAChE,QAAtB;AACA;AACA;AACA;AACA;AACA;;AACA7D,OAAO,CAAC4D,QAAR,GAAmBiE,EAAE,CAACjE,QAAtB;AACA;AACA;AACA;AACA;AACA;;AACA5D,OAAO,CAAC2D,iBAAR,GAA4BkE,EAAE,CAAClE,iBAA/B;AACA;AACA;AACA;AACA;;AACA3D,OAAO,CAAC0D,MAAR,GAAiBmE,EAAE,CAACnE,MAApB;AACA;AACA;AACA;AACA;;AACA1D,OAAO,CAACyD,IAAR,GAAeoE,EAAE,CAACpE,IAAlB;AACA;AACA;AACA;AACA;;AACAzD,OAAO,CAACwD,MAAR,GAAiBqE,EAAE,CAACrE,MAApB;AACA;AACA;AACA;AACA;;AACAxD,OAAO,CAACuD,IAAR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;AACA;AACA;;AACA3J,OAAO,CAAC8G,cAAR,GAAyBe,EAAE,CAACf,cAA5B;AACA;AACA;AACA;AACA;;AACA9G,OAAO,CAAC6G,cAAR,GAAyBgB,EAAE,CAAChB,cAA5B;AACA;AACA;AACA;AACA;;AACA7G,OAAO,CAAC4G,cAAR,GAAyBiB,EAAE,CAACjB,cAA5B,C,CACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA5G,OAAO,CAAC2G,KAAR,GAAgB,EAAhB;AACA;AACA;AACA;;AACA3G,OAAO,CAAC0G,KAAR,GAAgBmB,EAAE,CAACnB,KAAnB;AACA;AACA;AACA;;AACA1G,OAAO,CAACyG,IAAR,GAAeoB,EAAE,CAACpB,IAAlB,C,CACA;AACA;AACA;;AACA;AACA;AACA;;AACAzG,OAAO,CAACwG,EAAR,GACA,aACAxG,OAAO,CAAC0F,EAAR,CAAW,EAAX,CAFA;AAGA;AACA;AACA;;AACA1F,OAAO,CAACuG,MAAR,GAAiBsB,EAAE,CAACtB,MAApB;AACA;AACA;AACA;;AACAvG,OAAO,CAACsG,IAAR,GAAeuB,EAAE,CAACvB,IAAlB,C,CACA;AACA;AACA;;AACA;AACA;AACA;;AACAtG,OAAO,CAACqG,GAAR,GAAcwB,EAAE,CAACxB,GAAjB"},"metadata":{},"sourceType":"script"}