{"ast":null,"code":"\"use strict\";\n\nimport { ethers } from \"ethers\";\nimport scrypt from \"scrypt-js\";\nimport { version } from \"./_version\";\nconst logger = new ethers.utils.Logger(version);\nlet warned = false;\nexport class BrainWallet extends ethers.Wallet {\n  static _generate(username, password, legacy, progressCallback) {\n    if (!warned) {\n      logger.warn(\"Warning: using Brain Wallets should be considered insecure (this warning will not be repeated)\");\n      warned = true;\n    }\n\n    let usernameBytes = null;\n    let passwordBytes = null;\n\n    if (typeof username === 'string') {\n      logger.checkNormalize();\n      usernameBytes = ethers.utils.toUtf8Bytes(username.normalize('NFKC'));\n    } else {\n      usernameBytes = ethers.utils.arrayify(username);\n    }\n\n    if (typeof password === 'string') {\n      logger.checkNormalize();\n      passwordBytes = ethers.utils.toUtf8Bytes(password.normalize('NFKC'));\n    } else {\n      passwordBytes = ethers.utils.arrayify(password);\n    }\n\n    return scrypt.scrypt(passwordBytes, usernameBytes, 1 << 18, 8, 1, 32, progressCallback).then(key => {\n      if (legacy) {\n        return new BrainWallet(key);\n      }\n\n      const mnemonic = ethers.utils.entropyToMnemonic(ethers.utils.arrayify(key).slice(0, 16));\n      return new BrainWallet(ethers.Wallet.fromMnemonic(mnemonic));\n    });\n  }\n\n  static generate(username, password, progressCallback) {\n    return BrainWallet._generate(username, password, false, progressCallback);\n  }\n\n  static generateLegacy(username, password, progressCallback) {\n    return BrainWallet._generate(username, password, true, progressCallback);\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;AAEA,SAASA,MAAT,QAAuB,QAAvB;AAEA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,SAASC,OAAT,QAAwB,YAAxB;AAEA,MAAMC,MAAM,GAAG,IAAIH,MAAM,CAACI,KAAP,CAAaC,MAAjB,CAAwBH,OAAxB,CAAf;AAEA,IAAII,MAAM,GAAG,KAAb;AAEA,OAAM,MAAOC,WAAP,SAA2BP,MAAM,CAACQ,MAAlC,CAAwC;EAE1B,OAATC,SAAS,CAACC,QAAD,EAAkCC,QAAlC,EAAmEC,MAAnE,EAAoFC,gBAApF,EAAoI;IAChJ,IAAI,CAACP,MAAL,EAAa;MACTH,MAAM,CAACW,IAAP,CAAY,gGAAZ;MACAR,MAAM,GAAG,IAAT;IACH;;IACD,IAAIS,aAAa,GAAe,IAAhC;IACA,IAAIC,aAAa,GAAe,IAAhC;;IAEA,IAAI,OAAON,QAAP,KAAqB,QAAzB,EAAmC;MAC/BP,MAAM,CAACc,cAAP;MACAF,aAAa,GAAGf,MAAM,CAACI,KAAP,CAAac,WAAb,CAAyBR,QAAQ,CAACS,SAAT,CAAmB,MAAnB,CAAzB,CAAhB;IACH,CAHD,MAGO;MACHJ,aAAa,GAAGf,MAAM,CAACI,KAAP,CAAagB,QAAb,CAAsBV,QAAtB,CAAhB;IACH;;IAED,IAAI,OAAOC,QAAP,KAAqB,QAAzB,EAAmC;MAC/BR,MAAM,CAACc,cAAP;MACAD,aAAa,GAAGhB,MAAM,CAACI,KAAP,CAAac,WAAb,CAAyBP,QAAQ,CAACQ,SAAT,CAAmB,MAAnB,CAAzB,CAAhB;IACH,CAHD,MAGO;MACHH,aAAa,GAAGhB,MAAM,CAACI,KAAP,CAAagB,QAAb,CAAsBT,QAAtB,CAAhB;IACH;;IAED,OAAOV,MAAM,CAACA,MAAP,CAAce,aAAd,EAA6BD,aAA7B,EAA6C,KAAK,EAAlD,EAAuD,CAAvD,EAA0D,CAA1D,EAA6D,EAA7D,EAAiEF,gBAAjE,EAAmFQ,IAAnF,CAAyFC,GAAD,IAAoB;MAC/G,IAAIV,MAAJ,EAAY;QACR,OAAO,IAAIL,WAAJ,CAAgBe,GAAhB,CAAP;MAEH;;MACD,MAAMC,QAAQ,GAAGvB,MAAM,CAACI,KAAP,CAAaoB,iBAAb,CAA+BxB,MAAM,CAACI,KAAP,CAAagB,QAAb,CAAsBE,GAAtB,EAA2BG,KAA3B,CAAiC,CAAjC,EAAoC,EAApC,CAA/B,CAAjB;MACA,OAAO,IAAIlB,WAAJ,CAAgBP,MAAM,CAACQ,MAAP,CAAckB,YAAd,CAA2BH,QAA3B,CAAhB,CAAP;IACH,CAPM,CAAP;EAQH;;EAEc,OAARI,QAAQ,CAACjB,QAAD,EAAkCC,QAAlC,EAAmEE,gBAAnE,EAAmH;IAC9H,OAAON,WAAW,CAACE,SAAZ,CAAsBC,QAAtB,EAAgCC,QAAhC,EAA0C,KAA1C,EAAiDE,gBAAjD,CAAP;EACH;;EAEoB,OAAde,cAAc,CAAClB,QAAD,EAAkCC,QAAlC,EAAmEE,gBAAnE,EAAmH;IACpI,OAAON,WAAW,CAACE,SAAZ,CAAsBC,QAAtB,EAAgCC,QAAhC,EAA0C,IAA1C,EAAgDE,gBAAhD,CAAP;EACH;;AAxCyC","names":["ethers","scrypt","version","logger","utils","Logger","warned","BrainWallet","Wallet","_generate","username","password","legacy","progressCallback","warn","usernameBytes","passwordBytes","checkNormalize","toUtf8Bytes","normalize","arrayify","then","key","mnemonic","entropyToMnemonic","slice","fromMnemonic","generate","generateLegacy"],"sourceRoot":"","sources":["../src.ts/brain-wallet.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}