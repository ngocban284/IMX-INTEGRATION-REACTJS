{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getWitherable = exports.getFilterable = exports.getApplyMonoid = exports.getApplySemigroup = exports.getSemigroup = exports.getEq = exports.getShow = exports.URI = exports.throwError = exports.sequence = exports.traverse = exports.reduceRight = exports.foldMap = exports.reduce = exports.duplicate = exports.extend = exports.alt = exports.altW = exports.flatten = exports.chainFirst = exports.chainFirstW = exports.chain = exports.chainW = exports.of = exports.apSecond = exports.apFirst = exports.ap = exports.apW = exports.mapLeft = exports.bimap = exports.map = exports.filterOrElse = exports.filterOrElseW = exports.orElse = exports.swap = exports.chainNullableK = exports.fromNullableK = exports.getOrElse = exports.getOrElseW = exports.fold = exports.fromPredicate = exports.fromOption = exports.stringifyJSON = exports.parseJSON = exports.tryCatch = exports.fromNullable = exports.right = exports.left = exports.isRight = exports.isLeft = void 0;\nexports.sequenceArray = exports.traverseArray = exports.traverseArrayWithIndex = exports.apS = exports.apSW = exports.bind = exports.bindW = exports.bindTo = exports.Do = exports.exists = exports.elem = exports.toError = exports.either = exports.getValidationMonoid = exports.MonadThrow = exports.ChainRec = exports.Extend = exports.Alt = exports.Bifunctor = exports.Traversable = exports.Foldable = exports.Monad = exports.Applicative = exports.Functor = exports.getValidationSemigroup = exports.getValidation = exports.getAltValidation = exports.getApplicativeValidation = void 0;\n\nvar ChainRec_1 = require(\"./ChainRec\");\n\nvar function_1 = require(\"./function\"); // -------------------------------------------------------------------------------------\n// guards\n// -------------------------------------------------------------------------------------\n\n/**\n * Returns `true` if the either is an instance of `Left`, `false` otherwise.\n *\n * @category guards\n * @since 2.0.0\n */\n\n\nvar isLeft = function (ma) {\n  return ma._tag === 'Left';\n};\n\nexports.isLeft = isLeft;\n/**\n * Returns `true` if the either is an instance of `Right`, `false` otherwise.\n *\n * @category guards\n * @since 2.0.0\n */\n\nvar isRight = function (ma) {\n  return ma._tag === 'Right';\n};\n\nexports.isRight = isRight; // -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n\n/**\n * Constructs a new `Either` holding a `Left` value. This usually represents a failure, due to the right-bias of this\n * structure.\n *\n * @category constructors\n * @since 2.0.0\n */\n\nvar left = function (e) {\n  return {\n    _tag: 'Left',\n    left: e\n  };\n};\n\nexports.left = left;\n/**\n * Constructs a new `Either` holding a `Right` value. This usually represents a successful value due to the right bias\n * of this structure.\n *\n * @category constructors\n * @since 2.0.0\n */\n\nvar right = function (a) {\n  return {\n    _tag: 'Right',\n    right: a\n  };\n};\n\nexports.right = right; // TODO: make lazy in v3\n\n/**\n * Takes a default and a nullable value, if the value is not nully, turn it into a `Right`, if the value is nully use\n * the provided default as a `Left`.\n *\n * @example\n * import { fromNullable, left, right } from 'fp-ts/Either'\n *\n * const parse = fromNullable('nully')\n *\n * assert.deepStrictEqual(parse(1), right(1))\n * assert.deepStrictEqual(parse(null), left('nully'))\n *\n * @category constructors\n * @since 2.0.0\n */\n\nfunction fromNullable(e) {\n  return function (a) {\n    return a == null ? exports.left(e) : exports.right(a);\n  };\n}\n\nexports.fromNullable = fromNullable; // TODO: `onError => Lazy<A> => Either` in v3\n\n/**\n * Constructs a new `Either` from a function that might throw.\n *\n * @example\n * import { Either, left, right, tryCatch } from 'fp-ts/Either'\n *\n * const unsafeHead = <A>(as: Array<A>): A => {\n *   if (as.length > 0) {\n *     return as[0]\n *   } else {\n *     throw new Error('empty array')\n *   }\n * }\n *\n * const head = <A>(as: Array<A>): Either<Error, A> => {\n *   return tryCatch(() => unsafeHead(as), e => (e instanceof Error ? e : new Error('unknown error')))\n * }\n *\n * assert.deepStrictEqual(head([]), left(new Error('empty array')))\n * assert.deepStrictEqual(head([1, 2, 3]), right(1))\n *\n * @category constructors\n * @since 2.0.0\n */\n\nfunction tryCatch(f, onError) {\n  try {\n    return exports.right(f());\n  } catch (e) {\n    return exports.left(onError(e));\n  }\n}\n\nexports.tryCatch = tryCatch; // TODO curry in v3\n\n/**\n * Converts a JavaScript Object Notation (JSON) string into an object.\n *\n * @example\n * import { parseJSON, toError, right, left } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(parseJSON('{\"a\":1}', toError), right({ a: 1 }))\n * assert.deepStrictEqual(parseJSON('{\"a\":}', toError), left(new SyntaxError('Unexpected token } in JSON at position 5')))\n *\n * @category constructors\n * @since 2.0.0\n */\n\nfunction parseJSON(s, onError) {\n  return tryCatch(function () {\n    return JSON.parse(s);\n  }, onError);\n}\n\nexports.parseJSON = parseJSON; // TODO curry in v3\n\n/**\n * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n *\n * @example\n * import * as E from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(E.stringifyJSON({ a: 1 }, E.toError), E.right('{\"a\":1}'))\n * const circular: any = { ref: null }\n * circular.ref = circular\n * assert.deepStrictEqual(\n *   pipe(\n *     E.stringifyJSON(circular, E.toError),\n *     E.mapLeft(e => e.message.includes('Converting circular structure to JSON'))\n *   ),\n *   E.left(true)\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\n\nfunction stringifyJSON(u, onError) {\n  return tryCatch(function () {\n    return JSON.stringify(u);\n  }, onError);\n}\n\nexports.stringifyJSON = stringifyJSON;\n/**\n * Derivable from `MonadThrow`.\n *\n * @example\n * import { fromOption, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import { none, some } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     some(1),\n *     fromOption(() => 'error')\n *   ),\n *   right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     none,\n *     fromOption(() => 'error')\n *   ),\n *   left('error')\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\n\nvar fromOption = function (onNone) {\n  return function (ma) {\n    return ma._tag === 'None' ? exports.left(onNone()) : exports.right(ma.value);\n  };\n};\n\nexports.fromOption = fromOption;\n/**\n * Derivable from `MonadThrow`.\n *\n * @example\n * import { fromPredicate, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     1,\n *     fromPredicate(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     -1,\n *     fromPredicate(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   left('error')\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\n\nvar fromPredicate = function (predicate, onFalse) {\n  return function (a) {\n    return predicate(a) ? exports.right(a) : exports.left(onFalse(a));\n  };\n};\n\nexports.fromPredicate = fromPredicate; // -------------------------------------------------------------------------------------\n// destructors\n// -------------------------------------------------------------------------------------\n\n/**\n * Takes two functions and an `Either` value, if the value is a `Left` the inner value is applied to the first function,\n * if the value is a `Right` the inner value is applied to the second function.\n *\n * @example\n * import { fold, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * function onLeft(errors: Array<string>): string {\n *   return `Errors: ${errors.join(', ')}`\n * }\n *\n * function onRight(value: number): string {\n *   return `Ok: ${value}`\n * }\n *\n * assert.strictEqual(\n *   pipe(\n *     right(1),\n *     fold(onLeft, onRight)\n *   ),\n *   'Ok: 1'\n * )\n * assert.strictEqual(\n *   pipe(\n *     left(['error 1', 'error 2']),\n *     fold(onLeft, onRight)\n *   ),\n *   'Errors: error 1, error 2'\n * )\n *\n * @category destructors\n * @since 2.0.0\n */\n\nfunction fold(onLeft, onRight) {\n  return function (ma) {\n    return exports.isLeft(ma) ? onLeft(ma.left) : onRight(ma.right);\n  };\n}\n\nexports.fold = fold;\n/**\n * Less strict version of [`getOrElse`](#getOrElse).\n *\n * @category destructors\n * @since 2.6.0\n */\n\nvar getOrElseW = function (onLeft) {\n  return function (ma) {\n    return exports.isLeft(ma) ? onLeft(ma.left) : ma.right;\n  };\n};\n\nexports.getOrElseW = getOrElseW;\n/**\n * Returns the wrapped value if it's a `Right` or a default value if is a `Left`.\n *\n * @example\n * import { getOrElse, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     right(1),\n *     getOrElse(() => 0)\n *   ),\n *   1\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     left('error'),\n *     getOrElse(() => 0)\n *   ),\n *   0\n * )\n *\n * @category destructors\n * @since 2.0.0\n */\n\nexports.getOrElse = exports.getOrElseW; // -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n\n/**\n * @category combinators\n * @since 2.9.0\n */\n\nfunction fromNullableK(e) {\n  var from = fromNullable(e);\n  return function (f) {\n    return function () {\n      var a = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        a[_i] = arguments[_i];\n      }\n\n      return from(f.apply(void 0, a));\n    };\n  };\n}\n\nexports.fromNullableK = fromNullableK;\n/**\n * @category combinators\n * @since 2.9.0\n */\n\nfunction chainNullableK(e) {\n  var from = fromNullableK(e);\n  return function (f) {\n    return exports.chain(from(f));\n  };\n}\n\nexports.chainNullableK = chainNullableK;\n/**\n * Returns a `Right` if is a `Left` (and vice versa).\n *\n * @category combinators\n * @since 2.0.0\n */\n\nfunction swap(ma) {\n  return exports.isLeft(ma) ? exports.right(ma.left) : exports.left(ma.right);\n}\n\nexports.swap = swap;\n/**\n * Useful for recovering from errors.\n *\n * @category combinators\n * @since 2.0.0\n */\n\nfunction orElse(onLeft) {\n  return function (ma) {\n    return exports.isLeft(ma) ? onLeft(ma.left) : ma;\n  };\n}\n\nexports.orElse = orElse;\n/**\n * Less strict version of [`filterOrElse`](#filterOrElse).\n *\n * @since 2.9.0\n */\n\nvar filterOrElseW = function (predicate, onFalse) {\n  return exports.chainW(function (a) {\n    return predicate(a) ? exports.right(a) : exports.left(onFalse(a));\n  });\n};\n\nexports.filterOrElseW = filterOrElseW;\n/**\n * Derivable from `MonadThrow`.\n *\n * @example\n * import { filterOrElse, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     right(1),\n *     filterOrElse(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     right(-1),\n *     filterOrElse(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   left('error')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     left('a'),\n *     filterOrElse(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   left('a')\n * )\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexports.filterOrElse = exports.filterOrElseW; // -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\n\nvar map_ = function (fa, f) {\n  return function_1.pipe(fa, exports.map(f));\n};\n\nvar ap_ = function (fab, fa) {\n  return function_1.pipe(fab, exports.ap(fa));\n};\n/* istanbul ignore next */\n\n\nvar chain_ = function (ma, f) {\n  return function_1.pipe(ma, exports.chain(f));\n};\n/* istanbul ignore next */\n\n\nvar reduce_ = function (fa, b, f) {\n  return function_1.pipe(fa, exports.reduce(b, f));\n};\n/* istanbul ignore next */\n\n\nvar foldMap_ = function (M) {\n  return function (fa, f) {\n    var foldMapM = exports.foldMap(M);\n    return function_1.pipe(fa, foldMapM(f));\n  };\n};\n/* istanbul ignore next */\n\n\nvar reduceRight_ = function (fa, b, f) {\n  return function_1.pipe(fa, exports.reduceRight(b, f));\n};\n\nvar traverse_ = function (F) {\n  var traverseF = exports.traverse(F);\n  return function (ta, f) {\n    return function_1.pipe(ta, traverseF(f));\n  };\n};\n\nvar bimap_ = function (fa, f, g) {\n  return function_1.pipe(fa, exports.bimap(f, g));\n};\n\nvar mapLeft_ = function (fa, f) {\n  return function_1.pipe(fa, exports.mapLeft(f));\n};\n/* istanbul ignore next */\n\n\nvar alt_ = function (fa, that) {\n  return function_1.pipe(fa, exports.alt(that));\n};\n/* istanbul ignore next */\n\n\nvar extend_ = function (wa, f) {\n  return function_1.pipe(wa, exports.extend(f));\n};\n\nvar chainRec_ = function (a, f) {\n  return ChainRec_1.tailRec(f(a), function (e) {\n    return exports.isLeft(e) ? exports.right(exports.left(e.left)) : exports.isLeft(e.right) ? exports.left(f(e.right.left)) : exports.right(exports.right(e.right.right));\n  });\n}; // -------------------------------------------------------------------------------------\n// pipeables\n// -------------------------------------------------------------------------------------\n\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category Functor\n * @since 2.0.0\n */\n\n\nvar map = function (f) {\n  return function (fa) {\n    return exports.isLeft(fa) ? fa : exports.right(f(fa.right));\n  };\n};\n\nexports.map = map;\n/**\n * Map a pair of functions over the two type arguments of the bifunctor.\n *\n * @category Bifunctor\n * @since 2.0.0\n */\n\nvar bimap = function (f, g) {\n  return function (fa) {\n    return exports.isLeft(fa) ? exports.left(f(fa.left)) : exports.right(g(fa.right));\n  };\n};\n\nexports.bimap = bimap;\n/**\n * Map a function over the first type argument of a bifunctor.\n *\n * @category Bifunctor\n * @since 2.0.0\n */\n\nvar mapLeft = function (f) {\n  return function (fa) {\n    return exports.isLeft(fa) ? exports.left(f(fa.left)) : fa;\n  };\n};\n\nexports.mapLeft = mapLeft;\n/**\n * Less strict version of [`ap`](#ap).\n *\n * @category Apply\n * @since 2.8.0\n */\n\nvar apW = function (fa) {\n  return function (fab) {\n    return exports.isLeft(fab) ? fab : exports.isLeft(fa) ? fa : exports.right(fab.right(fa.right));\n  };\n};\n\nexports.apW = apW;\n/**\n * Apply a function to an argument under a type constructor.\n *\n * @category Apply\n * @since 2.0.0\n */\n\nexports.ap = exports.apW;\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.0.0\n */\n\nvar apFirst = function (fb) {\n  return function_1.flow(exports.map(function (a) {\n    return function () {\n      return a;\n    };\n  }), exports.ap(fb));\n};\n\nexports.apFirst = apFirst;\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.0.0\n */\n\nvar apSecond = function (fb) {\n  return function_1.flow(exports.map(function () {\n    return function (b) {\n      return b;\n    };\n  }), exports.ap(fb));\n};\n\nexports.apSecond = apSecond;\n/**\n * Wrap a value into the type constructor.\n *\n * Equivalent to [`right`](#right).\n *\n * @example\n * import * as E from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(E.of('a'), E.right('a'))\n *\n * @category Applicative\n * @since 2.7.0\n */\n\nexports.of = exports.right;\n/**\n * Less strict version of [`chain`](#chain).\n *\n * @category Monad\n * @since 2.6.0\n */\n\nvar chainW = function (f) {\n  return function (ma) {\n    return exports.isLeft(ma) ? ma : f(ma.right);\n  };\n};\n\nexports.chainW = chainW;\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation.\n *\n * @category Monad\n * @since 2.0.0\n */\n\nexports.chain = exports.chainW;\n/**\n * Less strict version of [`chainFirst`](#chainFirst)\n *\n * Derivable from `Monad`.\n *\n * @category combinators\n * @since 2.8.0\n */\n\nvar chainFirstW = function (f) {\n  return function (ma) {\n    return function_1.pipe(ma, exports.chainW(function (a) {\n      return function_1.pipe(f(a), exports.map(function () {\n        return a;\n      }));\n    }));\n  };\n};\n\nexports.chainFirstW = chainFirstW;\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * Derivable from `Monad`.\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexports.chainFirst = exports.chainFirstW;\n/**\n * The `flatten` function is the conventional monad join operator. It is used to remove one level of monadic structure, projecting its bound argument into the outer level.\n *\n * Derivable from `Monad`.\n *\n * @example\n * import * as E from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(E.flatten(E.right(E.right('a'))), E.right('a'))\n * assert.deepStrictEqual(E.flatten(E.right(E.left('e'))), E.left('e'))\n * assert.deepStrictEqual(E.flatten(E.left('e')), E.left('e'))\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexports.flatten = /*#__PURE__*/exports.chain(function_1.identity);\n/**\n * Less strict version of [`alt`](#alt).\n *\n * @category Alt\n * @since 2.9.0\n */\n\nvar altW = function (that) {\n  return function (fa) {\n    return exports.isLeft(fa) ? that() : fa;\n  };\n};\n\nexports.altW = altW;\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * @category Alt\n * @since 2.0.0\n */\n\nexports.alt = exports.altW;\n/**\n * @category Extend\n * @since 2.0.0\n */\n\nvar extend = function (f) {\n  return function (wa) {\n    return exports.isLeft(wa) ? wa : exports.right(f(wa));\n  };\n};\n\nexports.extend = extend;\n/**\n * Derivable from `Extend`.\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexports.duplicate = /*#__PURE__*/exports.extend(function_1.identity);\n/**\n * Left-associative fold of a structure.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n *\n * const startWith = 'prefix'\n * const concat = (a: string, b: string) => `${a}:${b}`\n *\n * assert.deepStrictEqual(\n *   pipe(E.right('a'), E.reduce(startWith, concat)),\n *   'prefix:a',\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(E.left('e'), E.reduce(startWith, concat)),\n *   'prefix',\n * )\n *\n * @category Foldable\n * @since 2.0.0\n */\n\nvar reduce = function (b, f) {\n  return function (fa) {\n    return exports.isLeft(fa) ? b : f(b, fa.right);\n  };\n};\n\nexports.reduce = reduce;\n/**\n * Map each element of the structure to a monoid, and combine the results.\n *\n * @example\n * import { pipe } from 'fp-ts/function';\n * import * as E from 'fp-ts/Either'\n * import { monoidString } from 'fp-ts/Monoid'\n *\n * const yell = (a: string) => `${a}!`\n *\n * assert.deepStrictEqual(\n *   pipe(E.right('a'), E.foldMap(monoidString)(yell)),\n *   'a!',\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(E.left('e'), E.foldMap(monoidString)(yell)),\n *   monoidString.empty,\n * )\n *\n * @category Foldable\n * @since 2.0.0\n */\n\nvar foldMap = function (M) {\n  return function (f) {\n    return function (fa) {\n      return exports.isLeft(fa) ? M.empty : f(fa.right);\n    };\n  };\n};\n\nexports.foldMap = foldMap;\n/**\n * Right-associative fold of a structure.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n *\n * const startWith = 'postfix'\n * const concat = (a: string, b: string) => `${a}:${b}`\n *\n * assert.deepStrictEqual(\n *   pipe(E.right('a'), E.reduceRight(startWith, concat)),\n *   'a:postfix',\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(E.left('e'), E.reduceRight(startWith, concat)),\n *   'postfix',\n * )\n *\n * @category Foldable\n * @since 2.0.0\n */\n\nvar reduceRight = function (b, f) {\n  return function (fa) {\n    return exports.isLeft(fa) ? b : f(fa.right, b);\n  };\n};\n\nexports.reduceRight = reduceRight;\n/**\n * Map each element of a structure to an action, evaluate these actions from left to right, and collect the results.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as A from 'fp-ts/Array'\n * import * as E from 'fp-ts/Either'\n * import * as O from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   pipe(E.right(['a']), E.traverse(O.option)(A.head)),\n *   O.some(E.right('a')),\n *  )\n *\n * assert.deepStrictEqual(\n *   pipe(E.right([]), E.traverse(O.option)(A.head)),\n *   O.none,\n * )\n *\n * @category Traversable\n * @since 2.6.3\n */\n\nvar traverse = function (F) {\n  return function (f) {\n    return function (ta) {\n      return exports.isLeft(ta) ? F.of(exports.left(ta.left)) : F.map(f(ta.right), exports.right);\n    };\n  };\n};\n\nexports.traverse = traverse;\n/**\n * Evaluate each monadic action in the structure from left to right, and collect the results.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n * import * as O from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   pipe(E.right(O.some('a')), E.sequence(O.option)),\n *   O.some(E.right('a')),\n *  )\n *\n * assert.deepStrictEqual(\n *   pipe(E.right(O.none), E.sequence(O.option)),\n *   O.none\n * )\n *\n * @category Traversable\n * @since 2.6.3\n */\n\nvar sequence = function (F) {\n  return function (ma) {\n    return exports.isLeft(ma) ? F.of(exports.left(ma.left)) : F.map(ma.right, exports.right);\n  };\n};\n\nexports.sequence = sequence;\n/**\n * @category MonadThrow\n * @since 2.6.3\n */\n\nexports.throwError = exports.left; // -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n\n/**\n * @category instances\n * @since 2.0.0\n */\n\nexports.URI = 'Either';\n/**\n * @category instances\n * @since 2.0.0\n */\n\nfunction getShow(SE, SA) {\n  return {\n    show: function (ma) {\n      return exports.isLeft(ma) ? \"left(\" + SE.show(ma.left) + \")\" : \"right(\" + SA.show(ma.right) + \")\";\n    }\n  };\n}\n\nexports.getShow = getShow;\n/**\n * @category instances\n * @since 2.0.0\n */\n\nfunction getEq(EL, EA) {\n  return {\n    equals: function (x, y) {\n      return x === y || (exports.isLeft(x) ? exports.isLeft(y) && EL.equals(x.left, y.left) : exports.isRight(y) && EA.equals(x.right, y.right));\n    }\n  };\n}\n\nexports.getEq = getEq;\n/**\n * Semigroup returning the left-most non-`Left` value. If both operands are `Right`s then the inner values are\n * concatenated using the provided `Semigroup`\n *\n * @example\n * import { getSemigroup, left, right } from 'fp-ts/Either'\n * import { semigroupSum } from 'fp-ts/Semigroup'\n *\n * const S = getSemigroup<string, number>(semigroupSum)\n * assert.deepStrictEqual(S.concat(left('a'), left('b')), left('a'))\n * assert.deepStrictEqual(S.concat(left('a'), right(2)), right(2))\n * assert.deepStrictEqual(S.concat(right(1), left('b')), right(1))\n * assert.deepStrictEqual(S.concat(right(1), right(2)), right(3))\n *\n * @category instances\n * @since 2.0.0\n */\n\nfunction getSemigroup(S) {\n  return {\n    concat: function (x, y) {\n      return exports.isLeft(y) ? x : exports.isLeft(x) ? y : exports.right(S.concat(x.right, y.right));\n    }\n  };\n}\n\nexports.getSemigroup = getSemigroup;\n/**\n * Semigroup returning the left-most `Left` value. If both operands are `Right`s then the inner values\n * are concatenated using the provided `Semigroup`\n *\n * @example\n * import { getApplySemigroup, left, right } from 'fp-ts/Either'\n * import { semigroupSum } from 'fp-ts/Semigroup'\n *\n * const S = getApplySemigroup<string, number>(semigroupSum)\n * assert.deepStrictEqual(S.concat(left('a'), left('b')), left('a'))\n * assert.deepStrictEqual(S.concat(left('a'), right(2)), left('a'))\n * assert.deepStrictEqual(S.concat(right(1), left('b')), left('b'))\n * assert.deepStrictEqual(S.concat(right(1), right(2)), right(3))\n *\n * @category instances\n * @since 2.0.0\n */\n\nfunction getApplySemigroup(S) {\n  return {\n    concat: function (x, y) {\n      return exports.isLeft(x) ? x : exports.isLeft(y) ? y : exports.right(S.concat(x.right, y.right));\n    }\n  };\n}\n\nexports.getApplySemigroup = getApplySemigroup;\n/**\n * @category instances\n * @since 2.0.0\n */\n\nfunction getApplyMonoid(M) {\n  return {\n    concat: getApplySemigroup(M).concat,\n    empty: exports.right(M.empty)\n  };\n}\n\nexports.getApplyMonoid = getApplyMonoid;\n/**\n * Builds a `Filterable` instance for `Either` given `Monoid` for the left side\n *\n * @category instances\n * @since 3.0.0\n */\n\nfunction getFilterable(M) {\n  var empty = exports.left(M.empty);\n\n  var compact = function (ma) {\n    return exports.isLeft(ma) ? ma : ma.right._tag === 'None' ? empty : exports.right(ma.right.value);\n  };\n\n  var separate = function (ma) {\n    return exports.isLeft(ma) ? {\n      left: ma,\n      right: ma\n    } : exports.isLeft(ma.right) ? {\n      left: exports.right(ma.right.left),\n      right: empty\n    } : {\n      left: empty,\n      right: exports.right(ma.right.right)\n    };\n  };\n\n  var partitionMap = function (ma, f) {\n    if (exports.isLeft(ma)) {\n      return {\n        left: ma,\n        right: ma\n      };\n    }\n\n    var e = f(ma.right);\n    return exports.isLeft(e) ? {\n      left: exports.right(e.left),\n      right: empty\n    } : {\n      left: empty,\n      right: exports.right(e.right)\n    };\n  };\n\n  var partition = function (ma, p) {\n    return exports.isLeft(ma) ? {\n      left: ma,\n      right: ma\n    } : p(ma.right) ? {\n      left: empty,\n      right: exports.right(ma.right)\n    } : {\n      left: exports.right(ma.right),\n      right: empty\n    };\n  };\n\n  var filterMap = function (ma, f) {\n    if (exports.isLeft(ma)) {\n      return ma;\n    }\n\n    var ob = f(ma.right);\n    return ob._tag === 'None' ? empty : exports.right(ob.value);\n  };\n\n  var filter = function (ma, predicate) {\n    return exports.isLeft(ma) ? ma : predicate(ma.right) ? ma : empty;\n  };\n\n  return {\n    URI: exports.URI,\n    _E: undefined,\n    map: map_,\n    compact: compact,\n    separate: separate,\n    filter: filter,\n    filterMap: filterMap,\n    partition: partition,\n    partitionMap: partitionMap\n  };\n}\n\nexports.getFilterable = getFilterable;\n/**\n * Builds `Witherable` instance for `Either` given `Monoid` for the left side\n *\n * @category instances\n * @since 2.0.0\n */\n\nfunction getWitherable(M) {\n  var F_ = getFilterable(M);\n\n  var wither = function (F) {\n    var traverseF = traverse_(F);\n    return function (ma, f) {\n      return F.map(traverseF(ma, f), F_.compact);\n    };\n  };\n\n  var wilt = function (F) {\n    var traverseF = traverse_(F);\n    return function (ma, f) {\n      return F.map(traverseF(ma, f), F_.separate);\n    };\n  };\n\n  return {\n    URI: exports.URI,\n    _E: undefined,\n    map: map_,\n    compact: F_.compact,\n    separate: F_.separate,\n    filter: F_.filter,\n    filterMap: F_.filterMap,\n    partition: F_.partition,\n    partitionMap: F_.partitionMap,\n    traverse: traverse_,\n    sequence: exports.sequence,\n    reduce: reduce_,\n    foldMap: foldMap_,\n    reduceRight: reduceRight_,\n    wither: wither,\n    wilt: wilt\n  };\n}\n\nexports.getWitherable = getWitherable;\n/**\n * @category instances\n * @since 2.7.0\n */\n\nfunction getApplicativeValidation(SE) {\n  return {\n    URI: exports.URI,\n    _E: undefined,\n    map: map_,\n    ap: function (fab, fa) {\n      return exports.isLeft(fab) ? exports.isLeft(fa) ? exports.left(SE.concat(fab.left, fa.left)) : fab : exports.isLeft(fa) ? fa : exports.right(fab.right(fa.right));\n    },\n    of: exports.of\n  };\n}\n\nexports.getApplicativeValidation = getApplicativeValidation;\n/**\n * @category instances\n * @since 2.7.0\n */\n\nfunction getAltValidation(SE) {\n  return {\n    URI: exports.URI,\n    _E: undefined,\n    map: map_,\n    alt: function (me, that) {\n      if (exports.isRight(me)) {\n        return me;\n      }\n\n      var ea = that();\n      return exports.isLeft(ea) ? exports.left(SE.concat(me.left, ea.left)) : ea;\n    }\n  };\n}\n\nexports.getAltValidation = getAltValidation; // TODO: remove in v3\n\n/**\n * @category instances\n * @since 2.0.0\n */\n\nfunction getValidation(SE) {\n  var applicativeValidation = getApplicativeValidation(SE);\n  var altValidation = getAltValidation(SE);\n  return {\n    URI: exports.URI,\n    _E: undefined,\n    map: map_,\n    of: exports.of,\n    chain: chain_,\n    bimap: bimap_,\n    mapLeft: mapLeft_,\n    reduce: reduce_,\n    foldMap: foldMap_,\n    reduceRight: reduceRight_,\n    extend: extend_,\n    traverse: traverse_,\n    sequence: exports.sequence,\n    chainRec: chainRec_,\n    throwError: exports.throwError,\n    ap: applicativeValidation.ap,\n    alt: altValidation.alt\n  };\n}\n\nexports.getValidation = getValidation;\n/**\n * @category instances\n * @since 2.0.0\n */\n\nfunction getValidationSemigroup(SE, SA) {\n  return {\n    concat: function (x, y) {\n      return exports.isLeft(x) ? exports.isLeft(y) ? exports.left(SE.concat(x.left, y.left)) : x : exports.isLeft(y) ? y : exports.right(SA.concat(x.right, y.right));\n    }\n  };\n}\n\nexports.getValidationSemigroup = getValidationSemigroup;\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexports.Functor = {\n  URI: exports.URI,\n  map: map_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexports.Applicative = {\n  URI: exports.URI,\n  map: map_,\n  ap: ap_,\n  of: exports.of\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexports.Monad = {\n  URI: exports.URI,\n  map: map_,\n  ap: ap_,\n  of: exports.of,\n  chain: chain_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexports.Foldable = {\n  URI: exports.URI,\n  reduce: reduce_,\n  foldMap: foldMap_,\n  reduceRight: reduceRight_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexports.Traversable = {\n  URI: exports.URI,\n  map: map_,\n  reduce: reduce_,\n  foldMap: foldMap_,\n  reduceRight: reduceRight_,\n  traverse: traverse_,\n  sequence: exports.sequence\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexports.Bifunctor = {\n  URI: exports.URI,\n  bimap: bimap_,\n  mapLeft: mapLeft_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexports.Alt = {\n  URI: exports.URI,\n  map: map_,\n  alt: alt_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexports.Extend = {\n  URI: exports.URI,\n  map: map_,\n  extend: extend_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexports.ChainRec = {\n  URI: exports.URI,\n  map: map_,\n  ap: ap_,\n  chain: chain_,\n  chainRec: chainRec_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexports.MonadThrow = {\n  URI: exports.URI,\n  map: map_,\n  ap: ap_,\n  of: exports.of,\n  chain: chain_,\n  throwError: exports.throwError\n};\n/**\n * @category instances\n * @since 2.0.0\n */\n\nfunction getValidationMonoid(SE, SA) {\n  return {\n    concat: getValidationSemigroup(SE, SA).concat,\n    empty: exports.right(SA.empty)\n  };\n}\n\nexports.getValidationMonoid = getValidationMonoid;\n/**\n * @category instances\n * @since 2.0.0\n */\n\nexports.either = {\n  URI: exports.URI,\n  map: map_,\n  of: exports.of,\n  ap: ap_,\n  chain: chain_,\n  reduce: reduce_,\n  foldMap: foldMap_,\n  reduceRight: reduceRight_,\n  traverse: traverse_,\n  sequence: exports.sequence,\n  bimap: bimap_,\n  mapLeft: mapLeft_,\n  alt: alt_,\n  extend: extend_,\n  chainRec: chainRec_,\n  throwError: exports.throwError\n}; // -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n\n/**\n * Default value for the `onError` argument of `tryCatch`\n *\n * @since 2.0.0\n */\n\nfunction toError(e) {\n  return e instanceof Error ? e : new Error(String(e));\n}\n\nexports.toError = toError;\n/**\n * @since 2.0.0\n */\n\nfunction elem(E) {\n  return function (a, ma) {\n    return exports.isLeft(ma) ? false : E.equals(a, ma.right);\n  };\n}\n\nexports.elem = elem;\n/**\n * Returns `false` if `Left` or returns the result of the application of the given predicate to the `Right` value.\n *\n * @example\n * import { exists, left, right } from 'fp-ts/Either'\n *\n * const gt2 = exists((n: number) => n > 2)\n *\n * assert.strictEqual(gt2(left('a')), false)\n * assert.strictEqual(gt2(right(1)), false)\n * assert.strictEqual(gt2(right(3)), true)\n *\n * @since 2.0.0\n */\n\nfunction exists(predicate) {\n  return function (ma) {\n    return exports.isLeft(ma) ? false : predicate(ma.right);\n  };\n}\n\nexports.exists = exists; // -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n\n/**\n * @since 2.9.0\n */\n\nexports.Do = /*#__PURE__*/exports.of({});\n/**\n * @since 2.8.0\n */\n\nvar bindTo = function (name) {\n  return exports.map(function_1.bindTo_(name));\n};\n\nexports.bindTo = bindTo;\n/**\n * @since 2.8.0\n */\n\nvar bindW = function (name, f) {\n  return exports.chainW(function (a) {\n    return function_1.pipe(f(a), exports.map(function (b) {\n      return function_1.bind_(a, name, b);\n    }));\n  });\n};\n\nexports.bindW = bindW;\n/**\n * @since 2.8.0\n */\n\nexports.bind = exports.bindW; // -------------------------------------------------------------------------------------\n// pipeable sequence S\n// -------------------------------------------------------------------------------------\n\n/**\n * @since 2.8.0\n */\n\nvar apSW = function (name, fb) {\n  return function_1.flow(exports.map(function (a) {\n    return function (b) {\n      return function_1.bind_(a, name, b);\n    };\n  }), exports.apW(fb));\n};\n\nexports.apSW = apSW;\n/**\n * @since 2.8.0\n */\n\nexports.apS = exports.apSW; // -------------------------------------------------------------------------------------\n// array utils\n// -------------------------------------------------------------------------------------\n\n/**\n *\n * @since 2.9.0\n */\n\nvar traverseArrayWithIndex = function (f) {\n  return function (arr) {\n    // tslint:disable-next-line: readonly-array\n    var result = [];\n\n    for (var i = 0; i < arr.length; i++) {\n      var e = f(i, arr[i]);\n\n      if (e._tag === 'Left') {\n        return e;\n      }\n\n      result.push(e.right);\n    }\n\n    return exports.right(result);\n  };\n};\n\nexports.traverseArrayWithIndex = traverseArrayWithIndex;\n/**\n * map an array using provided function to Either then transform to Either of the array\n * this function have the same behavior of `A.traverse(E.either)` but it's optimized and perform better\n *\n * @example\n *\n *\n * import { traverseArray, left, right, fromPredicate } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import * as A from 'fp-ts/Array'\n *\n * const arr = A.range(0, 10)\n * assert.deepStrictEqual(\n *   pipe(\n *     arr,\n *     traverseArray((x) => right(x))\n *   ),\n *   right(arr)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     arr,\n *     traverseArray(\n *       fromPredicate(\n *         (x) => x > 5,\n *         () => 'a'\n *       )\n *     )\n *   ),\n *   left('a')\n * )\n * @since 2.9.0\n */\n\nvar traverseArray = function (f) {\n  return exports.traverseArrayWithIndex(function (_, a) {\n    return f(a);\n  });\n};\n\nexports.traverseArray = traverseArray;\n/**\n * convert an array of either to an either of array\n * this function have the same behavior of `A.sequence(E.either)` but it's optimized and perform better\n *\n * @example\n *\n * import { sequenceArray, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import * as A from 'fp-ts/Array'\n *\n * const arr = A.range(0, 10)\n * assert.deepStrictEqual(pipe(arr, A.map(right), sequenceArray), right(arr))\n * assert.deepStrictEqual(pipe(arr, A.map(right), A.cons(left('Error')), sequenceArray), left('Error'))\n *\n * @since 2.9.0\n */\n\nexports.sequenceArray = /*#__PURE__*/exports.traverseArray(function_1.identity);","map":{"version":3,"names":["Object","defineProperty","exports","value","getWitherable","getFilterable","getApplyMonoid","getApplySemigroup","getSemigroup","getEq","getShow","URI","throwError","sequence","traverse","reduceRight","foldMap","reduce","duplicate","extend","alt","altW","flatten","chainFirst","chainFirstW","chain","chainW","of","apSecond","apFirst","ap","apW","mapLeft","bimap","map","filterOrElse","filterOrElseW","orElse","swap","chainNullableK","fromNullableK","getOrElse","getOrElseW","fold","fromPredicate","fromOption","stringifyJSON","parseJSON","tryCatch","fromNullable","right","left","isRight","isLeft","sequenceArray","traverseArray","traverseArrayWithIndex","apS","apSW","bind","bindW","bindTo","Do","exists","elem","toError","either","getValidationMonoid","MonadThrow","ChainRec","Extend","Alt","Bifunctor","Traversable","Foldable","Monad","Applicative","Functor","getValidationSemigroup","getValidation","getAltValidation","getApplicativeValidation","ChainRec_1","require","function_1","ma","_tag","e","a","f","onError","s","JSON","parse","u","stringify","onNone","predicate","onFalse","onLeft","onRight","from","_i","arguments","length","apply","map_","fa","pipe","ap_","fab","chain_","reduce_","b","foldMap_","M","foldMapM","reduceRight_","traverse_","F","traverseF","ta","bimap_","g","mapLeft_","alt_","that","extend_","wa","chainRec_","tailRec","fb","flow","identity","empty","SE","SA","show","EL","EA","equals","x","y","S","concat","compact","separate","partitionMap","partition","p","filterMap","ob","filter","_E","undefined","F_","wither","wilt","me","ea","applicativeValidation","altValidation","chainRec","Error","String","E","name","bindTo_","bind_","arr","result","i","push","_"],"sources":["/Users/ngocban/Desktop/imx-integration-reactjs/node_modules/fp-ts/lib/Either.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getWitherable = exports.getFilterable = exports.getApplyMonoid = exports.getApplySemigroup = exports.getSemigroup = exports.getEq = exports.getShow = exports.URI = exports.throwError = exports.sequence = exports.traverse = exports.reduceRight = exports.foldMap = exports.reduce = exports.duplicate = exports.extend = exports.alt = exports.altW = exports.flatten = exports.chainFirst = exports.chainFirstW = exports.chain = exports.chainW = exports.of = exports.apSecond = exports.apFirst = exports.ap = exports.apW = exports.mapLeft = exports.bimap = exports.map = exports.filterOrElse = exports.filterOrElseW = exports.orElse = exports.swap = exports.chainNullableK = exports.fromNullableK = exports.getOrElse = exports.getOrElseW = exports.fold = exports.fromPredicate = exports.fromOption = exports.stringifyJSON = exports.parseJSON = exports.tryCatch = exports.fromNullable = exports.right = exports.left = exports.isRight = exports.isLeft = void 0;\nexports.sequenceArray = exports.traverseArray = exports.traverseArrayWithIndex = exports.apS = exports.apSW = exports.bind = exports.bindW = exports.bindTo = exports.Do = exports.exists = exports.elem = exports.toError = exports.either = exports.getValidationMonoid = exports.MonadThrow = exports.ChainRec = exports.Extend = exports.Alt = exports.Bifunctor = exports.Traversable = exports.Foldable = exports.Monad = exports.Applicative = exports.Functor = exports.getValidationSemigroup = exports.getValidation = exports.getAltValidation = exports.getApplicativeValidation = void 0;\nvar ChainRec_1 = require(\"./ChainRec\");\nvar function_1 = require(\"./function\");\n// -------------------------------------------------------------------------------------\n// guards\n// -------------------------------------------------------------------------------------\n/**\n * Returns `true` if the either is an instance of `Left`, `false` otherwise.\n *\n * @category guards\n * @since 2.0.0\n */\nvar isLeft = function (ma) { return ma._tag === 'Left'; };\nexports.isLeft = isLeft;\n/**\n * Returns `true` if the either is an instance of `Right`, `false` otherwise.\n *\n * @category guards\n * @since 2.0.0\n */\nvar isRight = function (ma) { return ma._tag === 'Right'; };\nexports.isRight = isRight;\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * Constructs a new `Either` holding a `Left` value. This usually represents a failure, due to the right-bias of this\n * structure.\n *\n * @category constructors\n * @since 2.0.0\n */\nvar left = function (e) { return ({ _tag: 'Left', left: e }); };\nexports.left = left;\n/**\n * Constructs a new `Either` holding a `Right` value. This usually represents a successful value due to the right bias\n * of this structure.\n *\n * @category constructors\n * @since 2.0.0\n */\nvar right = function (a) { return ({ _tag: 'Right', right: a }); };\nexports.right = right;\n// TODO: make lazy in v3\n/**\n * Takes a default and a nullable value, if the value is not nully, turn it into a `Right`, if the value is nully use\n * the provided default as a `Left`.\n *\n * @example\n * import { fromNullable, left, right } from 'fp-ts/Either'\n *\n * const parse = fromNullable('nully')\n *\n * assert.deepStrictEqual(parse(1), right(1))\n * assert.deepStrictEqual(parse(null), left('nully'))\n *\n * @category constructors\n * @since 2.0.0\n */\nfunction fromNullable(e) {\n    return function (a) { return (a == null ? exports.left(e) : exports.right(a)); };\n}\nexports.fromNullable = fromNullable;\n// TODO: `onError => Lazy<A> => Either` in v3\n/**\n * Constructs a new `Either` from a function that might throw.\n *\n * @example\n * import { Either, left, right, tryCatch } from 'fp-ts/Either'\n *\n * const unsafeHead = <A>(as: Array<A>): A => {\n *   if (as.length > 0) {\n *     return as[0]\n *   } else {\n *     throw new Error('empty array')\n *   }\n * }\n *\n * const head = <A>(as: Array<A>): Either<Error, A> => {\n *   return tryCatch(() => unsafeHead(as), e => (e instanceof Error ? e : new Error('unknown error')))\n * }\n *\n * assert.deepStrictEqual(head([]), left(new Error('empty array')))\n * assert.deepStrictEqual(head([1, 2, 3]), right(1))\n *\n * @category constructors\n * @since 2.0.0\n */\nfunction tryCatch(f, onError) {\n    try {\n        return exports.right(f());\n    }\n    catch (e) {\n        return exports.left(onError(e));\n    }\n}\nexports.tryCatch = tryCatch;\n// TODO curry in v3\n/**\n * Converts a JavaScript Object Notation (JSON) string into an object.\n *\n * @example\n * import { parseJSON, toError, right, left } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(parseJSON('{\"a\":1}', toError), right({ a: 1 }))\n * assert.deepStrictEqual(parseJSON('{\"a\":}', toError), left(new SyntaxError('Unexpected token } in JSON at position 5')))\n *\n * @category constructors\n * @since 2.0.0\n */\nfunction parseJSON(s, onError) {\n    return tryCatch(function () { return JSON.parse(s); }, onError);\n}\nexports.parseJSON = parseJSON;\n// TODO curry in v3\n/**\n * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n *\n * @example\n * import * as E from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(E.stringifyJSON({ a: 1 }, E.toError), E.right('{\"a\":1}'))\n * const circular: any = { ref: null }\n * circular.ref = circular\n * assert.deepStrictEqual(\n *   pipe(\n *     E.stringifyJSON(circular, E.toError),\n *     E.mapLeft(e => e.message.includes('Converting circular structure to JSON'))\n *   ),\n *   E.left(true)\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\nfunction stringifyJSON(u, onError) {\n    return tryCatch(function () { return JSON.stringify(u); }, onError);\n}\nexports.stringifyJSON = stringifyJSON;\n/**\n * Derivable from `MonadThrow`.\n *\n * @example\n * import { fromOption, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import { none, some } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     some(1),\n *     fromOption(() => 'error')\n *   ),\n *   right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     none,\n *     fromOption(() => 'error')\n *   ),\n *   left('error')\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\nvar fromOption = function (onNone) { return function (ma) {\n    return ma._tag === 'None' ? exports.left(onNone()) : exports.right(ma.value);\n}; };\nexports.fromOption = fromOption;\n/**\n * Derivable from `MonadThrow`.\n *\n * @example\n * import { fromPredicate, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     1,\n *     fromPredicate(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     -1,\n *     fromPredicate(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   left('error')\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\nvar fromPredicate = function (predicate, onFalse) { return function (a) { return (predicate(a) ? exports.right(a) : exports.left(onFalse(a))); }; };\nexports.fromPredicate = fromPredicate;\n// -------------------------------------------------------------------------------------\n// destructors\n// -------------------------------------------------------------------------------------\n/**\n * Takes two functions and an `Either` value, if the value is a `Left` the inner value is applied to the first function,\n * if the value is a `Right` the inner value is applied to the second function.\n *\n * @example\n * import { fold, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * function onLeft(errors: Array<string>): string {\n *   return `Errors: ${errors.join(', ')}`\n * }\n *\n * function onRight(value: number): string {\n *   return `Ok: ${value}`\n * }\n *\n * assert.strictEqual(\n *   pipe(\n *     right(1),\n *     fold(onLeft, onRight)\n *   ),\n *   'Ok: 1'\n * )\n * assert.strictEqual(\n *   pipe(\n *     left(['error 1', 'error 2']),\n *     fold(onLeft, onRight)\n *   ),\n *   'Errors: error 1, error 2'\n * )\n *\n * @category destructors\n * @since 2.0.0\n */\nfunction fold(onLeft, onRight) {\n    return function (ma) { return (exports.isLeft(ma) ? onLeft(ma.left) : onRight(ma.right)); };\n}\nexports.fold = fold;\n/**\n * Less strict version of [`getOrElse`](#getOrElse).\n *\n * @category destructors\n * @since 2.6.0\n */\nvar getOrElseW = function (onLeft) { return function (ma) {\n    return exports.isLeft(ma) ? onLeft(ma.left) : ma.right;\n}; };\nexports.getOrElseW = getOrElseW;\n/**\n * Returns the wrapped value if it's a `Right` or a default value if is a `Left`.\n *\n * @example\n * import { getOrElse, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     right(1),\n *     getOrElse(() => 0)\n *   ),\n *   1\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     left('error'),\n *     getOrElse(() => 0)\n *   ),\n *   0\n * )\n *\n * @category destructors\n * @since 2.0.0\n */\nexports.getOrElse = exports.getOrElseW;\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * @category combinators\n * @since 2.9.0\n */\nfunction fromNullableK(e) {\n    var from = fromNullable(e);\n    return function (f) { return function () {\n        var a = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            a[_i] = arguments[_i];\n        }\n        return from(f.apply(void 0, a));\n    }; };\n}\nexports.fromNullableK = fromNullableK;\n/**\n * @category combinators\n * @since 2.9.0\n */\nfunction chainNullableK(e) {\n    var from = fromNullableK(e);\n    return function (f) { return exports.chain(from(f)); };\n}\nexports.chainNullableK = chainNullableK;\n/**\n * Returns a `Right` if is a `Left` (and vice versa).\n *\n * @category combinators\n * @since 2.0.0\n */\nfunction swap(ma) {\n    return exports.isLeft(ma) ? exports.right(ma.left) : exports.left(ma.right);\n}\nexports.swap = swap;\n/**\n * Useful for recovering from errors.\n *\n * @category combinators\n * @since 2.0.0\n */\nfunction orElse(onLeft) {\n    return function (ma) { return (exports.isLeft(ma) ? onLeft(ma.left) : ma); };\n}\nexports.orElse = orElse;\n/**\n * Less strict version of [`filterOrElse`](#filterOrElse).\n *\n * @since 2.9.0\n */\nvar filterOrElseW = function (predicate, onFalse) {\n    return exports.chainW(function (a) { return (predicate(a) ? exports.right(a) : exports.left(onFalse(a))); });\n};\nexports.filterOrElseW = filterOrElseW;\n/**\n * Derivable from `MonadThrow`.\n *\n * @example\n * import { filterOrElse, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     right(1),\n *     filterOrElse(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     right(-1),\n *     filterOrElse(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   left('error')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     left('a'),\n *     filterOrElse(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   left('a')\n * )\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.filterOrElse = exports.filterOrElseW;\n// -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\nvar map_ = function (fa, f) { return function_1.pipe(fa, exports.map(f)); };\nvar ap_ = function (fab, fa) { return function_1.pipe(fab, exports.ap(fa)); };\n/* istanbul ignore next */\nvar chain_ = function (ma, f) { return function_1.pipe(ma, exports.chain(f)); };\n/* istanbul ignore next */\nvar reduce_ = function (fa, b, f) { return function_1.pipe(fa, exports.reduce(b, f)); };\n/* istanbul ignore next */\nvar foldMap_ = function (M) { return function (fa, f) {\n    var foldMapM = exports.foldMap(M);\n    return function_1.pipe(fa, foldMapM(f));\n}; };\n/* istanbul ignore next */\nvar reduceRight_ = function (fa, b, f) { return function_1.pipe(fa, exports.reduceRight(b, f)); };\nvar traverse_ = function (F) {\n    var traverseF = exports.traverse(F);\n    return function (ta, f) { return function_1.pipe(ta, traverseF(f)); };\n};\nvar bimap_ = function (fa, f, g) { return function_1.pipe(fa, exports.bimap(f, g)); };\nvar mapLeft_ = function (fa, f) { return function_1.pipe(fa, exports.mapLeft(f)); };\n/* istanbul ignore next */\nvar alt_ = function (fa, that) { return function_1.pipe(fa, exports.alt(that)); };\n/* istanbul ignore next */\nvar extend_ = function (wa, f) { return function_1.pipe(wa, exports.extend(f)); };\nvar chainRec_ = function (a, f) {\n    return ChainRec_1.tailRec(f(a), function (e) {\n        return exports.isLeft(e) ? exports.right(exports.left(e.left)) : exports.isLeft(e.right) ? exports.left(f(e.right.left)) : exports.right(exports.right(e.right.right));\n    });\n};\n// -------------------------------------------------------------------------------------\n// pipeables\n// -------------------------------------------------------------------------------------\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category Functor\n * @since 2.0.0\n */\nvar map = function (f) { return function (fa) {\n    return exports.isLeft(fa) ? fa : exports.right(f(fa.right));\n}; };\nexports.map = map;\n/**\n * Map a pair of functions over the two type arguments of the bifunctor.\n *\n * @category Bifunctor\n * @since 2.0.0\n */\nvar bimap = function (f, g) { return function (fa) { return (exports.isLeft(fa) ? exports.left(f(fa.left)) : exports.right(g(fa.right))); }; };\nexports.bimap = bimap;\n/**\n * Map a function over the first type argument of a bifunctor.\n *\n * @category Bifunctor\n * @since 2.0.0\n */\nvar mapLeft = function (f) { return function (fa) {\n    return exports.isLeft(fa) ? exports.left(f(fa.left)) : fa;\n}; };\nexports.mapLeft = mapLeft;\n/**\n * Less strict version of [`ap`](#ap).\n *\n * @category Apply\n * @since 2.8.0\n */\nvar apW = function (fa) { return function (fab) {\n    return exports.isLeft(fab) ? fab : exports.isLeft(fa) ? fa : exports.right(fab.right(fa.right));\n}; };\nexports.apW = apW;\n/**\n * Apply a function to an argument under a type constructor.\n *\n * @category Apply\n * @since 2.0.0\n */\nexports.ap = exports.apW;\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.0.0\n */\nvar apFirst = function (fb) {\n    return function_1.flow(exports.map(function (a) { return function () { return a; }; }), exports.ap(fb));\n};\nexports.apFirst = apFirst;\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.0.0\n */\nvar apSecond = function (fb) {\n    return function_1.flow(exports.map(function () { return function (b) { return b; }; }), exports.ap(fb));\n};\nexports.apSecond = apSecond;\n/**\n * Wrap a value into the type constructor.\n *\n * Equivalent to [`right`](#right).\n *\n * @example\n * import * as E from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(E.of('a'), E.right('a'))\n *\n * @category Applicative\n * @since 2.7.0\n */\nexports.of = exports.right;\n/**\n * Less strict version of [`chain`](#chain).\n *\n * @category Monad\n * @since 2.6.0\n */\nvar chainW = function (f) { return function (ma) {\n    return exports.isLeft(ma) ? ma : f(ma.right);\n}; };\nexports.chainW = chainW;\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation.\n *\n * @category Monad\n * @since 2.0.0\n */\nexports.chain = exports.chainW;\n/**\n * Less strict version of [`chainFirst`](#chainFirst)\n *\n * Derivable from `Monad`.\n *\n * @category combinators\n * @since 2.8.0\n */\nvar chainFirstW = function (f) { return function (ma) {\n    return function_1.pipe(ma, exports.chainW(function (a) {\n        return function_1.pipe(f(a), exports.map(function () { return a; }));\n    }));\n}; };\nexports.chainFirstW = chainFirstW;\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * Derivable from `Monad`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.chainFirst = exports.chainFirstW;\n/**\n * The `flatten` function is the conventional monad join operator. It is used to remove one level of monadic structure, projecting its bound argument into the outer level.\n *\n * Derivable from `Monad`.\n *\n * @example\n * import * as E from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(E.flatten(E.right(E.right('a'))), E.right('a'))\n * assert.deepStrictEqual(E.flatten(E.right(E.left('e'))), E.left('e'))\n * assert.deepStrictEqual(E.flatten(E.left('e')), E.left('e'))\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.flatten = \n/*#__PURE__*/\nexports.chain(function_1.identity);\n/**\n * Less strict version of [`alt`](#alt).\n *\n * @category Alt\n * @since 2.9.0\n */\nvar altW = function (that) { return function (fa) { return (exports.isLeft(fa) ? that() : fa); }; };\nexports.altW = altW;\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * @category Alt\n * @since 2.0.0\n */\nexports.alt = exports.altW;\n/**\n * @category Extend\n * @since 2.0.0\n */\nvar extend = function (f) { return function (wa) {\n    return exports.isLeft(wa) ? wa : exports.right(f(wa));\n}; };\nexports.extend = extend;\n/**\n * Derivable from `Extend`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.duplicate = \n/*#__PURE__*/\nexports.extend(function_1.identity);\n/**\n * Left-associative fold of a structure.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n *\n * const startWith = 'prefix'\n * const concat = (a: string, b: string) => `${a}:${b}`\n *\n * assert.deepStrictEqual(\n *   pipe(E.right('a'), E.reduce(startWith, concat)),\n *   'prefix:a',\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(E.left('e'), E.reduce(startWith, concat)),\n *   'prefix',\n * )\n *\n * @category Foldable\n * @since 2.0.0\n */\nvar reduce = function (b, f) { return function (fa) {\n    return exports.isLeft(fa) ? b : f(b, fa.right);\n}; };\nexports.reduce = reduce;\n/**\n * Map each element of the structure to a monoid, and combine the results.\n *\n * @example\n * import { pipe } from 'fp-ts/function';\n * import * as E from 'fp-ts/Either'\n * import { monoidString } from 'fp-ts/Monoid'\n *\n * const yell = (a: string) => `${a}!`\n *\n * assert.deepStrictEqual(\n *   pipe(E.right('a'), E.foldMap(monoidString)(yell)),\n *   'a!',\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(E.left('e'), E.foldMap(monoidString)(yell)),\n *   monoidString.empty,\n * )\n *\n * @category Foldable\n * @since 2.0.0\n */\nvar foldMap = function (M) { return function (f) { return function (fa) {\n    return exports.isLeft(fa) ? M.empty : f(fa.right);\n}; }; };\nexports.foldMap = foldMap;\n/**\n * Right-associative fold of a structure.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n *\n * const startWith = 'postfix'\n * const concat = (a: string, b: string) => `${a}:${b}`\n *\n * assert.deepStrictEqual(\n *   pipe(E.right('a'), E.reduceRight(startWith, concat)),\n *   'a:postfix',\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(E.left('e'), E.reduceRight(startWith, concat)),\n *   'postfix',\n * )\n *\n * @category Foldable\n * @since 2.0.0\n */\nvar reduceRight = function (b, f) { return function (fa) {\n    return exports.isLeft(fa) ? b : f(fa.right, b);\n}; };\nexports.reduceRight = reduceRight;\n/**\n * Map each element of a structure to an action, evaluate these actions from left to right, and collect the results.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as A from 'fp-ts/Array'\n * import * as E from 'fp-ts/Either'\n * import * as O from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   pipe(E.right(['a']), E.traverse(O.option)(A.head)),\n *   O.some(E.right('a')),\n *  )\n *\n * assert.deepStrictEqual(\n *   pipe(E.right([]), E.traverse(O.option)(A.head)),\n *   O.none,\n * )\n *\n * @category Traversable\n * @since 2.6.3\n */\nvar traverse = function (F) { return function (f) { return function (ta) { return (exports.isLeft(ta) ? F.of(exports.left(ta.left)) : F.map(f(ta.right), exports.right)); }; }; };\nexports.traverse = traverse;\n/**\n * Evaluate each monadic action in the structure from left to right, and collect the results.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n * import * as O from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   pipe(E.right(O.some('a')), E.sequence(O.option)),\n *   O.some(E.right('a')),\n *  )\n *\n * assert.deepStrictEqual(\n *   pipe(E.right(O.none), E.sequence(O.option)),\n *   O.none\n * )\n *\n * @category Traversable\n * @since 2.6.3\n */\nvar sequence = function (F) { return function (ma) {\n    return exports.isLeft(ma) ? F.of(exports.left(ma.left)) : F.map(ma.right, exports.right);\n}; };\nexports.sequence = sequence;\n/**\n * @category MonadThrow\n * @since 2.6.3\n */\nexports.throwError = exports.left;\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.0.0\n */\nexports.URI = 'Either';\n/**\n * @category instances\n * @since 2.0.0\n */\nfunction getShow(SE, SA) {\n    return {\n        show: function (ma) { return (exports.isLeft(ma) ? \"left(\" + SE.show(ma.left) + \")\" : \"right(\" + SA.show(ma.right) + \")\"); }\n    };\n}\nexports.getShow = getShow;\n/**\n * @category instances\n * @since 2.0.0\n */\nfunction getEq(EL, EA) {\n    return {\n        equals: function (x, y) {\n            return x === y || (exports.isLeft(x) ? exports.isLeft(y) && EL.equals(x.left, y.left) : exports.isRight(y) && EA.equals(x.right, y.right));\n        }\n    };\n}\nexports.getEq = getEq;\n/**\n * Semigroup returning the left-most non-`Left` value. If both operands are `Right`s then the inner values are\n * concatenated using the provided `Semigroup`\n *\n * @example\n * import { getSemigroup, left, right } from 'fp-ts/Either'\n * import { semigroupSum } from 'fp-ts/Semigroup'\n *\n * const S = getSemigroup<string, number>(semigroupSum)\n * assert.deepStrictEqual(S.concat(left('a'), left('b')), left('a'))\n * assert.deepStrictEqual(S.concat(left('a'), right(2)), right(2))\n * assert.deepStrictEqual(S.concat(right(1), left('b')), right(1))\n * assert.deepStrictEqual(S.concat(right(1), right(2)), right(3))\n *\n * @category instances\n * @since 2.0.0\n */\nfunction getSemigroup(S) {\n    return {\n        concat: function (x, y) { return (exports.isLeft(y) ? x : exports.isLeft(x) ? y : exports.right(S.concat(x.right, y.right))); }\n    };\n}\nexports.getSemigroup = getSemigroup;\n/**\n * Semigroup returning the left-most `Left` value. If both operands are `Right`s then the inner values\n * are concatenated using the provided `Semigroup`\n *\n * @example\n * import { getApplySemigroup, left, right } from 'fp-ts/Either'\n * import { semigroupSum } from 'fp-ts/Semigroup'\n *\n * const S = getApplySemigroup<string, number>(semigroupSum)\n * assert.deepStrictEqual(S.concat(left('a'), left('b')), left('a'))\n * assert.deepStrictEqual(S.concat(left('a'), right(2)), left('a'))\n * assert.deepStrictEqual(S.concat(right(1), left('b')), left('b'))\n * assert.deepStrictEqual(S.concat(right(1), right(2)), right(3))\n *\n * @category instances\n * @since 2.0.0\n */\nfunction getApplySemigroup(S) {\n    return {\n        concat: function (x, y) { return (exports.isLeft(x) ? x : exports.isLeft(y) ? y : exports.right(S.concat(x.right, y.right))); }\n    };\n}\nexports.getApplySemigroup = getApplySemigroup;\n/**\n * @category instances\n * @since 2.0.0\n */\nfunction getApplyMonoid(M) {\n    return {\n        concat: getApplySemigroup(M).concat,\n        empty: exports.right(M.empty)\n    };\n}\nexports.getApplyMonoid = getApplyMonoid;\n/**\n * Builds a `Filterable` instance for `Either` given `Monoid` for the left side\n *\n * @category instances\n * @since 3.0.0\n */\nfunction getFilterable(M) {\n    var empty = exports.left(M.empty);\n    var compact = function (ma) {\n        return exports.isLeft(ma) ? ma : ma.right._tag === 'None' ? empty : exports.right(ma.right.value);\n    };\n    var separate = function (ma) {\n        return exports.isLeft(ma)\n            ? { left: ma, right: ma }\n            : exports.isLeft(ma.right)\n                ? { left: exports.right(ma.right.left), right: empty }\n                : { left: empty, right: exports.right(ma.right.right) };\n    };\n    var partitionMap = function (ma, f) {\n        if (exports.isLeft(ma)) {\n            return { left: ma, right: ma };\n        }\n        var e = f(ma.right);\n        return exports.isLeft(e) ? { left: exports.right(e.left), right: empty } : { left: empty, right: exports.right(e.right) };\n    };\n    var partition = function (ma, p) {\n        return exports.isLeft(ma)\n            ? { left: ma, right: ma }\n            : p(ma.right)\n                ? { left: empty, right: exports.right(ma.right) }\n                : { left: exports.right(ma.right), right: empty };\n    };\n    var filterMap = function (ma, f) {\n        if (exports.isLeft(ma)) {\n            return ma;\n        }\n        var ob = f(ma.right);\n        return ob._tag === 'None' ? empty : exports.right(ob.value);\n    };\n    var filter = function (ma, predicate) {\n        return exports.isLeft(ma) ? ma : predicate(ma.right) ? ma : empty;\n    };\n    return {\n        URI: exports.URI,\n        _E: undefined,\n        map: map_,\n        compact: compact,\n        separate: separate,\n        filter: filter,\n        filterMap: filterMap,\n        partition: partition,\n        partitionMap: partitionMap\n    };\n}\nexports.getFilterable = getFilterable;\n/**\n * Builds `Witherable` instance for `Either` given `Monoid` for the left side\n *\n * @category instances\n * @since 2.0.0\n */\nfunction getWitherable(M) {\n    var F_ = getFilterable(M);\n    var wither = function (F) {\n        var traverseF = traverse_(F);\n        return function (ma, f) { return F.map(traverseF(ma, f), F_.compact); };\n    };\n    var wilt = function (F) {\n        var traverseF = traverse_(F);\n        return function (ma, f) { return F.map(traverseF(ma, f), F_.separate); };\n    };\n    return {\n        URI: exports.URI,\n        _E: undefined,\n        map: map_,\n        compact: F_.compact,\n        separate: F_.separate,\n        filter: F_.filter,\n        filterMap: F_.filterMap,\n        partition: F_.partition,\n        partitionMap: F_.partitionMap,\n        traverse: traverse_,\n        sequence: exports.sequence,\n        reduce: reduce_,\n        foldMap: foldMap_,\n        reduceRight: reduceRight_,\n        wither: wither,\n        wilt: wilt\n    };\n}\nexports.getWitherable = getWitherable;\n/**\n * @category instances\n * @since 2.7.0\n */\nfunction getApplicativeValidation(SE) {\n    return {\n        URI: exports.URI,\n        _E: undefined,\n        map: map_,\n        ap: function (fab, fa) {\n            return exports.isLeft(fab)\n                ? exports.isLeft(fa)\n                    ? exports.left(SE.concat(fab.left, fa.left))\n                    : fab\n                : exports.isLeft(fa)\n                    ? fa\n                    : exports.right(fab.right(fa.right));\n        },\n        of: exports.of\n    };\n}\nexports.getApplicativeValidation = getApplicativeValidation;\n/**\n * @category instances\n * @since 2.7.0\n */\nfunction getAltValidation(SE) {\n    return {\n        URI: exports.URI,\n        _E: undefined,\n        map: map_,\n        alt: function (me, that) {\n            if (exports.isRight(me)) {\n                return me;\n            }\n            var ea = that();\n            return exports.isLeft(ea) ? exports.left(SE.concat(me.left, ea.left)) : ea;\n        }\n    };\n}\nexports.getAltValidation = getAltValidation;\n// TODO: remove in v3\n/**\n * @category instances\n * @since 2.0.0\n */\nfunction getValidation(SE) {\n    var applicativeValidation = getApplicativeValidation(SE);\n    var altValidation = getAltValidation(SE);\n    return {\n        URI: exports.URI,\n        _E: undefined,\n        map: map_,\n        of: exports.of,\n        chain: chain_,\n        bimap: bimap_,\n        mapLeft: mapLeft_,\n        reduce: reduce_,\n        foldMap: foldMap_,\n        reduceRight: reduceRight_,\n        extend: extend_,\n        traverse: traverse_,\n        sequence: exports.sequence,\n        chainRec: chainRec_,\n        throwError: exports.throwError,\n        ap: applicativeValidation.ap,\n        alt: altValidation.alt\n    };\n}\nexports.getValidation = getValidation;\n/**\n * @category instances\n * @since 2.0.0\n */\nfunction getValidationSemigroup(SE, SA) {\n    return {\n        concat: function (x, y) {\n            return exports.isLeft(x) ? (exports.isLeft(y) ? exports.left(SE.concat(x.left, y.left)) : x) : exports.isLeft(y) ? y : exports.right(SA.concat(x.right, y.right));\n        }\n    };\n}\nexports.getValidationSemigroup = getValidationSemigroup;\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Functor = {\n    URI: exports.URI,\n    map: map_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Applicative = {\n    URI: exports.URI,\n    map: map_,\n    ap: ap_,\n    of: exports.of\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Monad = {\n    URI: exports.URI,\n    map: map_,\n    ap: ap_,\n    of: exports.of,\n    chain: chain_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Foldable = {\n    URI: exports.URI,\n    reduce: reduce_,\n    foldMap: foldMap_,\n    reduceRight: reduceRight_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Traversable = {\n    URI: exports.URI,\n    map: map_,\n    reduce: reduce_,\n    foldMap: foldMap_,\n    reduceRight: reduceRight_,\n    traverse: traverse_,\n    sequence: exports.sequence\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Bifunctor = {\n    URI: exports.URI,\n    bimap: bimap_,\n    mapLeft: mapLeft_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Alt = {\n    URI: exports.URI,\n    map: map_,\n    alt: alt_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Extend = {\n    URI: exports.URI,\n    map: map_,\n    extend: extend_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.ChainRec = {\n    URI: exports.URI,\n    map: map_,\n    ap: ap_,\n    chain: chain_,\n    chainRec: chainRec_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.MonadThrow = {\n    URI: exports.URI,\n    map: map_,\n    ap: ap_,\n    of: exports.of,\n    chain: chain_,\n    throwError: exports.throwError\n};\n/**\n * @category instances\n * @since 2.0.0\n */\nfunction getValidationMonoid(SE, SA) {\n    return {\n        concat: getValidationSemigroup(SE, SA).concat,\n        empty: exports.right(SA.empty)\n    };\n}\nexports.getValidationMonoid = getValidationMonoid;\n/**\n * @category instances\n * @since 2.0.0\n */\nexports.either = {\n    URI: exports.URI,\n    map: map_,\n    of: exports.of,\n    ap: ap_,\n    chain: chain_,\n    reduce: reduce_,\n    foldMap: foldMap_,\n    reduceRight: reduceRight_,\n    traverse: traverse_,\n    sequence: exports.sequence,\n    bimap: bimap_,\n    mapLeft: mapLeft_,\n    alt: alt_,\n    extend: extend_,\n    chainRec: chainRec_,\n    throwError: exports.throwError\n};\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * Default value for the `onError` argument of `tryCatch`\n *\n * @since 2.0.0\n */\nfunction toError(e) {\n    return e instanceof Error ? e : new Error(String(e));\n}\nexports.toError = toError;\n/**\n * @since 2.0.0\n */\nfunction elem(E) {\n    return function (a, ma) { return (exports.isLeft(ma) ? false : E.equals(a, ma.right)); };\n}\nexports.elem = elem;\n/**\n * Returns `false` if `Left` or returns the result of the application of the given predicate to the `Right` value.\n *\n * @example\n * import { exists, left, right } from 'fp-ts/Either'\n *\n * const gt2 = exists((n: number) => n > 2)\n *\n * assert.strictEqual(gt2(left('a')), false)\n * assert.strictEqual(gt2(right(1)), false)\n * assert.strictEqual(gt2(right(3)), true)\n *\n * @since 2.0.0\n */\nfunction exists(predicate) {\n    return function (ma) { return (exports.isLeft(ma) ? false : predicate(ma.right)); };\n}\nexports.exists = exists;\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.9.0\n */\nexports.Do = \n/*#__PURE__*/\nexports.of({});\n/**\n * @since 2.8.0\n */\nvar bindTo = function (name) {\n    return exports.map(function_1.bindTo_(name));\n};\nexports.bindTo = bindTo;\n/**\n * @since 2.8.0\n */\nvar bindW = function (name, f) {\n    return exports.chainW(function (a) {\n        return function_1.pipe(f(a), exports.map(function (b) { return function_1.bind_(a, name, b); }));\n    });\n};\nexports.bindW = bindW;\n/**\n * @since 2.8.0\n */\nexports.bind = exports.bindW;\n// -------------------------------------------------------------------------------------\n// pipeable sequence S\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.8.0\n */\nvar apSW = function (name, fb) {\n    return function_1.flow(exports.map(function (a) { return function (b) { return function_1.bind_(a, name, b); }; }), exports.apW(fb));\n};\nexports.apSW = apSW;\n/**\n * @since 2.8.0\n */\nexports.apS = exports.apSW;\n// -------------------------------------------------------------------------------------\n// array utils\n// -------------------------------------------------------------------------------------\n/**\n *\n * @since 2.9.0\n */\nvar traverseArrayWithIndex = function (f) { return function (arr) {\n    // tslint:disable-next-line: readonly-array\n    var result = [];\n    for (var i = 0; i < arr.length; i++) {\n        var e = f(i, arr[i]);\n        if (e._tag === 'Left') {\n            return e;\n        }\n        result.push(e.right);\n    }\n    return exports.right(result);\n}; };\nexports.traverseArrayWithIndex = traverseArrayWithIndex;\n/**\n * map an array using provided function to Either then transform to Either of the array\n * this function have the same behavior of `A.traverse(E.either)` but it's optimized and perform better\n *\n * @example\n *\n *\n * import { traverseArray, left, right, fromPredicate } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import * as A from 'fp-ts/Array'\n *\n * const arr = A.range(0, 10)\n * assert.deepStrictEqual(\n *   pipe(\n *     arr,\n *     traverseArray((x) => right(x))\n *   ),\n *   right(arr)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     arr,\n *     traverseArray(\n *       fromPredicate(\n *         (x) => x > 5,\n *         () => 'a'\n *       )\n *     )\n *   ),\n *   left('a')\n * )\n * @since 2.9.0\n */\nvar traverseArray = function (f) { return exports.traverseArrayWithIndex(function (_, a) { return f(a); }); };\nexports.traverseArray = traverseArray;\n/**\n * convert an array of either to an either of array\n * this function have the same behavior of `A.sequence(E.either)` but it's optimized and perform better\n *\n * @example\n *\n * import { sequenceArray, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import * as A from 'fp-ts/Array'\n *\n * const arr = A.range(0, 10)\n * assert.deepStrictEqual(pipe(arr, A.map(right), sequenceArray), right(arr))\n * assert.deepStrictEqual(pipe(arr, A.map(right), A.cons(left('Error')), sequenceArray), left('Error'))\n *\n * @since 2.9.0\n */\nexports.sequenceArray = \n/*#__PURE__*/\nexports.traverseArray(function_1.identity);\n"],"mappings":"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AAG,CAACE,CAAD,CAAP,CAAT;;MACA,IAAIpF,CAAC,CAACD,IAAF,KAAW,MAAf,EAAuB;QACnB,OAAOC,CAAP;MACH;;MACDmF,MAAM,CAACE,IAAP,CAAYrF,CAAC,CAACrC,KAAd;IACH;;IACD,OAAOhD,OAAO,CAACgD,KAAR,CAAcwH,MAAd,CAAP;EACH,CAX2C;AAWxC,CAXJ;;AAYAxK,OAAO,CAACsD,sBAAR,GAAiCA,sBAAjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAID,aAAa,GAAG,UAAUkC,CAAV,EAAa;EAAE,OAAOvF,OAAO,CAACsD,sBAAR,CAA+B,UAAUqH,CAAV,EAAarF,CAAb,EAAgB;IAAE,OAAOC,CAAC,CAACD,CAAD,CAAR;EAAc,CAA/D,CAAP;AAA0E,CAA7G;;AACAtF,OAAO,CAACqD,aAAR,GAAwBA,aAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACArD,OAAO,CAACoD,aAAR,GACA,aACApD,OAAO,CAACqD,aAAR,CAAsB6B,UAAU,CAACiD,QAAjC,CAFA"},"metadata":{},"sourceType":"script"}