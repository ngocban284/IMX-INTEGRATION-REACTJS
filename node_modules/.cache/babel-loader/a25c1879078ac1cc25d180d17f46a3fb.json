{"ast":null,"code":"/**\n * If a type `A` can form a `Semigroup` it has an **associative** binary operation.\n *\n * ```ts\n * interface Semigroup<A> {\n *   readonly concat: (x: A, y: A) => A\n * }\n * ```\n *\n * Associativity means the following equality must hold for any choice of `x`, `y`, and `z`.\n *\n * ```ts\n * concat(x, concat(y, z)) = concat(concat(x, y), z)\n * ```\n *\n * A common example of a semigroup is the type `string` with the operation `+`.\n *\n * ```ts\n * import { Semigroup } from 'fp-ts/Semigroup'\n *\n * const semigroupString: Semigroup<string> = {\n *   concat: (x, y) => x + y\n * }\n *\n * const x = 'x'\n * const y = 'y'\n * const z = 'z'\n *\n * semigroupString.concat(x, y) // 'xy'\n *\n * semigroupString.concat(x, semigroupString.concat(y, z)) // 'xyz'\n *\n * semigroupString.concat(semigroupString.concat(x, y), z) // 'xyz'\n * ```\n *\n * *Adapted from https://typelevel.org/cats*\n *\n * @since 2.0.0\n */\nimport { identity } from './function';\nimport { max, min } from './Ord';\nexport function fold(S) {\n  return function (startWith, as) {\n    if (as === undefined) {\n      var foldS_1 = fold(S);\n      return function (as) {\n        return foldS_1(startWith, as);\n      };\n    }\n\n    return as.reduce(S.concat, startWith);\n  };\n}\n/**\n * Always return the first argument.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.getFirstSemigroup<number>().concat(1, 2), 1)\n *\n * @category instances\n * @since 2.0.0\n */\n\nexport function getFirstSemigroup() {\n  return {\n    concat: identity\n  };\n}\n/**\n * Always return the last argument.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.getLastSemigroup<number>().concat(1, 2), 2)\n *\n * @category instances\n * @since 2.0.0\n */\n\nexport function getLastSemigroup() {\n  return {\n    concat: function (_, y) {\n      return y;\n    }\n  };\n}\n/**\n * Given a tuple of semigroups returns a semigroup for the tuple.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * const S1 = S.getTupleSemigroup(S.semigroupString, S.semigroupSum)\n * assert.deepStrictEqual(S1.concat(['a', 1], ['b', 2]), ['ab', 3])\n *\n * const S2 = S.getTupleSemigroup(S.semigroupString, S.semigroupSum, S.semigroupAll)\n * assert.deepStrictEqual(S2.concat(['a', 1, true], ['b', 2, false]), ['ab', 3, false])\n *\n * @category instances\n * @since 2.0.0\n */\n\nexport function getTupleSemigroup() {\n  var semigroups = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    semigroups[_i] = arguments[_i];\n  }\n\n  return {\n    concat: function (x, y) {\n      return semigroups.map(function (s, i) {\n        return s.concat(x[i], y[i]);\n      });\n    }\n  };\n}\n/**\n * The dual of a `Semigroup`, obtained by swapping the arguments of `concat`.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.getDualSemigroup(S.semigroupString).concat('a', 'b'), 'ba')\n *\n * @category instances\n * @since 2.0.0\n */\n\nexport function getDualSemigroup(S) {\n  return {\n    concat: function (x, y) {\n      return S.concat(y, x);\n    }\n  };\n}\n/**\n * Unary functions form a semigroup as long as you can provide a semigroup for the codomain.\n *\n * @example\n * import { Predicate } from 'fp-ts/function'\n * import * as S from 'fp-ts/Semigroup'\n *\n * const f: Predicate<number> = (n) => n <= 2\n * const g: Predicate<number> = (n) => n >= 0\n *\n * const S1 = S.getFunctionSemigroup(S.semigroupAll)<number>()\n *\n * assert.deepStrictEqual(S1.concat(f, g)(1), true)\n * assert.deepStrictEqual(S1.concat(f, g)(3), false)\n *\n * const S2 = S.getFunctionSemigroup(S.semigroupAny)<number>()\n *\n * assert.deepStrictEqual(S2.concat(f, g)(1), true)\n * assert.deepStrictEqual(S2.concat(f, g)(3), true)\n *\n * @category instances\n * @since 2.0.0\n */\n\nexport function getFunctionSemigroup(S) {\n  return function () {\n    return {\n      concat: function (f, g) {\n        return function (a) {\n          return S.concat(f(a), g(a));\n        };\n      }\n    };\n  };\n}\n/**\n * Given a struct of semigroups returns a semigroup for the struct.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * interface Point {\n *   readonly x: number\n *   readonly y: number\n * }\n *\n * const semigroupPoint = S.getStructSemigroup<Point>({\n *   x: S.semigroupSum,\n *   y: S.semigroupSum\n * })\n *\n * assert.deepStrictEqual(semigroupPoint.concat({ x: 1, y: 2 }, { x: 3, y: 4 }), { x: 4, y: 6 })\n *\n * @category instances\n * @since 2.0.0\n */\n\nexport function getStructSemigroup(semigroups) {\n  return {\n    concat: function (x, y) {\n      var r = {};\n\n      for (var _i = 0, _a = Object.keys(semigroups); _i < _a.length; _i++) {\n        var key = _a[_i];\n        r[key] = semigroups[key].concat(x[key], y[key]);\n      }\n\n      return r;\n    }\n  };\n}\n/**\n * Get a semigroup where `concat` will return the minimum, based on the provided order.\n *\n * @example\n * import * as O from 'fp-ts/Ord'\n * import * as S from 'fp-ts/Semigroup'\n *\n * const S1 = S.getMeetSemigroup(O.ordNumber)\n *\n * assert.deepStrictEqual(S1.concat(1, 2), 1)\n *\n * @category instances\n * @since 2.0.0\n */\n\nexport function getMeetSemigroup(O) {\n  return {\n    concat: min(O)\n  };\n}\n/**\n * Get a semigroup where `concat` will return the maximum, based on the provided order.\n *\n * @example\n * import * as O from 'fp-ts/Ord'\n * import * as S from 'fp-ts/Semigroup'\n *\n * const S1 = S.getJoinSemigroup(O.ordNumber)\n *\n * assert.deepStrictEqual(S1.concat(1, 2), 2)\n *\n * @category instances\n * @since 2.0.0\n */\n\nexport function getJoinSemigroup(O) {\n  return {\n    concat: max(O)\n  };\n}\n/**\n * Return a semigroup for objects, preserving their type.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * interface Person {\n *   name: string\n *   age: number\n * }\n *\n * const S1 = S.getObjectSemigroup<Person>()\n * assert.deepStrictEqual(S1.concat({ name: 'name', age: 23 }, { name: 'name', age: 24 }), { name: 'name', age: 24 })\n *\n * @category instances\n * @since 2.0.0\n */\n\nexport function getObjectSemigroup() {\n  return {\n    concat: function (x, y) {\n      return Object.assign({}, x, y);\n    }\n  };\n}\n/**\n * `boolean` semigroup under conjunction.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.semigroupAll.concat(true, true), true)\n * assert.deepStrictEqual(S.semigroupAll.concat(true, false), false)\n *\n * @category instances\n * @since 2.0.0\n */\n\nexport var semigroupAll = {\n  concat: function (x, y) {\n    return x && y;\n  }\n};\n/**\n * `boolean` semigroup under disjunction.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.semigroupAny.concat(true, true), true)\n * assert.deepStrictEqual(S.semigroupAny.concat(true, false), true)\n * assert.deepStrictEqual(S.semigroupAny.concat(false, false), false)\n *\n * @category instances\n * @since 2.0.0\n */\n\nexport var semigroupAny = {\n  concat: function (x, y) {\n    return x || y;\n  }\n};\n/**\n * `number` semigroup under addition.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.semigroupSum.concat(2, 3), 5)\n *\n * @category instances\n * @since 2.0.0\n */\n\nexport var semigroupSum = {\n  concat: function (x, y) {\n    return x + y;\n  }\n};\n/**\n * `number` semigroup under multiplication.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.semigroupProduct.concat(2, 3), 6)\n *\n * @category instances\n * @since 2.0.0\n */\n\nexport var semigroupProduct = {\n  concat: function (x, y) {\n    return x * y;\n  }\n};\n/**\n * `string` semigroup under concatenation.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.semigroupString.concat('a', 'b'), 'ab')\n *\n * @category instances\n * @since 2.0.0\n */\n\nexport var semigroupString = {\n  concat: function (x, y) {\n    return x + y;\n  }\n};\n/**\n * @category instances\n * @since 2.0.0\n */\n\nexport var semigroupVoid = {\n  concat: function () {\n    return undefined;\n  }\n};\n/**\n * You can glue items between and stay associative.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * const S1 = S.getIntercalateSemigroup(' ')(S.semigroupString)\n *\n * assert.strictEqual(S1.concat('a', 'b'), 'a b')\n * assert.strictEqual(S1.concat(S1.concat('a', 'b'), 'c'), S1.concat('a', S1.concat('b', 'c')))\n *\n * @category instances\n * @since 2.5.0\n */\n\nexport function getIntercalateSemigroup(a) {\n  return function (S) {\n    return {\n      concat: function (x, y) {\n        return S.concat(x, S.concat(a, y));\n      }\n    };\n  };\n}","map":{"version":3,"names":["identity","max","min","fold","S","startWith","as","undefined","foldS_1","reduce","concat","getFirstSemigroup","getLastSemigroup","_","y","getTupleSemigroup","semigroups","_i","arguments","length","x","map","s","i","getDualSemigroup","getFunctionSemigroup","f","g","a","getStructSemigroup","r","_a","Object","keys","key","getMeetSemigroup","O","getJoinSemigroup","getObjectSemigroup","assign","semigroupAll","semigroupAny","semigroupSum","semigroupProduct","semigroupString","semigroupVoid","getIntercalateSemigroup"],"sources":["/Users/ngocban/Desktop/imx-integration-reactjs/node_modules/fp-ts/es6/Semigroup.js"],"sourcesContent":["/**\n * If a type `A` can form a `Semigroup` it has an **associative** binary operation.\n *\n * ```ts\n * interface Semigroup<A> {\n *   readonly concat: (x: A, y: A) => A\n * }\n * ```\n *\n * Associativity means the following equality must hold for any choice of `x`, `y`, and `z`.\n *\n * ```ts\n * concat(x, concat(y, z)) = concat(concat(x, y), z)\n * ```\n *\n * A common example of a semigroup is the type `string` with the operation `+`.\n *\n * ```ts\n * import { Semigroup } from 'fp-ts/Semigroup'\n *\n * const semigroupString: Semigroup<string> = {\n *   concat: (x, y) => x + y\n * }\n *\n * const x = 'x'\n * const y = 'y'\n * const z = 'z'\n *\n * semigroupString.concat(x, y) // 'xy'\n *\n * semigroupString.concat(x, semigroupString.concat(y, z)) // 'xyz'\n *\n * semigroupString.concat(semigroupString.concat(x, y), z) // 'xyz'\n * ```\n *\n * *Adapted from https://typelevel.org/cats*\n *\n * @since 2.0.0\n */\nimport { identity } from './function';\nimport { max, min } from './Ord';\nexport function fold(S) {\n    return function (startWith, as) {\n        if (as === undefined) {\n            var foldS_1 = fold(S);\n            return function (as) { return foldS_1(startWith, as); };\n        }\n        return as.reduce(S.concat, startWith);\n    };\n}\n/**\n * Always return the first argument.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.getFirstSemigroup<number>().concat(1, 2), 1)\n *\n * @category instances\n * @since 2.0.0\n */\nexport function getFirstSemigroup() {\n    return { concat: identity };\n}\n/**\n * Always return the last argument.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.getLastSemigroup<number>().concat(1, 2), 2)\n *\n * @category instances\n * @since 2.0.0\n */\nexport function getLastSemigroup() {\n    return { concat: function (_, y) { return y; } };\n}\n/**\n * Given a tuple of semigroups returns a semigroup for the tuple.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * const S1 = S.getTupleSemigroup(S.semigroupString, S.semigroupSum)\n * assert.deepStrictEqual(S1.concat(['a', 1], ['b', 2]), ['ab', 3])\n *\n * const S2 = S.getTupleSemigroup(S.semigroupString, S.semigroupSum, S.semigroupAll)\n * assert.deepStrictEqual(S2.concat(['a', 1, true], ['b', 2, false]), ['ab', 3, false])\n *\n * @category instances\n * @since 2.0.0\n */\nexport function getTupleSemigroup() {\n    var semigroups = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        semigroups[_i] = arguments[_i];\n    }\n    return {\n        concat: function (x, y) { return semigroups.map(function (s, i) { return s.concat(x[i], y[i]); }); }\n    };\n}\n/**\n * The dual of a `Semigroup`, obtained by swapping the arguments of `concat`.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.getDualSemigroup(S.semigroupString).concat('a', 'b'), 'ba')\n *\n * @category instances\n * @since 2.0.0\n */\nexport function getDualSemigroup(S) {\n    return {\n        concat: function (x, y) { return S.concat(y, x); }\n    };\n}\n/**\n * Unary functions form a semigroup as long as you can provide a semigroup for the codomain.\n *\n * @example\n * import { Predicate } from 'fp-ts/function'\n * import * as S from 'fp-ts/Semigroup'\n *\n * const f: Predicate<number> = (n) => n <= 2\n * const g: Predicate<number> = (n) => n >= 0\n *\n * const S1 = S.getFunctionSemigroup(S.semigroupAll)<number>()\n *\n * assert.deepStrictEqual(S1.concat(f, g)(1), true)\n * assert.deepStrictEqual(S1.concat(f, g)(3), false)\n *\n * const S2 = S.getFunctionSemigroup(S.semigroupAny)<number>()\n *\n * assert.deepStrictEqual(S2.concat(f, g)(1), true)\n * assert.deepStrictEqual(S2.concat(f, g)(3), true)\n *\n * @category instances\n * @since 2.0.0\n */\nexport function getFunctionSemigroup(S) {\n    return function () { return ({\n        concat: function (f, g) { return function (a) { return S.concat(f(a), g(a)); }; }\n    }); };\n}\n/**\n * Given a struct of semigroups returns a semigroup for the struct.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * interface Point {\n *   readonly x: number\n *   readonly y: number\n * }\n *\n * const semigroupPoint = S.getStructSemigroup<Point>({\n *   x: S.semigroupSum,\n *   y: S.semigroupSum\n * })\n *\n * assert.deepStrictEqual(semigroupPoint.concat({ x: 1, y: 2 }, { x: 3, y: 4 }), { x: 4, y: 6 })\n *\n * @category instances\n * @since 2.0.0\n */\nexport function getStructSemigroup(semigroups) {\n    return {\n        concat: function (x, y) {\n            var r = {};\n            for (var _i = 0, _a = Object.keys(semigroups); _i < _a.length; _i++) {\n                var key = _a[_i];\n                r[key] = semigroups[key].concat(x[key], y[key]);\n            }\n            return r;\n        }\n    };\n}\n/**\n * Get a semigroup where `concat` will return the minimum, based on the provided order.\n *\n * @example\n * import * as O from 'fp-ts/Ord'\n * import * as S from 'fp-ts/Semigroup'\n *\n * const S1 = S.getMeetSemigroup(O.ordNumber)\n *\n * assert.deepStrictEqual(S1.concat(1, 2), 1)\n *\n * @category instances\n * @since 2.0.0\n */\nexport function getMeetSemigroup(O) {\n    return {\n        concat: min(O)\n    };\n}\n/**\n * Get a semigroup where `concat` will return the maximum, based on the provided order.\n *\n * @example\n * import * as O from 'fp-ts/Ord'\n * import * as S from 'fp-ts/Semigroup'\n *\n * const S1 = S.getJoinSemigroup(O.ordNumber)\n *\n * assert.deepStrictEqual(S1.concat(1, 2), 2)\n *\n * @category instances\n * @since 2.0.0\n */\nexport function getJoinSemigroup(O) {\n    return {\n        concat: max(O)\n    };\n}\n/**\n * Return a semigroup for objects, preserving their type.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * interface Person {\n *   name: string\n *   age: number\n * }\n *\n * const S1 = S.getObjectSemigroup<Person>()\n * assert.deepStrictEqual(S1.concat({ name: 'name', age: 23 }, { name: 'name', age: 24 }), { name: 'name', age: 24 })\n *\n * @category instances\n * @since 2.0.0\n */\nexport function getObjectSemigroup() {\n    return {\n        concat: function (x, y) { return Object.assign({}, x, y); }\n    };\n}\n/**\n * `boolean` semigroup under conjunction.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.semigroupAll.concat(true, true), true)\n * assert.deepStrictEqual(S.semigroupAll.concat(true, false), false)\n *\n * @category instances\n * @since 2.0.0\n */\nexport var semigroupAll = {\n    concat: function (x, y) { return x && y; }\n};\n/**\n * `boolean` semigroup under disjunction.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.semigroupAny.concat(true, true), true)\n * assert.deepStrictEqual(S.semigroupAny.concat(true, false), true)\n * assert.deepStrictEqual(S.semigroupAny.concat(false, false), false)\n *\n * @category instances\n * @since 2.0.0\n */\nexport var semigroupAny = {\n    concat: function (x, y) { return x || y; }\n};\n/**\n * `number` semigroup under addition.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.semigroupSum.concat(2, 3), 5)\n *\n * @category instances\n * @since 2.0.0\n */\nexport var semigroupSum = {\n    concat: function (x, y) { return x + y; }\n};\n/**\n * `number` semigroup under multiplication.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.semigroupProduct.concat(2, 3), 6)\n *\n * @category instances\n * @since 2.0.0\n */\nexport var semigroupProduct = {\n    concat: function (x, y) { return x * y; }\n};\n/**\n * `string` semigroup under concatenation.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.semigroupString.concat('a', 'b'), 'ab')\n *\n * @category instances\n * @since 2.0.0\n */\nexport var semigroupString = {\n    concat: function (x, y) { return x + y; }\n};\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var semigroupVoid = {\n    concat: function () { return undefined; }\n};\n/**\n * You can glue items between and stay associative.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * const S1 = S.getIntercalateSemigroup(' ')(S.semigroupString)\n *\n * assert.strictEqual(S1.concat('a', 'b'), 'a b')\n * assert.strictEqual(S1.concat(S1.concat('a', 'b'), 'c'), S1.concat('a', S1.concat('b', 'c')))\n *\n * @category instances\n * @since 2.5.0\n */\nexport function getIntercalateSemigroup(a) {\n    return function (S) { return ({\n        concat: function (x, y) { return S.concat(x, S.concat(a, y)); }\n    }); };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,QAAT,QAAyB,YAAzB;AACA,SAASC,GAAT,EAAcC,GAAd,QAAyB,OAAzB;AACA,OAAO,SAASC,IAAT,CAAcC,CAAd,EAAiB;EACpB,OAAO,UAAUC,SAAV,EAAqBC,EAArB,EAAyB;IAC5B,IAAIA,EAAE,KAAKC,SAAX,EAAsB;MAClB,IAAIC,OAAO,GAAGL,IAAI,CAACC,CAAD,CAAlB;MACA,OAAO,UAAUE,EAAV,EAAc;QAAE,OAAOE,OAAO,CAACH,SAAD,EAAYC,EAAZ,CAAd;MAAgC,CAAvD;IACH;;IACD,OAAOA,EAAE,CAACG,MAAH,CAAUL,CAAC,CAACM,MAAZ,EAAoBL,SAApB,CAAP;EACH,CAND;AAOH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASM,iBAAT,GAA6B;EAChC,OAAO;IAAED,MAAM,EAAEV;EAAV,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASY,gBAAT,GAA4B;EAC/B,OAAO;IAAEF,MAAM,EAAE,UAAUG,CAAV,EAAaC,CAAb,EAAgB;MAAE,OAAOA,CAAP;IAAW;EAAvC,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,iBAAT,GAA6B;EAChC,IAAIC,UAAU,GAAG,EAAjB;;EACA,KAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGC,SAAS,CAACC,MAAhC,EAAwCF,EAAE,EAA1C,EAA8C;IAC1CD,UAAU,CAACC,EAAD,CAAV,GAAiBC,SAAS,CAACD,EAAD,CAA1B;EACH;;EACD,OAAO;IACHP,MAAM,E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"},"metadata":{},"sourceType":"module"}