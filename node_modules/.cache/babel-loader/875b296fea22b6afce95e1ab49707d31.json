{"ast":null,"code":"import * as RS from './ReadonlySet';\n/**\n * @category instances\n * @since 2.0.0\n */\n\nexport var getShow = RS.getShow;\n/**\n * @since 2.0.0\n */\n\nexport var empty = new Set();\n/**\n * @category constructors\n * @since 2.0.0\n */\n// tslint:disable-next-line: readonly-array\n\nexport var toArray = RS.toReadonlyArray;\n/**\n * @category instances\n * @since 2.0.0\n */\n\nexport var getEq = RS.getEq;\n/**\n * @since 2.0.0\n */\n\nexport var some = RS.some;\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var map = RS.map;\n/**\n * @since 2.0.0\n */\n\nexport var every = RS.every;\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation.\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var chain = RS.chain; // TODO: remove non-curried overloading in v3\n\n/**\n * `true` if and only if every element in the first set is an element of the second set\n *\n * @since 2.0.0\n */\n\nexport var subset = RS.isSubset;\nexport function filter(predicate) {\n  return RS.filter(predicate);\n}\nexport function partition(predicate) {\n  return RS.partition(predicate);\n} // TODO: remove non-curried overloading in v3\n\n/**\n * Test if a value is a member of a set\n *\n * @since 2.0.0\n */\n\nexport var elem = RS.elem; // TODO: remove non-curried overloading in v3\n\n/**\n * Form the union of two sets\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var union = RS.union; // TODO: remove non-curried overloading in v3\n\n/**\n * The set of elements which are in both the first and second set\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var intersection = RS.intersection;\n/**\n * @since 2.0.0\n */\n\nexport var partitionMap = RS.partitionMap; // TODO: remove non-curried overloading in v3\n\n/**\n * Form the set difference (`x` - `y`)\n *\n * @example\n * import { difference } from 'fp-ts/Set'\n * import { eqNumber } from 'fp-ts/Eq'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe(new Set([1, 2]), difference(eqNumber)(new Set([1, 3]))), new Set([2]))\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var difference = RS.difference;\n/**\n * @category instances\n * @since 2.0.0\n */\n\nexport var getUnionMonoid = RS.getUnionMonoid;\n/**\n * @category instances\n * @since 2.0.0\n */\n\nexport var getIntersectionSemigroup = RS.getIntersectionSemigroup;\n/**\n * @since 2.0.0\n */\n\nexport var reduce = RS.reduce;\n/**\n * @since 2.0.0\n */\n\nexport var foldMap = RS.foldMap;\n/**\n * Create a set with one element\n *\n * @category constructors\n * @since 2.0.0\n */\n\nexport var singleton = RS.singleton;\n/**\n * Insert a value into a set\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var insert = RS.insert;\n/**\n * Delete a value from a set\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var remove = RS.remove;\n/**\n * Checks an element is a member of a set;\n * If yes, removes the value from the set\n * If no, inserts the value to the set\n *\n * @category combinators\n * @since 2.5.0\n */\n\nexport function toggle(E) {\n  var elemE = elem(E);\n  var removeE = remove(E);\n  var insertE = insert(E);\n  return function (a) {\n    return function (set) {\n      return (elemE(a, set) ? removeE : insertE)(a)(set);\n    };\n  };\n}\n/**\n * Create a set from an array\n *\n * @category constructors\n * @since 2.0.0\n */\n// tslint:disable-next-line: readonly-array\n\nexport var fromArray = RS.fromArray;\n/**\n * @category combinators\n * @since 2.0.0\n */\n\nexport var compact = RS.compact;\n/**\n * @since 2.0.0\n */\n\nexport var separate = RS.separate;\n/**\n * @category combinators\n * @since 2.0.0\n */\n\nexport var filterMap = RS.filterMap;","map":{"version":3,"names":["RS","getShow","empty","Set","toArray","toReadonlyArray","getEq","some","map","every","chain","subset","isSubset","filter","predicate","partition","elem","union","intersection","partitionMap","difference","getUnionMonoid","getIntersectionSemigroup","reduce","foldMap","singleton","insert","remove","toggle","E","elemE","removeE","insertE","a","set","fromArray","compact","separate","filterMap"],"sources":["/Users/ngocban/Desktop/imx-integration-reactjs/node_modules/fp-ts/es6/Set.js"],"sourcesContent":["import * as RS from './ReadonlySet';\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var getShow = RS.getShow;\n/**\n * @since 2.0.0\n */\nexport var empty = new Set();\n/**\n * @category constructors\n * @since 2.0.0\n */\n// tslint:disable-next-line: readonly-array\nexport var toArray = RS.toReadonlyArray;\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var getEq = RS.getEq;\n/**\n * @since 2.0.0\n */\nexport var some = RS.some;\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var map = RS.map;\n/**\n * @since 2.0.0\n */\nexport var every = RS.every;\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var chain = RS.chain;\n// TODO: remove non-curried overloading in v3\n/**\n * `true` if and only if every element in the first set is an element of the second set\n *\n * @since 2.0.0\n */\nexport var subset = RS.isSubset;\nexport function filter(predicate) {\n    return RS.filter(predicate);\n}\nexport function partition(predicate) {\n    return RS.partition(predicate);\n}\n// TODO: remove non-curried overloading in v3\n/**\n * Test if a value is a member of a set\n *\n * @since 2.0.0\n */\nexport var elem = RS.elem;\n// TODO: remove non-curried overloading in v3\n/**\n * Form the union of two sets\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var union = RS.union;\n// TODO: remove non-curried overloading in v3\n/**\n * The set of elements which are in both the first and second set\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var intersection = RS.intersection;\n/**\n * @since 2.0.0\n */\nexport var partitionMap = RS.partitionMap;\n// TODO: remove non-curried overloading in v3\n/**\n * Form the set difference (`x` - `y`)\n *\n * @example\n * import { difference } from 'fp-ts/Set'\n * import { eqNumber } from 'fp-ts/Eq'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe(new Set([1, 2]), difference(eqNumber)(new Set([1, 3]))), new Set([2]))\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var difference = RS.difference;\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var getUnionMonoid = RS.getUnionMonoid;\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var getIntersectionSemigroup = RS.getIntersectionSemigroup;\n/**\n * @since 2.0.0\n */\nexport var reduce = RS.reduce;\n/**\n * @since 2.0.0\n */\nexport var foldMap = RS.foldMap;\n/**\n * Create a set with one element\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var singleton = RS.singleton;\n/**\n * Insert a value into a set\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var insert = RS.insert;\n/**\n * Delete a value from a set\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var remove = RS.remove;\n/**\n * Checks an element is a member of a set;\n * If yes, removes the value from the set\n * If no, inserts the value to the set\n *\n * @category combinators\n * @since 2.5.0\n */\nexport function toggle(E) {\n    var elemE = elem(E);\n    var removeE = remove(E);\n    var insertE = insert(E);\n    return function (a) { return function (set) { return (elemE(a, set) ? removeE : insertE)(a)(set); }; };\n}\n/**\n * Create a set from an array\n *\n * @category constructors\n * @since 2.0.0\n */\n// tslint:disable-next-line: readonly-array\nexport var fromArray = RS.fromArray;\n/**\n * @category combinators\n * @since 2.0.0\n */\nexport var compact = RS.compact;\n/**\n * @since 2.0.0\n */\nexport var separate = RS.separate;\n/**\n * @category combinators\n * @since 2.0.0\n */\nexport var filterMap = RS.filterMap;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}