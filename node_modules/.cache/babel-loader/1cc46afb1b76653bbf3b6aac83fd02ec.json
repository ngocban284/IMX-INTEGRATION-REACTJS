{"ast":null,"code":"import writeByte from '../byte/write';\nimport readBuffer from './read';\n/**\n * Modifies the buffer's bits to equal newBits starting at bitOffset.\n *\n * @example\n * modifyBuffer(buffer, [0,0,1,0], 0) => buffer was modified\n *\n * @param {Buffer} buffer the buffer to modify\n * @param {Array} bits the bits to insert\n * @param {Number} offset where to start (in bits)\n * @returns {undefined}\n */\n\nexport default (function (buffer, bits, offset) {\n  if (offset === void 0) {\n    offset = 0;\n  }\n\n  var start = Math.floor(offset / 8);\n  var end = Math.ceil((offset + bits.length) / 8);\n  var subBuffer = buffer.slice(start, end);\n  var byteData = readBuffer(subBuffer);\n  var subOffset = offset % 8;\n\n  for (var i = 0; i < bits.length; i++) byteData[subOffset++] = bits[i];\n\n  var length = end - start;\n\n  for (var i_1 = 0; i_1 < length; i_1++) subBuffer[i_1] = writeByte(byteData.slice(i_1 * 8, (i_1 + 1) * 8));\n});","map":{"version":3,"names":["writeByte","readBuffer","buffer","bits","offset","start","Math","floor","end","ceil","length","subBuffer","slice","byteData","subOffset","i","i_1"],"sources":["/Users/ngocban/Desktop/imx-integration-reactjs/node_modules/bitwise/esm/buffer/modify.js"],"sourcesContent":["import writeByte from '../byte/write';\nimport readBuffer from './read';\n/**\n * Modifies the buffer's bits to equal newBits starting at bitOffset.\n *\n * @example\n * modifyBuffer(buffer, [0,0,1,0], 0) => buffer was modified\n *\n * @param {Buffer} buffer the buffer to modify\n * @param {Array} bits the bits to insert\n * @param {Number} offset where to start (in bits)\n * @returns {undefined}\n */\nexport default (function (buffer, bits, offset) {\n    if (offset === void 0) { offset = 0; }\n    var start = Math.floor(offset / 8);\n    var end = Math.ceil((offset + bits.length) / 8);\n    var subBuffer = buffer.slice(start, end);\n    var byteData = readBuffer(subBuffer);\n    var subOffset = offset % 8;\n    for (var i = 0; i < bits.length; i++)\n        byteData[subOffset++] = bits[i];\n    var length = end - start;\n    for (var i_1 = 0; i_1 < length; i_1++)\n        subBuffer[i_1] = writeByte(byteData.slice(i_1 * 8, (i_1 + 1) * 8));\n});\n"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,eAAtB;AACA,OAAOC,UAAP,MAAuB,QAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,gBAAgB,UAAUC,MAAV,EAAkBC,IAAlB,EAAwBC,MAAxB,EAAgC;EAC5C,IAAIA,MAAM,KAAK,KAAK,CAApB,EAAuB;IAAEA,MAAM,GAAG,CAAT;EAAa;;EACtC,IAAIC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,GAAG,CAApB,CAAZ;EACA,IAAII,GAAG,GAAGF,IAAI,CAACG,IAAL,CAAU,CAACL,MAAM,GAAGD,IAAI,CAACO,MAAf,IAAyB,CAAnC,CAAV;EACA,IAAIC,SAAS,GAAGT,MAAM,CAACU,KAAP,CAAaP,KAAb,EAAoBG,GAApB,CAAhB;EACA,IAAIK,QAAQ,GAAGZ,UAAU,CAACU,SAAD,CAAzB;EACA,IAAIG,SAAS,GAAGV,MAAM,GAAG,CAAzB;;EACA,KAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,IAAI,CAACO,MAAzB,EAAiCK,CAAC,EAAlC,EACIF,QAAQ,CAACC,SAAS,EAAV,CAAR,GAAwBX,IAAI,CAACY,CAAD,CAA5B;;EACJ,IAAIL,MAAM,GAAGF,GAAG,GAAGH,KAAnB;;EACA,KAAK,IAAIW,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGN,MAAxB,EAAgCM,GAAG,EAAnC,EACIL,SAAS,CAACK,GAAD,CAAT,GAAiBhB,SAAS,CAACa,QAAQ,CAACD,KAAT,CAAeI,GAAG,GAAG,CAArB,EAAwB,CAACA,GAAG,GAAG,CAAP,IAAY,CAApC,CAAD,CAA1B;AACP,CAZD"},"metadata":{},"sourceType":"module"}