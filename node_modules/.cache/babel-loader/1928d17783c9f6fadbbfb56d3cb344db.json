{"ast":null,"code":"\"use strict\";\n\nimport { ethers } from \"ethers\"; // @TODO: Keep a per-NonceManager pool of sent but unmined transactions for\n//        rebroadcasting, in case we overrun the transaction pool\n\nexport class NonceManager extends ethers.Signer {\n  constructor(signer) {\n    super();\n    this._deltaCount = 0;\n    ethers.utils.defineReadOnly(this, \"signer\", signer);\n    ethers.utils.defineReadOnly(this, \"provider\", signer.provider || null);\n  }\n\n  connect(provider) {\n    return new NonceManager(this.signer.connect(provider));\n  }\n\n  getAddress() {\n    return this.signer.getAddress();\n  }\n\n  getTransactionCount(blockTag) {\n    if (blockTag === \"pending\") {\n      if (!this._initialPromise) {\n        this._initialPromise = this.signer.getTransactionCount(\"pending\");\n      }\n\n      const deltaCount = this._deltaCount;\n      return this._initialPromise.then(initial => initial + deltaCount);\n    }\n\n    return this.signer.getTransactionCount(blockTag);\n  }\n\n  setTransactionCount(transactionCount) {\n    this._initialPromise = Promise.resolve(transactionCount).then(nonce => {\n      return ethers.BigNumber.from(nonce).toNumber();\n    });\n    this._deltaCount = 0;\n  }\n\n  incrementTransactionCount(count) {\n    this._deltaCount += count ? count : 1;\n  }\n\n  signMessage(message) {\n    return this.signer.signMessage(message);\n    ;\n  }\n\n  signTransaction(transaction) {\n    return this.signer.signTransaction(transaction);\n  }\n\n  sendTransaction(transaction) {\n    if (transaction.nonce == null) {\n      transaction = ethers.utils.shallowCopy(transaction);\n      transaction.nonce = this.getTransactionCount(\"pending\");\n      this.incrementTransactionCount();\n    } else {\n      this.setTransactionCount(transaction.nonce);\n    }\n\n    return this.signer.sendTransaction(transaction).then(tx => {\n      return tx;\n    });\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;AAEA,SAASA,MAAT,QAAuB,QAAvB,C,CAEA;AACA;;AAEA,OAAM,MAAOC,YAAP,SAA4BD,MAAM,CAACE,MAAnC,CAAyC;EAM3CC,YAAYC,MAAZ,EAAiC;IAC7B;IACA,KAAKC,WAAL,GAAmB,CAAnB;IACAL,MAAM,CAACM,KAAP,CAAaC,cAAb,CAA4B,IAA5B,EAAkC,QAAlC,EAA4CH,MAA5C;IACAJ,MAAM,CAACM,KAAP,CAAaC,cAAb,CAA4B,IAA5B,EAAkC,UAAlC,EAA8CH,MAAM,CAACI,QAAP,IAAmB,IAAjE;EACH;;EAEDC,OAAO,CAACD,QAAD,EAAoC;IACvC,OAAO,IAAIP,YAAJ,CAAiB,KAAKG,MAAL,CAAYK,OAAZ,CAAoBD,QAApB,CAAjB,CAAP;EACH;;EAEDE,UAAU;IACN,OAAO,KAAKN,MAAL,CAAYM,UAAZ,EAAP;EACH;;EAEDC,mBAAmB,CAACC,QAAD,EAAqC;IACpD,IAAIA,QAAQ,KAAK,SAAjB,EAA4B;MACxB,IAAI,CAAC,KAAKC,eAAV,EAA2B;QACvB,KAAKA,eAAL,GAAuB,KAAKT,MAAL,CAAYO,mBAAZ,CAAgC,SAAhC,CAAvB;MACH;;MACD,MAAMG,UAAU,GAAG,KAAKT,WAAxB;MACA,OAAO,KAAKQ,eAAL,CAAqBE,IAArB,CAA2BC,OAAD,IAAcA,OAAO,GAAGF,UAAlD,CAAP;IACH;;IAED,OAAO,KAAKV,MAAL,CAAYO,mBAAZ,CAAgCC,QAAhC,CAAP;EACH;;EAEDK,mBAAmB,CAACC,gBAAD,EAAqE;IACpF,KAAKL,eAAL,GAAuBM,OAAO,CAACC,OAAR,CAAgBF,gBAAhB,EAAkCH,IAAlC,CAAwCM,KAAD,IAAU;MACpE,OAAOrB,MAAM,CAACsB,SAAP,CAAiBC,IAAjB,CAAsBF,KAAtB,EAA6BG,QAA7B,EAAP;IACH,CAFsB,CAAvB;IAGA,KAAKnB,WAAL,GAAmB,CAAnB;EACH;;EAEDoB,yBAAyB,CAACC,KAAD,EAAe;IACpC,KAAKrB,WAAL,IAAqBqB,KAAK,GAAGA,KAAH,GAAU,CAApC;EACH;;EAEDC,WAAW,CAACC,OAAD,EAA+B;IACtC,OAAO,KAAKxB,MAAL,CAAYuB,WAAZ,CAAwBC,OAAxB,CAAP;IAAwC;EAC3C;;EAEDC,eAAe,CAACC,WAAD,EAA0E;IACrF,OAAO,KAAK1B,MAAL,CAAYyB,eAAZ,CAA4BC,WAA5B,CAAP;EACH;;EAEDC,eAAe,CAACD,WAAD,EAA0E;IACrF,IAAIA,WAAW,CAACT,KAAZ,IAAqB,IAAzB,EAA+B;MAC3BS,WAAW,GAAG9B,MAAM,CAACM,KAAP,CAAa0B,WAAb,CAAyBF,WAAzB,CAAd;MACAA,WAAW,CAACT,KAAZ,GAAoB,KAAKV,mBAAL,CAAyB,SAAzB,CAApB;MACA,KAAKc,yBAAL;IACH,CAJD,MAIO;MACH,KAAKR,mBAAL,CAAyBa,WAAW,CAACT,KAArC;IACH;;IAED,OAAO,KAAKjB,MAAL,CAAY2B,eAAZ,CAA4BD,WAA5B,EAAyCf,IAAzC,CAA+CkB,EAAD,IAAO;MACxD,OAAOA,EAAP;IACH,CAFM,CAAP;EAGH;;AAhE0C","names":["ethers","NonceManager","Signer","constructor","signer","_deltaCount","utils","defineReadOnly","provider","connect","getAddress","getTransactionCount","blockTag","_initialPromise","deltaCount","then","initial","setTransactionCount","transactionCount","Promise","resolve","nonce","BigNumber","from","toNumber","incrementTransactionCount","count","signMessage","message","signTransaction","transaction","sendTransaction","shallowCopy","tx"],"sourceRoot":"","sources":["../src.ts/nonce-manager.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}