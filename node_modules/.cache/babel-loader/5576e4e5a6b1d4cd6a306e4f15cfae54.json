{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getIntercalateSemigroup = exports.semigroupVoid = exports.semigroupString = exports.semigroupProduct = exports.semigroupSum = exports.semigroupAny = exports.semigroupAll = exports.getObjectSemigroup = exports.getJoinSemigroup = exports.getMeetSemigroup = exports.getStructSemigroup = exports.getFunctionSemigroup = exports.getDualSemigroup = exports.getTupleSemigroup = exports.getLastSemigroup = exports.getFirstSemigroup = exports.fold = void 0;\n/**\n * If a type `A` can form a `Semigroup` it has an **associative** binary operation.\n *\n * ```ts\n * interface Semigroup<A> {\n *   readonly concat: (x: A, y: A) => A\n * }\n * ```\n *\n * Associativity means the following equality must hold for any choice of `x`, `y`, and `z`.\n *\n * ```ts\n * concat(x, concat(y, z)) = concat(concat(x, y), z)\n * ```\n *\n * A common example of a semigroup is the type `string` with the operation `+`.\n *\n * ```ts\n * import { Semigroup } from 'fp-ts/Semigroup'\n *\n * const semigroupString: Semigroup<string> = {\n *   concat: (x, y) => x + y\n * }\n *\n * const x = 'x'\n * const y = 'y'\n * const z = 'z'\n *\n * semigroupString.concat(x, y) // 'xy'\n *\n * semigroupString.concat(x, semigroupString.concat(y, z)) // 'xyz'\n *\n * semigroupString.concat(semigroupString.concat(x, y), z) // 'xyz'\n * ```\n *\n * *Adapted from https://typelevel.org/cats*\n *\n * @since 2.0.0\n */\n\nvar function_1 = require(\"./function\");\n\nvar Ord_1 = require(\"./Ord\");\n\nfunction fold(S) {\n  return function (startWith, as) {\n    if (as === undefined) {\n      var foldS_1 = fold(S);\n      return function (as) {\n        return foldS_1(startWith, as);\n      };\n    }\n\n    return as.reduce(S.concat, startWith);\n  };\n}\n\nexports.fold = fold;\n/**\n * Always return the first argument.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.getFirstSemigroup<number>().concat(1, 2), 1)\n *\n * @category instances\n * @since 2.0.0\n */\n\nfunction getFirstSemigroup() {\n  return {\n    concat: function_1.identity\n  };\n}\n\nexports.getFirstSemigroup = getFirstSemigroup;\n/**\n * Always return the last argument.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.getLastSemigroup<number>().concat(1, 2), 2)\n *\n * @category instances\n * @since 2.0.0\n */\n\nfunction getLastSemigroup() {\n  return {\n    concat: function (_, y) {\n      return y;\n    }\n  };\n}\n\nexports.getLastSemigroup = getLastSemigroup;\n/**\n * Given a tuple of semigroups returns a semigroup for the tuple.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * const S1 = S.getTupleSemigroup(S.semigroupString, S.semigroupSum)\n * assert.deepStrictEqual(S1.concat(['a', 1], ['b', 2]), ['ab', 3])\n *\n * const S2 = S.getTupleSemigroup(S.semigroupString, S.semigroupSum, S.semigroupAll)\n * assert.deepStrictEqual(S2.concat(['a', 1, true], ['b', 2, false]), ['ab', 3, false])\n *\n * @category instances\n * @since 2.0.0\n */\n\nfunction getTupleSemigroup() {\n  var semigroups = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    semigroups[_i] = arguments[_i];\n  }\n\n  return {\n    concat: function (x, y) {\n      return semigroups.map(function (s, i) {\n        return s.concat(x[i], y[i]);\n      });\n    }\n  };\n}\n\nexports.getTupleSemigroup = getTupleSemigroup;\n/**\n * The dual of a `Semigroup`, obtained by swapping the arguments of `concat`.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.getDualSemigroup(S.semigroupString).concat('a', 'b'), 'ba')\n *\n * @category instances\n * @since 2.0.0\n */\n\nfunction getDualSemigroup(S) {\n  return {\n    concat: function (x, y) {\n      return S.concat(y, x);\n    }\n  };\n}\n\nexports.getDualSemigroup = getDualSemigroup;\n/**\n * Unary functions form a semigroup as long as you can provide a semigroup for the codomain.\n *\n * @example\n * import { Predicate } from 'fp-ts/function'\n * import * as S from 'fp-ts/Semigroup'\n *\n * const f: Predicate<number> = (n) => n <= 2\n * const g: Predicate<number> = (n) => n >= 0\n *\n * const S1 = S.getFunctionSemigroup(S.semigroupAll)<number>()\n *\n * assert.deepStrictEqual(S1.concat(f, g)(1), true)\n * assert.deepStrictEqual(S1.concat(f, g)(3), false)\n *\n * const S2 = S.getFunctionSemigroup(S.semigroupAny)<number>()\n *\n * assert.deepStrictEqual(S2.concat(f, g)(1), true)\n * assert.deepStrictEqual(S2.concat(f, g)(3), true)\n *\n * @category instances\n * @since 2.0.0\n */\n\nfunction getFunctionSemigroup(S) {\n  return function () {\n    return {\n      concat: function (f, g) {\n        return function (a) {\n          return S.concat(f(a), g(a));\n        };\n      }\n    };\n  };\n}\n\nexports.getFunctionSemigroup = getFunctionSemigroup;\n/**\n * Given a struct of semigroups returns a semigroup for the struct.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * interface Point {\n *   readonly x: number\n *   readonly y: number\n * }\n *\n * const semigroupPoint = S.getStructSemigroup<Point>({\n *   x: S.semigroupSum,\n *   y: S.semigroupSum\n * })\n *\n * assert.deepStrictEqual(semigroupPoint.concat({ x: 1, y: 2 }, { x: 3, y: 4 }), { x: 4, y: 6 })\n *\n * @category instances\n * @since 2.0.0\n */\n\nfunction getStructSemigroup(semigroups) {\n  return {\n    concat: function (x, y) {\n      var r = {};\n\n      for (var _i = 0, _a = Object.keys(semigroups); _i < _a.length; _i++) {\n        var key = _a[_i];\n        r[key] = semigroups[key].concat(x[key], y[key]);\n      }\n\n      return r;\n    }\n  };\n}\n\nexports.getStructSemigroup = getStructSemigroup;\n/**\n * Get a semigroup where `concat` will return the minimum, based on the provided order.\n *\n * @example\n * import * as O from 'fp-ts/Ord'\n * import * as S from 'fp-ts/Semigroup'\n *\n * const S1 = S.getMeetSemigroup(O.ordNumber)\n *\n * assert.deepStrictEqual(S1.concat(1, 2), 1)\n *\n * @category instances\n * @since 2.0.0\n */\n\nfunction getMeetSemigroup(O) {\n  return {\n    concat: Ord_1.min(O)\n  };\n}\n\nexports.getMeetSemigroup = getMeetSemigroup;\n/**\n * Get a semigroup where `concat` will return the maximum, based on the provided order.\n *\n * @example\n * import * as O from 'fp-ts/Ord'\n * import * as S from 'fp-ts/Semigroup'\n *\n * const S1 = S.getJoinSemigroup(O.ordNumber)\n *\n * assert.deepStrictEqual(S1.concat(1, 2), 2)\n *\n * @category instances\n * @since 2.0.0\n */\n\nfunction getJoinSemigroup(O) {\n  return {\n    concat: Ord_1.max(O)\n  };\n}\n\nexports.getJoinSemigroup = getJoinSemigroup;\n/**\n * Return a semigroup for objects, preserving their type.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * interface Person {\n *   name: string\n *   age: number\n * }\n *\n * const S1 = S.getObjectSemigroup<Person>()\n * assert.deepStrictEqual(S1.concat({ name: 'name', age: 23 }, { name: 'name', age: 24 }), { name: 'name', age: 24 })\n *\n * @category instances\n * @since 2.0.0\n */\n\nfunction getObjectSemigroup() {\n  return {\n    concat: function (x, y) {\n      return Object.assign({}, x, y);\n    }\n  };\n}\n\nexports.getObjectSemigroup = getObjectSemigroup;\n/**\n * `boolean` semigroup under conjunction.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.semigroupAll.concat(true, true), true)\n * assert.deepStrictEqual(S.semigroupAll.concat(true, false), false)\n *\n * @category instances\n * @since 2.0.0\n */\n\nexports.semigroupAll = {\n  concat: function (x, y) {\n    return x && y;\n  }\n};\n/**\n * `boolean` semigroup under disjunction.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.semigroupAny.concat(true, true), true)\n * assert.deepStrictEqual(S.semigroupAny.concat(true, false), true)\n * assert.deepStrictEqual(S.semigroupAny.concat(false, false), false)\n *\n * @category instances\n * @since 2.0.0\n */\n\nexports.semigroupAny = {\n  concat: function (x, y) {\n    return x || y;\n  }\n};\n/**\n * `number` semigroup under addition.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.semigroupSum.concat(2, 3), 5)\n *\n * @category instances\n * @since 2.0.0\n */\n\nexports.semigroupSum = {\n  concat: function (x, y) {\n    return x + y;\n  }\n};\n/**\n * `number` semigroup under multiplication.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.semigroupProduct.concat(2, 3), 6)\n *\n * @category instances\n * @since 2.0.0\n */\n\nexports.semigroupProduct = {\n  concat: function (x, y) {\n    return x * y;\n  }\n};\n/**\n * `string` semigroup under concatenation.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.semigroupString.concat('a', 'b'), 'ab')\n *\n * @category instances\n * @since 2.0.0\n */\n\nexports.semigroupString = {\n  concat: function (x, y) {\n    return x + y;\n  }\n};\n/**\n * @category instances\n * @since 2.0.0\n */\n\nexports.semigroupVoid = {\n  concat: function () {\n    return undefined;\n  }\n};\n/**\n * You can glue items between and stay associative.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * const S1 = S.getIntercalateSemigroup(' ')(S.semigroupString)\n *\n * assert.strictEqual(S1.concat('a', 'b'), 'a b')\n * assert.strictEqual(S1.concat(S1.concat('a', 'b'), 'c'), S1.concat('a', S1.concat('b', 'c')))\n *\n * @category instances\n * @since 2.5.0\n */\n\nfunction getIntercalateSemigroup(a) {\n  return function (S) {\n    return {\n      concat: function (x, y) {\n        return S.concat(x, S.concat(a, y));\n      }\n    };\n  };\n}\n\nexports.getIntercalateSemigroup = getIntercalateSemigroup;","map":{"version":3,"names":["Object","defineProperty","exports","value","getIntercalateSemigroup","semigroupVoid","semigroupString","semigroupProduct","semigroupSum","semigroupAny","semigroupAll","getObjectSemigroup","getJoinSemigroup","getMeetSemigroup","getStructSemigroup","getFunctionSemigroup","getDualSemigroup","getTupleSemigroup","getLastSemigroup","getFirstSemigroup","fold","function_1","require","Ord_1","S","startWith","as","undefined","foldS_1","reduce","concat","identity","_","y","semigroups","_i","arguments","length","x","map","s","i","f","g","a","r","_a","keys","key","O","min","max","assign"],"sources":["/Users/ngocban/Desktop/imx-integration-reactjs/node_modules/fp-ts/lib/Semigroup.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getIntercalateSemigroup = exports.semigroupVoid = exports.semigroupString = exports.semigroupProduct = exports.semigroupSum = exports.semigroupAny = exports.semigroupAll = exports.getObjectSemigroup = exports.getJoinSemigroup = exports.getMeetSemigroup = exports.getStructSemigroup = exports.getFunctionSemigroup = exports.getDualSemigroup = exports.getTupleSemigroup = exports.getLastSemigroup = exports.getFirstSemigroup = exports.fold = void 0;\n/**\n * If a type `A` can form a `Semigroup` it has an **associative** binary operation.\n *\n * ```ts\n * interface Semigroup<A> {\n *   readonly concat: (x: A, y: A) => A\n * }\n * ```\n *\n * Associativity means the following equality must hold for any choice of `x`, `y`, and `z`.\n *\n * ```ts\n * concat(x, concat(y, z)) = concat(concat(x, y), z)\n * ```\n *\n * A common example of a semigroup is the type `string` with the operation `+`.\n *\n * ```ts\n * import { Semigroup } from 'fp-ts/Semigroup'\n *\n * const semigroupString: Semigroup<string> = {\n *   concat: (x, y) => x + y\n * }\n *\n * const x = 'x'\n * const y = 'y'\n * const z = 'z'\n *\n * semigroupString.concat(x, y) // 'xy'\n *\n * semigroupString.concat(x, semigroupString.concat(y, z)) // 'xyz'\n *\n * semigroupString.concat(semigroupString.concat(x, y), z) // 'xyz'\n * ```\n *\n * *Adapted from https://typelevel.org/cats*\n *\n * @since 2.0.0\n */\nvar function_1 = require(\"./function\");\nvar Ord_1 = require(\"./Ord\");\nfunction fold(S) {\n    return function (startWith, as) {\n        if (as === undefined) {\n            var foldS_1 = fold(S);\n            return function (as) { return foldS_1(startWith, as); };\n        }\n        return as.reduce(S.concat, startWith);\n    };\n}\nexports.fold = fold;\n/**\n * Always return the first argument.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.getFirstSemigroup<number>().concat(1, 2), 1)\n *\n * @category instances\n * @since 2.0.0\n */\nfunction getFirstSemigroup() {\n    return { concat: function_1.identity };\n}\nexports.getFirstSemigroup = getFirstSemigroup;\n/**\n * Always return the last argument.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.getLastSemigroup<number>().concat(1, 2), 2)\n *\n * @category instances\n * @since 2.0.0\n */\nfunction getLastSemigroup() {\n    return { concat: function (_, y) { return y; } };\n}\nexports.getLastSemigroup = getLastSemigroup;\n/**\n * Given a tuple of semigroups returns a semigroup for the tuple.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * const S1 = S.getTupleSemigroup(S.semigroupString, S.semigroupSum)\n * assert.deepStrictEqual(S1.concat(['a', 1], ['b', 2]), ['ab', 3])\n *\n * const S2 = S.getTupleSemigroup(S.semigroupString, S.semigroupSum, S.semigroupAll)\n * assert.deepStrictEqual(S2.concat(['a', 1, true], ['b', 2, false]), ['ab', 3, false])\n *\n * @category instances\n * @since 2.0.0\n */\nfunction getTupleSemigroup() {\n    var semigroups = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        semigroups[_i] = arguments[_i];\n    }\n    return {\n        concat: function (x, y) { return semigroups.map(function (s, i) { return s.concat(x[i], y[i]); }); }\n    };\n}\nexports.getTupleSemigroup = getTupleSemigroup;\n/**\n * The dual of a `Semigroup`, obtained by swapping the arguments of `concat`.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.getDualSemigroup(S.semigroupString).concat('a', 'b'), 'ba')\n *\n * @category instances\n * @since 2.0.0\n */\nfunction getDualSemigroup(S) {\n    return {\n        concat: function (x, y) { return S.concat(y, x); }\n    };\n}\nexports.getDualSemigroup = getDualSemigroup;\n/**\n * Unary functions form a semigroup as long as you can provide a semigroup for the codomain.\n *\n * @example\n * import { Predicate } from 'fp-ts/function'\n * import * as S from 'fp-ts/Semigroup'\n *\n * const f: Predicate<number> = (n) => n <= 2\n * const g: Predicate<number> = (n) => n >= 0\n *\n * const S1 = S.getFunctionSemigroup(S.semigroupAll)<number>()\n *\n * assert.deepStrictEqual(S1.concat(f, g)(1), true)\n * assert.deepStrictEqual(S1.concat(f, g)(3), false)\n *\n * const S2 = S.getFunctionSemigroup(S.semigroupAny)<number>()\n *\n * assert.deepStrictEqual(S2.concat(f, g)(1), true)\n * assert.deepStrictEqual(S2.concat(f, g)(3), true)\n *\n * @category instances\n * @since 2.0.0\n */\nfunction getFunctionSemigroup(S) {\n    return function () { return ({\n        concat: function (f, g) { return function (a) { return S.concat(f(a), g(a)); }; }\n    }); };\n}\nexports.getFunctionSemigroup = getFunctionSemigroup;\n/**\n * Given a struct of semigroups returns a semigroup for the struct.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * interface Point {\n *   readonly x: number\n *   readonly y: number\n * }\n *\n * const semigroupPoint = S.getStructSemigroup<Point>({\n *   x: S.semigroupSum,\n *   y: S.semigroupSum\n * })\n *\n * assert.deepStrictEqual(semigroupPoint.concat({ x: 1, y: 2 }, { x: 3, y: 4 }), { x: 4, y: 6 })\n *\n * @category instances\n * @since 2.0.0\n */\nfunction getStructSemigroup(semigroups) {\n    return {\n        concat: function (x, y) {\n            var r = {};\n            for (var _i = 0, _a = Object.keys(semigroups); _i < _a.length; _i++) {\n                var key = _a[_i];\n                r[key] = semigroups[key].concat(x[key], y[key]);\n            }\n            return r;\n        }\n    };\n}\nexports.getStructSemigroup = getStructSemigroup;\n/**\n * Get a semigroup where `concat` will return the minimum, based on the provided order.\n *\n * @example\n * import * as O from 'fp-ts/Ord'\n * import * as S from 'fp-ts/Semigroup'\n *\n * const S1 = S.getMeetSemigroup(O.ordNumber)\n *\n * assert.deepStrictEqual(S1.concat(1, 2), 1)\n *\n * @category instances\n * @since 2.0.0\n */\nfunction getMeetSemigroup(O) {\n    return {\n        concat: Ord_1.min(O)\n    };\n}\nexports.getMeetSemigroup = getMeetSemigroup;\n/**\n * Get a semigroup where `concat` will return the maximum, based on the provided order.\n *\n * @example\n * import * as O from 'fp-ts/Ord'\n * import * as S from 'fp-ts/Semigroup'\n *\n * const S1 = S.getJoinSemigroup(O.ordNumber)\n *\n * assert.deepStrictEqual(S1.concat(1, 2), 2)\n *\n * @category instances\n * @since 2.0.0\n */\nfunction getJoinSemigroup(O) {\n    return {\n        concat: Ord_1.max(O)\n    };\n}\nexports.getJoinSemigroup = getJoinSemigroup;\n/**\n * Return a semigroup for objects, preserving their type.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * interface Person {\n *   name: string\n *   age: number\n * }\n *\n * const S1 = S.getObjectSemigroup<Person>()\n * assert.deepStrictEqual(S1.concat({ name: 'name', age: 23 }, { name: 'name', age: 24 }), { name: 'name', age: 24 })\n *\n * @category instances\n * @since 2.0.0\n */\nfunction getObjectSemigroup() {\n    return {\n        concat: function (x, y) { return Object.assign({}, x, y); }\n    };\n}\nexports.getObjectSemigroup = getObjectSemigroup;\n/**\n * `boolean` semigroup under conjunction.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.semigroupAll.concat(true, true), true)\n * assert.deepStrictEqual(S.semigroupAll.concat(true, false), false)\n *\n * @category instances\n * @since 2.0.0\n */\nexports.semigroupAll = {\n    concat: function (x, y) { return x && y; }\n};\n/**\n * `boolean` semigroup under disjunction.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.semigroupAny.concat(true, true), true)\n * assert.deepStrictEqual(S.semigroupAny.concat(true, false), true)\n * assert.deepStrictEqual(S.semigroupAny.concat(false, false), false)\n *\n * @category instances\n * @since 2.0.0\n */\nexports.semigroupAny = {\n    concat: function (x, y) { return x || y; }\n};\n/**\n * `number` semigroup under addition.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.semigroupSum.concat(2, 3), 5)\n *\n * @category instances\n * @since 2.0.0\n */\nexports.semigroupSum = {\n    concat: function (x, y) { return x + y; }\n};\n/**\n * `number` semigroup under multiplication.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.semigroupProduct.concat(2, 3), 6)\n *\n * @category instances\n * @since 2.0.0\n */\nexports.semigroupProduct = {\n    concat: function (x, y) { return x * y; }\n};\n/**\n * `string` semigroup under concatenation.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.semigroupString.concat('a', 'b'), 'ab')\n *\n * @category instances\n * @since 2.0.0\n */\nexports.semigroupString = {\n    concat: function (x, y) { return x + y; }\n};\n/**\n * @category instances\n * @since 2.0.0\n */\nexports.semigroupVoid = {\n    concat: function () { return undefined; }\n};\n/**\n * You can glue items between and stay associative.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * const S1 = S.getIntercalateSemigroup(' ')(S.semigroupString)\n *\n * assert.strictEqual(S1.concat('a', 'b'), 'a b')\n * assert.strictEqual(S1.concat(S1.concat('a', 'b'), 'c'), S1.concat('a', S1.concat('b', 'c')))\n *\n * @category instances\n * @since 2.5.0\n */\nfunction getIntercalateSemigroup(a) {\n    return function (S) { return ({\n        concat: function (x, y) { return S.concat(x, S.concat(a, y)); }\n    }); };\n}\nexports.getIntercalateSemigroup = getIntercalateSemigroup;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}