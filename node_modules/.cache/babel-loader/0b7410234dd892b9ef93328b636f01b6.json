{"ast":null,"code":"/**\n * Applies the exclusive NOR operation, expects two arrays of the same size and returns a new one.\n *\n * @example\n * xnor([1,0,0,0,1,1,0,1], [0,1,1,0,0,1,0,0]) => [0,0,0,1,0,1,1,0]\n *\n * @param {Array} bits1 input data\n * @param {Array} bits2 input data\n * @return {Array} [bits1 XNOR bits2]\n */\nexport default (function (bits1, bits2) {\n  var result = [];\n\n  for (var i = 0; i < bits1.length; i++) result[i] = bits1[i] ^ bits2[i] ^ 1;\n\n  return result;\n});","map":{"version":3,"names":["bits1","bits2","result","i","length"],"sources":["/Users/ngocban/Desktop/imx-integration-reactjs/node_modules/bitwise/esm/bits/xnor.js"],"sourcesContent":["/**\n * Applies the exclusive NOR operation, expects two arrays of the same size and returns a new one.\n *\n * @example\n * xnor([1,0,0,0,1,1,0,1], [0,1,1,0,0,1,0,0]) => [0,0,0,1,0,1,1,0]\n *\n * @param {Array} bits1 input data\n * @param {Array} bits2 input data\n * @return {Array} [bits1 XNOR bits2]\n */\nexport default (function (bits1, bits2) {\n    var result = [];\n    for (var i = 0; i < bits1.length; i++)\n        result[i] = (bits1[i] ^ bits2[i] ^ 1);\n    return result;\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,UAAUA,KAAV,EAAiBC,KAAjB,EAAwB;EACpC,IAAIC,MAAM,GAAG,EAAb;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACI,MAA1B,EAAkCD,CAAC,EAAnC,EACID,MAAM,CAACC,CAAD,CAAN,GAAaH,KAAK,CAACG,CAAD,CAAL,GAAWF,KAAK,CAACE,CAAD,CAAhB,GAAsB,CAAnC;;EACJ,OAAOD,MAAP;AACH,CALD"},"metadata":{},"sourceType":"module"}