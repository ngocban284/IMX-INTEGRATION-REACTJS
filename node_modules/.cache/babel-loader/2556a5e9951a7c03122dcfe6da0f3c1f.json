{"ast":null,"code":"/**\n * Applies the XOR operation on the given bits. Returns one bit.\n * Throws if less than 2 bits are given.\n *\n * @example\n * reduceXor([1, 0, 0, 0, 1, 1, 0, 1]) => 0\n *\n * @param {Array} bits input data\n * @return {Integer} XOR bits\n */\nexport default (function (bits) {\n  if (bits.length < 2) throw new RangeError('Not enough bits.');\n  var result = bits[0];\n\n  for (var i = 1; i < bits.length; i++) result ^= bits[i];\n\n  return result;\n});","map":{"version":3,"names":["bits","length","RangeError","result","i"],"sources":["/Users/ngocban/Desktop/imx-integration-reactjs/node_modules/bitwise/esm/bits/reduce-xor.js"],"sourcesContent":["/**\n * Applies the XOR operation on the given bits. Returns one bit.\n * Throws if less than 2 bits are given.\n *\n * @example\n * reduceXor([1, 0, 0, 0, 1, 1, 0, 1]) => 0\n *\n * @param {Array} bits input data\n * @return {Integer} XOR bits\n */\nexport default (function (bits) {\n    if (bits.length < 2)\n        throw new RangeError('Not enough bits.');\n    var result = bits[0];\n    for (var i = 1; i < bits.length; i++)\n        result ^= bits[i];\n    return result;\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,UAAUA,IAAV,EAAgB;EAC5B,IAAIA,IAAI,CAACC,MAAL,GAAc,CAAlB,EACI,MAAM,IAAIC,UAAJ,CAAe,kBAAf,CAAN;EACJ,IAAIC,MAAM,GAAGH,IAAI,CAAC,CAAD,CAAjB;;EACA,KAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAAI,CAACC,MAAzB,EAAiCG,CAAC,EAAlC,EACID,MAAM,IAAIH,IAAI,CAACI,CAAD,CAAd;;EACJ,OAAOD,MAAP;AACH,CAPD"},"metadata":{},"sourceType":"module"}