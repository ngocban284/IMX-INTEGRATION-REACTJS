{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport EventEmitter from \"events\";\nimport { ethers } from \"ethers\";\nimport { version } from \"./_version\";\nconst logger = new ethers.utils.Logger(version);\n/*\nfunction getBlockTag(tag) {\n    if (tag == null) { return \"latest\"; }\n    if (tag === \"earliest\" || tag === \"latest\" || tag === \"pending\") {\n        return tag;\n    }\n    return ethers.utils.hexValue(tag)\n}\n*/\n\nexport class Eip1193Bridge extends EventEmitter {\n  constructor(signer, provider) {\n    super();\n    ethers.utils.defineReadOnly(this, \"signer\", signer);\n    ethers.utils.defineReadOnly(this, \"provider\", provider || null);\n  }\n\n  request(request) {\n    return this.send(request.method, request.params || []);\n  }\n\n  send(method, params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      function throwUnsupported(message) {\n        return logger.throwError(message, ethers.utils.Logger.errors.UNSUPPORTED_OPERATION, {\n          method: method,\n          params: params\n        });\n      }\n\n      let coerce = value => value;\n\n      switch (method) {\n        case \"eth_gasPrice\":\n          {\n            const result = yield this.provider.getGasPrice();\n            return result.toHexString();\n          }\n\n        case \"eth_accounts\":\n          {\n            const result = [];\n\n            if (this.signer) {\n              const address = yield this.signer.getAddress();\n              result.push(address);\n            }\n\n            return result;\n          }\n\n        case \"eth_blockNumber\":\n          {\n            return yield this.provider.getBlockNumber();\n          }\n\n        case \"eth_chainId\":\n          {\n            const result = yield this.provider.getNetwork();\n            return ethers.utils.hexValue(result.chainId);\n          }\n\n        case \"eth_getBalance\":\n          {\n            const result = yield this.provider.getBalance(params[0], params[1]);\n            return result.toHexString();\n          }\n\n        case \"eth_getStorageAt\":\n          {\n            return this.provider.getStorageAt(params[0], params[1], params[2]);\n          }\n\n        case \"eth_getTransactionCount\":\n          {\n            const result = yield this.provider.getTransactionCount(params[0], params[1]);\n            return ethers.utils.hexValue(result);\n          }\n\n        case \"eth_getBlockTransactionCountByHash\":\n        case \"eth_getBlockTransactionCountByNumber\":\n          {\n            const result = yield this.provider.getBlock(params[0]);\n            return ethers.utils.hexValue(result.transactions.length);\n          }\n\n        case \"eth_getCode\":\n          {\n            const result = yield this.provider.getBlock(params[0]);\n            return result;\n          }\n\n        case \"eth_sendRawTransaction\":\n          {\n            return yield this.provider.sendTransaction(params[0]);\n          }\n\n        case \"eth_call\":\n          {\n            const req = ethers.providers.JsonRpcProvider.hexlifyTransaction(params[0]);\n            return yield this.provider.call(req, params[1]);\n          }\n\n        case \"estimateGas\":\n          {\n            if (params[1] && params[1] !== \"latest\") {\n              throwUnsupported(\"estimateGas does not support blockTag\");\n            }\n\n            const req = ethers.providers.JsonRpcProvider.hexlifyTransaction(params[0]);\n            const result = yield this.provider.estimateGas(req);\n            return result.toHexString();\n          }\n        // @TODO: Transform? No uncles?\n\n        case \"eth_getBlockByHash\":\n        case \"eth_getBlockByNumber\":\n          {\n            if (params[1]) {\n              return yield this.provider.getBlockWithTransactions(params[0]);\n            } else {\n              return yield this.provider.getBlock(params[0]);\n            }\n          }\n\n        case \"eth_getTransactionByHash\":\n          {\n            return yield this.provider.getTransaction(params[0]);\n          }\n\n        case \"eth_getTransactionReceipt\":\n          {\n            return yield this.provider.getTransactionReceipt(params[0]);\n          }\n\n        case \"eth_sign\":\n          {\n            if (!this.signer) {\n              return throwUnsupported(\"eth_sign requires an account\");\n            }\n\n            const address = yield this.signer.getAddress();\n\n            if (address !== ethers.utils.getAddress(params[0])) {\n              logger.throwArgumentError(\"account mismatch or account not found\", \"params[0]\", params[0]);\n            }\n\n            return this.signer.signMessage(ethers.utils.arrayify(params[1]));\n          }\n\n        case \"eth_sendTransaction\":\n          {\n            if (!this.signer) {\n              return throwUnsupported(\"eth_sendTransaction requires an account\");\n            }\n\n            const req = ethers.providers.JsonRpcProvider.hexlifyTransaction(params[0]);\n            const tx = yield this.signer.sendTransaction(req);\n            return tx.hash;\n          }\n\n        case \"eth_getUncleCountByBlockHash\":\n        case \"eth_getUncleCountByBlockNumber\":\n          {\n            coerce = ethers.utils.hexValue;\n            break;\n          }\n\n        case \"eth_getTransactionByBlockHashAndIndex\":\n        case \"eth_getTransactionByBlockNumberAndIndex\":\n        case \"eth_getUncleByBlockHashAndIndex\":\n        case \"eth_getUncleByBlockNumberAndIndex\":\n        case \"eth_newFilter\":\n        case \"eth_newBlockFilter\":\n        case \"eth_newPendingTransactionFilter\":\n        case \"eth_uninstallFilter\":\n        case \"eth_getFilterChanges\":\n        case \"eth_getFilterLogs\":\n        case \"eth_getLogs\":\n          break;\n      } // If our provider supports send, maybe it can do a better job?\n\n\n      if (this.provider.send) {\n        const result = yield this.provider.send(method, params);\n        return coerce(result);\n      }\n\n      return throwUnsupported(`unsupported method: ${method}`);\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["EventEmitter","ethers","version","logger","utils","Logger","Eip1193Bridge","constructor","signer","provider","defineReadOnly","request","send","method","params","throwUnsupported","message","throwError","errors","UNSUPPORTED_OPERATION","coerce","value","result","getGasPrice","toHexString","address","getAddress","push","getBlockNumber","getNetwork","hexValue","chainId","getBalance","getStorageAt","getTransactionCount","getBlock","transactions","length","sendTransaction","req","providers","JsonRpcProvider","hexlifyTransaction","call","estimateGas","getBlockWithTransactions","getTransaction","getTransactionReceipt","throwArgumentError","signMessage","arrayify","tx","hash"],"sourceRoot":"","sources":["../src.ts/eip1193-bridge.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}