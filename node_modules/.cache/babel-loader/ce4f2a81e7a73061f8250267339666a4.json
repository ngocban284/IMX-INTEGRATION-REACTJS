{"ast":null,"code":"import { tailRec } from './ChainRec';\nimport { identity, pipe, bind_, bindTo_, flow } from './function'; // -------------------------------------------------------------------------------------\n// guards\n// -------------------------------------------------------------------------------------\n\n/**\n * Returns `true` if the either is an instance of `Left`, `false` otherwise.\n *\n * @category guards\n * @since 2.0.0\n */\n\nexport var isLeft = function (ma) {\n  return ma._tag === 'Left';\n};\n/**\n * Returns `true` if the either is an instance of `Right`, `false` otherwise.\n *\n * @category guards\n * @since 2.0.0\n */\n\nexport var isRight = function (ma) {\n  return ma._tag === 'Right';\n}; // -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n\n/**\n * Constructs a new `Either` holding a `Left` value. This usually represents a failure, due to the right-bias of this\n * structure.\n *\n * @category constructors\n * @since 2.0.0\n */\n\nexport var left = function (e) {\n  return {\n    _tag: 'Left',\n    left: e\n  };\n};\n/**\n * Constructs a new `Either` holding a `Right` value. This usually represents a successful value due to the right bias\n * of this structure.\n *\n * @category constructors\n * @since 2.0.0\n */\n\nexport var right = function (a) {\n  return {\n    _tag: 'Right',\n    right: a\n  };\n}; // TODO: make lazy in v3\n\n/**\n * Takes a default and a nullable value, if the value is not nully, turn it into a `Right`, if the value is nully use\n * the provided default as a `Left`.\n *\n * @example\n * import { fromNullable, left, right } from 'fp-ts/Either'\n *\n * const parse = fromNullable('nully')\n *\n * assert.deepStrictEqual(parse(1), right(1))\n * assert.deepStrictEqual(parse(null), left('nully'))\n *\n * @category constructors\n * @since 2.0.0\n */\n\nexport function fromNullable(e) {\n  return function (a) {\n    return a == null ? left(e) : right(a);\n  };\n} // TODO: `onError => Lazy<A> => Either` in v3\n\n/**\n * Constructs a new `Either` from a function that might throw.\n *\n * @example\n * import { Either, left, right, tryCatch } from 'fp-ts/Either'\n *\n * const unsafeHead = <A>(as: Array<A>): A => {\n *   if (as.length > 0) {\n *     return as[0]\n *   } else {\n *     throw new Error('empty array')\n *   }\n * }\n *\n * const head = <A>(as: Array<A>): Either<Error, A> => {\n *   return tryCatch(() => unsafeHead(as), e => (e instanceof Error ? e : new Error('unknown error')))\n * }\n *\n * assert.deepStrictEqual(head([]), left(new Error('empty array')))\n * assert.deepStrictEqual(head([1, 2, 3]), right(1))\n *\n * @category constructors\n * @since 2.0.0\n */\n\nexport function tryCatch(f, onError) {\n  try {\n    return right(f());\n  } catch (e) {\n    return left(onError(e));\n  }\n} // TODO curry in v3\n\n/**\n * Converts a JavaScript Object Notation (JSON) string into an object.\n *\n * @example\n * import { parseJSON, toError, right, left } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(parseJSON('{\"a\":1}', toError), right({ a: 1 }))\n * assert.deepStrictEqual(parseJSON('{\"a\":}', toError), left(new SyntaxError('Unexpected token } in JSON at position 5')))\n *\n * @category constructors\n * @since 2.0.0\n */\n\nexport function parseJSON(s, onError) {\n  return tryCatch(function () {\n    return JSON.parse(s);\n  }, onError);\n} // TODO curry in v3\n\n/**\n * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n *\n * @example\n * import * as E from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(E.stringifyJSON({ a: 1 }, E.toError), E.right('{\"a\":1}'))\n * const circular: any = { ref: null }\n * circular.ref = circular\n * assert.deepStrictEqual(\n *   pipe(\n *     E.stringifyJSON(circular, E.toError),\n *     E.mapLeft(e => e.message.includes('Converting circular structure to JSON'))\n *   ),\n *   E.left(true)\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\n\nexport function stringifyJSON(u, onError) {\n  return tryCatch(function () {\n    return JSON.stringify(u);\n  }, onError);\n}\n/**\n * Derivable from `MonadThrow`.\n *\n * @example\n * import { fromOption, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import { none, some } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     some(1),\n *     fromOption(() => 'error')\n *   ),\n *   right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     none,\n *     fromOption(() => 'error')\n *   ),\n *   left('error')\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\n\nexport var fromOption = function (onNone) {\n  return function (ma) {\n    return ma._tag === 'None' ? left(onNone()) : right(ma.value);\n  };\n};\n/**\n * Derivable from `MonadThrow`.\n *\n * @example\n * import { fromPredicate, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     1,\n *     fromPredicate(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     -1,\n *     fromPredicate(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   left('error')\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\n\nexport var fromPredicate = function (predicate, onFalse) {\n  return function (a) {\n    return predicate(a) ? right(a) : left(onFalse(a));\n  };\n}; // -------------------------------------------------------------------------------------\n// destructors\n// -------------------------------------------------------------------------------------\n\n/**\n * Takes two functions and an `Either` value, if the value is a `Left` the inner value is applied to the first function,\n * if the value is a `Right` the inner value is applied to the second function.\n *\n * @example\n * import { fold, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * function onLeft(errors: Array<string>): string {\n *   return `Errors: ${errors.join(', ')}`\n * }\n *\n * function onRight(value: number): string {\n *   return `Ok: ${value}`\n * }\n *\n * assert.strictEqual(\n *   pipe(\n *     right(1),\n *     fold(onLeft, onRight)\n *   ),\n *   'Ok: 1'\n * )\n * assert.strictEqual(\n *   pipe(\n *     left(['error 1', 'error 2']),\n *     fold(onLeft, onRight)\n *   ),\n *   'Errors: error 1, error 2'\n * )\n *\n * @category destructors\n * @since 2.0.0\n */\n\nexport function fold(onLeft, onRight) {\n  return function (ma) {\n    return isLeft(ma) ? onLeft(ma.left) : onRight(ma.right);\n  };\n}\n/**\n * Less strict version of [`getOrElse`](#getOrElse).\n *\n * @category destructors\n * @since 2.6.0\n */\n\nexport var getOrElseW = function (onLeft) {\n  return function (ma) {\n    return isLeft(ma) ? onLeft(ma.left) : ma.right;\n  };\n};\n/**\n * Returns the wrapped value if it's a `Right` or a default value if is a `Left`.\n *\n * @example\n * import { getOrElse, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     right(1),\n *     getOrElse(() => 0)\n *   ),\n *   1\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     left('error'),\n *     getOrElse(() => 0)\n *   ),\n *   0\n * )\n *\n * @category destructors\n * @since 2.0.0\n */\n\nexport var getOrElse = getOrElseW; // -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n\n/**\n * @category combinators\n * @since 2.9.0\n */\n\nexport function fromNullableK(e) {\n  var from = fromNullable(e);\n  return function (f) {\n    return function () {\n      var a = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        a[_i] = arguments[_i];\n      }\n\n      return from(f.apply(void 0, a));\n    };\n  };\n}\n/**\n * @category combinators\n * @since 2.9.0\n */\n\nexport function chainNullableK(e) {\n  var from = fromNullableK(e);\n  return function (f) {\n    return chain(from(f));\n  };\n}\n/**\n * Returns a `Right` if is a `Left` (and vice versa).\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport function swap(ma) {\n  return isLeft(ma) ? right(ma.left) : left(ma.right);\n}\n/**\n * Useful for recovering from errors.\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport function orElse(onLeft) {\n  return function (ma) {\n    return isLeft(ma) ? onLeft(ma.left) : ma;\n  };\n}\n/**\n * Less strict version of [`filterOrElse`](#filterOrElse).\n *\n * @since 2.9.0\n */\n\nexport var filterOrElseW = function (predicate, onFalse) {\n  return chainW(function (a) {\n    return predicate(a) ? right(a) : left(onFalse(a));\n  });\n};\n/**\n * Derivable from `MonadThrow`.\n *\n * @example\n * import { filterOrElse, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     right(1),\n *     filterOrElse(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     right(-1),\n *     filterOrElse(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   left('error')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     left('a'),\n *     filterOrElse(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   left('a')\n * )\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var filterOrElse = filterOrElseW; // -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\n\nvar map_ = function (fa, f) {\n  return pipe(fa, map(f));\n};\n\nvar ap_ = function (fab, fa) {\n  return pipe(fab, ap(fa));\n};\n/* istanbul ignore next */\n\n\nvar chain_ = function (ma, f) {\n  return pipe(ma, chain(f));\n};\n/* istanbul ignore next */\n\n\nvar reduce_ = function (fa, b, f) {\n  return pipe(fa, reduce(b, f));\n};\n/* istanbul ignore next */\n\n\nvar foldMap_ = function (M) {\n  return function (fa, f) {\n    var foldMapM = foldMap(M);\n    return pipe(fa, foldMapM(f));\n  };\n};\n/* istanbul ignore next */\n\n\nvar reduceRight_ = function (fa, b, f) {\n  return pipe(fa, reduceRight(b, f));\n};\n\nvar traverse_ = function (F) {\n  var traverseF = traverse(F);\n  return function (ta, f) {\n    return pipe(ta, traverseF(f));\n  };\n};\n\nvar bimap_ = function (fa, f, g) {\n  return pipe(fa, bimap(f, g));\n};\n\nvar mapLeft_ = function (fa, f) {\n  return pipe(fa, mapLeft(f));\n};\n/* istanbul ignore next */\n\n\nvar alt_ = function (fa, that) {\n  return pipe(fa, alt(that));\n};\n/* istanbul ignore next */\n\n\nvar extend_ = function (wa, f) {\n  return pipe(wa, extend(f));\n};\n\nvar chainRec_ = function (a, f) {\n  return tailRec(f(a), function (e) {\n    return isLeft(e) ? right(left(e.left)) : isLeft(e.right) ? left(f(e.right.left)) : right(right(e.right.right));\n  });\n}; // -------------------------------------------------------------------------------------\n// pipeables\n// -------------------------------------------------------------------------------------\n\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category Functor\n * @since 2.0.0\n */\n\n\nexport var map = function (f) {\n  return function (fa) {\n    return isLeft(fa) ? fa : right(f(fa.right));\n  };\n};\n/**\n * Map a pair of functions over the two type arguments of the bifunctor.\n *\n * @category Bifunctor\n * @since 2.0.0\n */\n\nexport var bimap = function (f, g) {\n  return function (fa) {\n    return isLeft(fa) ? left(f(fa.left)) : right(g(fa.right));\n  };\n};\n/**\n * Map a function over the first type argument of a bifunctor.\n *\n * @category Bifunctor\n * @since 2.0.0\n */\n\nexport var mapLeft = function (f) {\n  return function (fa) {\n    return isLeft(fa) ? left(f(fa.left)) : fa;\n  };\n};\n/**\n * Less strict version of [`ap`](#ap).\n *\n * @category Apply\n * @since 2.8.0\n */\n\nexport var apW = function (fa) {\n  return function (fab) {\n    return isLeft(fab) ? fab : isLeft(fa) ? fa : right(fab.right(fa.right));\n  };\n};\n/**\n * Apply a function to an argument under a type constructor.\n *\n * @category Apply\n * @since 2.0.0\n */\n\nexport var ap = apW;\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var apFirst = function (fb) {\n  return flow(map(function (a) {\n    return function () {\n      return a;\n    };\n  }), ap(fb));\n};\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var apSecond = function (fb) {\n  return flow(map(function () {\n    return function (b) {\n      return b;\n    };\n  }), ap(fb));\n};\n/**\n * Wrap a value into the type constructor.\n *\n * Equivalent to [`right`](#right).\n *\n * @example\n * import * as E from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(E.of('a'), E.right('a'))\n *\n * @category Applicative\n * @since 2.7.0\n */\n\nexport var of = right;\n/**\n * Less strict version of [`chain`](#chain).\n *\n * @category Monad\n * @since 2.6.0\n */\n\nexport var chainW = function (f) {\n  return function (ma) {\n    return isLeft(ma) ? ma : f(ma.right);\n  };\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation.\n *\n * @category Monad\n * @since 2.0.0\n */\n\nexport var chain = chainW;\n/**\n * Less strict version of [`chainFirst`](#chainFirst)\n *\n * Derivable from `Monad`.\n *\n * @category combinators\n * @since 2.8.0\n */\n\nexport var chainFirstW = function (f) {\n  return function (ma) {\n    return pipe(ma, chainW(function (a) {\n      return pipe(f(a), map(function () {\n        return a;\n      }));\n    }));\n  };\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * Derivable from `Monad`.\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var chainFirst = chainFirstW;\n/**\n * The `flatten` function is the conventional monad join operator. It is used to remove one level of monadic structure, projecting its bound argument into the outer level.\n *\n * Derivable from `Monad`.\n *\n * @example\n * import * as E from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(E.flatten(E.right(E.right('a'))), E.right('a'))\n * assert.deepStrictEqual(E.flatten(E.right(E.left('e'))), E.left('e'))\n * assert.deepStrictEqual(E.flatten(E.left('e')), E.left('e'))\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var flatten = /*#__PURE__*/chain(identity);\n/**\n * Less strict version of [`alt`](#alt).\n *\n * @category Alt\n * @since 2.9.0\n */\n\nexport var altW = function (that) {\n  return function (fa) {\n    return isLeft(fa) ? that() : fa;\n  };\n};\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * @category Alt\n * @since 2.0.0\n */\n\nexport var alt = altW;\n/**\n * @category Extend\n * @since 2.0.0\n */\n\nexport var extend = function (f) {\n  return function (wa) {\n    return isLeft(wa) ? wa : right(f(wa));\n  };\n};\n/**\n * Derivable from `Extend`.\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var duplicate = /*#__PURE__*/extend(identity);\n/**\n * Left-associative fold of a structure.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n *\n * const startWith = 'prefix'\n * const concat = (a: string, b: string) => `${a}:${b}`\n *\n * assert.deepStrictEqual(\n *   pipe(E.right('a'), E.reduce(startWith, concat)),\n *   'prefix:a',\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(E.left('e'), E.reduce(startWith, concat)),\n *   'prefix',\n * )\n *\n * @category Foldable\n * @since 2.0.0\n */\n\nexport var reduce = function (b, f) {\n  return function (fa) {\n    return isLeft(fa) ? b : f(b, fa.right);\n  };\n};\n/**\n * Map each element of the structure to a monoid, and combine the results.\n *\n * @example\n * import { pipe } from 'fp-ts/function';\n * import * as E from 'fp-ts/Either'\n * import { monoidString } from 'fp-ts/Monoid'\n *\n * const yell = (a: string) => `${a}!`\n *\n * assert.deepStrictEqual(\n *   pipe(E.right('a'), E.foldMap(monoidString)(yell)),\n *   'a!',\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(E.left('e'), E.foldMap(monoidString)(yell)),\n *   monoidString.empty,\n * )\n *\n * @category Foldable\n * @since 2.0.0\n */\n\nexport var foldMap = function (M) {\n  return function (f) {\n    return function (fa) {\n      return isLeft(fa) ? M.empty : f(fa.right);\n    };\n  };\n};\n/**\n * Right-associative fold of a structure.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n *\n * const startWith = 'postfix'\n * const concat = (a: string, b: string) => `${a}:${b}`\n *\n * assert.deepStrictEqual(\n *   pipe(E.right('a'), E.reduceRight(startWith, concat)),\n *   'a:postfix',\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(E.left('e'), E.reduceRight(startWith, concat)),\n *   'postfix',\n * )\n *\n * @category Foldable\n * @since 2.0.0\n */\n\nexport var reduceRight = function (b, f) {\n  return function (fa) {\n    return isLeft(fa) ? b : f(fa.right, b);\n  };\n};\n/**\n * Map each element of a structure to an action, evaluate these actions from left to right, and collect the results.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as A from 'fp-ts/Array'\n * import * as E from 'fp-ts/Either'\n * import * as O from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   pipe(E.right(['a']), E.traverse(O.option)(A.head)),\n *   O.some(E.right('a')),\n *  )\n *\n * assert.deepStrictEqual(\n *   pipe(E.right([]), E.traverse(O.option)(A.head)),\n *   O.none,\n * )\n *\n * @category Traversable\n * @since 2.6.3\n */\n\nexport var traverse = function (F) {\n  return function (f) {\n    return function (ta) {\n      return isLeft(ta) ? F.of(left(ta.left)) : F.map(f(ta.right), right);\n    };\n  };\n};\n/**\n * Evaluate each monadic action in the structure from left to right, and collect the results.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n * import * as O from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   pipe(E.right(O.some('a')), E.sequence(O.option)),\n *   O.some(E.right('a')),\n *  )\n *\n * assert.deepStrictEqual(\n *   pipe(E.right(O.none), E.sequence(O.option)),\n *   O.none\n * )\n *\n * @category Traversable\n * @since 2.6.3\n */\n\nexport var sequence = function (F) {\n  return function (ma) {\n    return isLeft(ma) ? F.of(left(ma.left)) : F.map(ma.right, right);\n  };\n};\n/**\n * @category MonadThrow\n * @since 2.6.3\n */\n\nexport var throwError = left; // -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n\n/**\n * @category instances\n * @since 2.0.0\n */\n\nexport var URI = 'Either';\n/**\n * @category instances\n * @since 2.0.0\n */\n\nexport function getShow(SE, SA) {\n  return {\n    show: function (ma) {\n      return isLeft(ma) ? \"left(\" + SE.show(ma.left) + \")\" : \"right(\" + SA.show(ma.right) + \")\";\n    }\n  };\n}\n/**\n * @category instances\n * @since 2.0.0\n */\n\nexport function getEq(EL, EA) {\n  return {\n    equals: function (x, y) {\n      return x === y || (isLeft(x) ? isLeft(y) && EL.equals(x.left, y.left) : isRight(y) && EA.equals(x.right, y.right));\n    }\n  };\n}\n/**\n * Semigroup returning the left-most non-`Left` value. If both operands are `Right`s then the inner values are\n * concatenated using the provided `Semigroup`\n *\n * @example\n * import { getSemigroup, left, right } from 'fp-ts/Either'\n * import { semigroupSum } from 'fp-ts/Semigroup'\n *\n * const S = getSemigroup<string, number>(semigroupSum)\n * assert.deepStrictEqual(S.concat(left('a'), left('b')), left('a'))\n * assert.deepStrictEqual(S.concat(left('a'), right(2)), right(2))\n * assert.deepStrictEqual(S.concat(right(1), left('b')), right(1))\n * assert.deepStrictEqual(S.concat(right(1), right(2)), right(3))\n *\n * @category instances\n * @since 2.0.0\n */\n\nexport function getSemigroup(S) {\n  return {\n    concat: function (x, y) {\n      return isLeft(y) ? x : isLeft(x) ? y : right(S.concat(x.right, y.right));\n    }\n  };\n}\n/**\n * Semigroup returning the left-most `Left` value. If both operands are `Right`s then the inner values\n * are concatenated using the provided `Semigroup`\n *\n * @example\n * import { getApplySemigroup, left, right } from 'fp-ts/Either'\n * import { semigroupSum } from 'fp-ts/Semigroup'\n *\n * const S = getApplySemigroup<string, number>(semigroupSum)\n * assert.deepStrictEqual(S.concat(left('a'), left('b')), left('a'))\n * assert.deepStrictEqual(S.concat(left('a'), right(2)), left('a'))\n * assert.deepStrictEqual(S.concat(right(1), left('b')), left('b'))\n * assert.deepStrictEqual(S.concat(right(1), right(2)), right(3))\n *\n * @category instances\n * @since 2.0.0\n */\n\nexport function getApplySemigroup(S) {\n  return {\n    concat: function (x, y) {\n      return isLeft(x) ? x : isLeft(y) ? y : right(S.concat(x.right, y.right));\n    }\n  };\n}\n/**\n * @category instances\n * @since 2.0.0\n */\n\nexport function getApplyMonoid(M) {\n  return {\n    concat: getApplySemigroup(M).concat,\n    empty: right(M.empty)\n  };\n}\n/**\n * Builds a `Filterable` instance for `Either` given `Monoid` for the left side\n *\n * @category instances\n * @since 3.0.0\n */\n\nexport function getFilterable(M) {\n  var empty = left(M.empty);\n\n  var compact = function (ma) {\n    return isLeft(ma) ? ma : ma.right._tag === 'None' ? empty : right(ma.right.value);\n  };\n\n  var separate = function (ma) {\n    return isLeft(ma) ? {\n      left: ma,\n      right: ma\n    } : isLeft(ma.right) ? {\n      left: right(ma.right.left),\n      right: empty\n    } : {\n      left: empty,\n      right: right(ma.right.right)\n    };\n  };\n\n  var partitionMap = function (ma, f) {\n    if (isLeft(ma)) {\n      return {\n        left: ma,\n        right: ma\n      };\n    }\n\n    var e = f(ma.right);\n    return isLeft(e) ? {\n      left: right(e.left),\n      right: empty\n    } : {\n      left: empty,\n      right: right(e.right)\n    };\n  };\n\n  var partition = function (ma, p) {\n    return isLeft(ma) ? {\n      left: ma,\n      right: ma\n    } : p(ma.right) ? {\n      left: empty,\n      right: right(ma.right)\n    } : {\n      left: right(ma.right),\n      right: empty\n    };\n  };\n\n  var filterMap = function (ma, f) {\n    if (isLeft(ma)) {\n      return ma;\n    }\n\n    var ob = f(ma.right);\n    return ob._tag === 'None' ? empty : right(ob.value);\n  };\n\n  var filter = function (ma, predicate) {\n    return isLeft(ma) ? ma : predicate(ma.right) ? ma : empty;\n  };\n\n  return {\n    URI: URI,\n    _E: undefined,\n    map: map_,\n    compact: compact,\n    separate: separate,\n    filter: filter,\n    filterMap: filterMap,\n    partition: partition,\n    partitionMap: partitionMap\n  };\n}\n/**\n * Builds `Witherable` instance for `Either` given `Monoid` for the left side\n *\n * @category instances\n * @since 2.0.0\n */\n\nexport function getWitherable(M) {\n  var F_ = getFilterable(M);\n\n  var wither = function (F) {\n    var traverseF = traverse_(F);\n    return function (ma, f) {\n      return F.map(traverseF(ma, f), F_.compact);\n    };\n  };\n\n  var wilt = function (F) {\n    var traverseF = traverse_(F);\n    return function (ma, f) {\n      return F.map(traverseF(ma, f), F_.separate);\n    };\n  };\n\n  return {\n    URI: URI,\n    _E: undefined,\n    map: map_,\n    compact: F_.compact,\n    separate: F_.separate,\n    filter: F_.filter,\n    filterMap: F_.filterMap,\n    partition: F_.partition,\n    partitionMap: F_.partitionMap,\n    traverse: traverse_,\n    sequence: sequence,\n    reduce: reduce_,\n    foldMap: foldMap_,\n    reduceRight: reduceRight_,\n    wither: wither,\n    wilt: wilt\n  };\n}\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport function getApplicativeValidation(SE) {\n  return {\n    URI: URI,\n    _E: undefined,\n    map: map_,\n    ap: function (fab, fa) {\n      return isLeft(fab) ? isLeft(fa) ? left(SE.concat(fab.left, fa.left)) : fab : isLeft(fa) ? fa : right(fab.right(fa.right));\n    },\n    of: of\n  };\n}\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport function getAltValidation(SE) {\n  return {\n    URI: URI,\n    _E: undefined,\n    map: map_,\n    alt: function (me, that) {\n      if (isRight(me)) {\n        return me;\n      }\n\n      var ea = that();\n      return isLeft(ea) ? left(SE.concat(me.left, ea.left)) : ea;\n    }\n  };\n} // TODO: remove in v3\n\n/**\n * @category instances\n * @since 2.0.0\n */\n\nexport function getValidation(SE) {\n  var applicativeValidation = getApplicativeValidation(SE);\n  var altValidation = getAltValidation(SE);\n  return {\n    URI: URI,\n    _E: undefined,\n    map: map_,\n    of: of,\n    chain: chain_,\n    bimap: bimap_,\n    mapLeft: mapLeft_,\n    reduce: reduce_,\n    foldMap: foldMap_,\n    reduceRight: reduceRight_,\n    extend: extend_,\n    traverse: traverse_,\n    sequence: sequence,\n    chainRec: chainRec_,\n    throwError: throwError,\n    ap: applicativeValidation.ap,\n    alt: altValidation.alt\n  };\n}\n/**\n * @category instances\n * @since 2.0.0\n */\n\nexport function getValidationSemigroup(SE, SA) {\n  return {\n    concat: function (x, y) {\n      return isLeft(x) ? isLeft(y) ? left(SE.concat(x.left, y.left)) : x : isLeft(y) ? y : right(SA.concat(x.right, y.right));\n    }\n  };\n}\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Functor = {\n  URI: URI,\n  map: map_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Applicative = {\n  URI: URI,\n  map: map_,\n  ap: ap_,\n  of: of\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Monad = {\n  URI: URI,\n  map: map_,\n  ap: ap_,\n  of: of,\n  chain: chain_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Foldable = {\n  URI: URI,\n  reduce: reduce_,\n  foldMap: foldMap_,\n  reduceRight: reduceRight_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Traversable = {\n  URI: URI,\n  map: map_,\n  reduce: reduce_,\n  foldMap: foldMap_,\n  reduceRight: reduceRight_,\n  traverse: traverse_,\n  sequence: sequence\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Bifunctor = {\n  URI: URI,\n  bimap: bimap_,\n  mapLeft: mapLeft_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Alt = {\n  URI: URI,\n  map: map_,\n  alt: alt_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Extend = {\n  URI: URI,\n  map: map_,\n  extend: extend_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var ChainRec = {\n  URI: URI,\n  map: map_,\n  ap: ap_,\n  chain: chain_,\n  chainRec: chainRec_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var MonadThrow = {\n  URI: URI,\n  map: map_,\n  ap: ap_,\n  of: of,\n  chain: chain_,\n  throwError: throwError\n};\n/**\n * @category instances\n * @since 2.0.0\n */\n\nexport function getValidationMonoid(SE, SA) {\n  return {\n    concat: getValidationSemigroup(SE, SA).concat,\n    empty: right(SA.empty)\n  };\n}\n/**\n * @category instances\n * @since 2.0.0\n */\n\nexport var either = {\n  URI: URI,\n  map: map_,\n  of: of,\n  ap: ap_,\n  chain: chain_,\n  reduce: reduce_,\n  foldMap: foldMap_,\n  reduceRight: reduceRight_,\n  traverse: traverse_,\n  sequence: sequence,\n  bimap: bimap_,\n  mapLeft: mapLeft_,\n  alt: alt_,\n  extend: extend_,\n  chainRec: chainRec_,\n  throwError: throwError\n}; // -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n\n/**\n * Default value for the `onError` argument of `tryCatch`\n *\n * @since 2.0.0\n */\n\nexport function toError(e) {\n  return e instanceof Error ? e : new Error(String(e));\n}\n/**\n * @since 2.0.0\n */\n\nexport function elem(E) {\n  return function (a, ma) {\n    return isLeft(ma) ? false : E.equals(a, ma.right);\n  };\n}\n/**\n * Returns `false` if `Left` or returns the result of the application of the given predicate to the `Right` value.\n *\n * @example\n * import { exists, left, right } from 'fp-ts/Either'\n *\n * const gt2 = exists((n: number) => n > 2)\n *\n * assert.strictEqual(gt2(left('a')), false)\n * assert.strictEqual(gt2(right(1)), false)\n * assert.strictEqual(gt2(right(3)), true)\n *\n * @since 2.0.0\n */\n\nexport function exists(predicate) {\n  return function (ma) {\n    return isLeft(ma) ? false : predicate(ma.right);\n  };\n} // -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n\n/**\n * @since 2.9.0\n */\n\nexport var Do = /*#__PURE__*/of({});\n/**\n * @since 2.8.0\n */\n\nexport var bindTo = function (name) {\n  return map(bindTo_(name));\n};\n/**\n * @since 2.8.0\n */\n\nexport var bindW = function (name, f) {\n  return chainW(function (a) {\n    return pipe(f(a), map(function (b) {\n      return bind_(a, name, b);\n    }));\n  });\n};\n/**\n * @since 2.8.0\n */\n\nexport var bind = bindW; // -------------------------------------------------------------------------------------\n// pipeable sequence S\n// -------------------------------------------------------------------------------------\n\n/**\n * @since 2.8.0\n */\n\nexport var apSW = function (name, fb) {\n  return flow(map(function (a) {\n    return function (b) {\n      return bind_(a, name, b);\n    };\n  }), apW(fb));\n};\n/**\n * @since 2.8.0\n */\n\nexport var apS = apSW; // -------------------------------------------------------------------------------------\n// array utils\n// -------------------------------------------------------------------------------------\n\n/**\n *\n * @since 2.9.0\n */\n\nexport var traverseArrayWithIndex = function (f) {\n  return function (arr) {\n    // tslint:disable-next-line: readonly-array\n    var result = [];\n\n    for (var i = 0; i < arr.length; i++) {\n      var e = f(i, arr[i]);\n\n      if (e._tag === 'Left') {\n        return e;\n      }\n\n      result.push(e.right);\n    }\n\n    return right(result);\n  };\n};\n/**\n * map an array using provided function to Either then transform to Either of the array\n * this function have the same behavior of `A.traverse(E.either)` but it's optimized and perform better\n *\n * @example\n *\n *\n * import { traverseArray, left, right, fromPredicate } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import * as A from 'fp-ts/Array'\n *\n * const arr = A.range(0, 10)\n * assert.deepStrictEqual(\n *   pipe(\n *     arr,\n *     traverseArray((x) => right(x))\n *   ),\n *   right(arr)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     arr,\n *     traverseArray(\n *       fromPredicate(\n *         (x) => x > 5,\n *         () => 'a'\n *       )\n *     )\n *   ),\n *   left('a')\n * )\n * @since 2.9.0\n */\n\nexport var traverseArray = function (f) {\n  return traverseArrayWithIndex(function (_, a) {\n    return f(a);\n  });\n};\n/**\n * convert an array of either to an either of array\n * this function have the same behavior of `A.sequence(E.either)` but it's optimized and perform better\n *\n * @example\n *\n * import { sequenceArray, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import * as A from 'fp-ts/Array'\n *\n * const arr = A.range(0, 10)\n * assert.deepStrictEqual(pipe(arr, A.map(right), sequenceArray), right(arr))\n * assert.deepStrictEqual(pipe(arr, A.map(right), A.cons(left('Error')), sequenceArray), left('Error'))\n *\n * @since 2.9.0\n */\n\nexport var sequenceArray = /*#__PURE__*/traverseArray(identity);","map":{"version":3,"names":["tailRec","identity","pipe","bind_","bindTo_","flow","isLeft","ma","_tag","isRight","left","e","right","a","fromNullable","tryCatch","f","onError","parseJSON","s","JSON","parse","stringifyJSON","u","stringify","fromOption","onNone","value","fromPredicate","predicate","onFalse","fold","onLeft","onRight","getOrElseW","getOrElse","fromNullableK","from","_i","arguments","length","apply","chainNullableK","chain","swap","orElse","filterOrElseW","chainW","filterOrElse","map_","fa","map","ap_","fab","ap","chain_","reduce_","b","reduce","foldMap_","M","foldMapM","foldMap","reduceRight_","reduceRight","traverse_","F","traverseF","traverse","ta","bimap_","g","bimap","mapLeft_","mapLeft","alt_","that","alt","extend_","wa","extend","chainRec_","apW","apFirst","fb","apSecond","of","chainFirstW","chainFirst","flatten","altW","duplicate","empty","sequence","throwError","URI","getShow","SE","SA","show","getEq","EL","EA","equals","x","y","getSemigroup","S","concat","getApplySemigroup","getApplyMonoid","getFilterable","compact","separate","partitionMap","partition","p","filterMap","ob","filter","_E","undefined","getWitherable","F_","wither","wilt","getApplicativeValidation","getAltValidation","me","ea","getValidation","applicativeValidation","altValidation","chainRec","getValidationSemigroup","Functor","Applicative","Monad","Foldable","Traversable","Bifunctor","Alt","Extend","ChainRec","MonadThrow","getValidationMonoid","either","toError","Error","String","elem","E","exists","Do","bindTo","name","bindW","bind","apSW","apS","traverseArrayWithIndex","arr","result","i","push","traverseArray","_","sequenceArray"],"sources":["/Users/ngocban/Desktop/imx-integration-reactjs/node_modules/fp-ts/es6/Either.js"],"sourcesContent":["import { tailRec } from './ChainRec';\nimport { identity, pipe, bind_, bindTo_, flow } from './function';\n// -------------------------------------------------------------------------------------\n// guards\n// -------------------------------------------------------------------------------------\n/**\n * Returns `true` if the either is an instance of `Left`, `false` otherwise.\n *\n * @category guards\n * @since 2.0.0\n */\nexport var isLeft = function (ma) { return ma._tag === 'Left'; };\n/**\n * Returns `true` if the either is an instance of `Right`, `false` otherwise.\n *\n * @category guards\n * @since 2.0.0\n */\nexport var isRight = function (ma) { return ma._tag === 'Right'; };\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * Constructs a new `Either` holding a `Left` value. This usually represents a failure, due to the right-bias of this\n * structure.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var left = function (e) { return ({ _tag: 'Left', left: e }); };\n/**\n * Constructs a new `Either` holding a `Right` value. This usually represents a successful value due to the right bias\n * of this structure.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var right = function (a) { return ({ _tag: 'Right', right: a }); };\n// TODO: make lazy in v3\n/**\n * Takes a default and a nullable value, if the value is not nully, turn it into a `Right`, if the value is nully use\n * the provided default as a `Left`.\n *\n * @example\n * import { fromNullable, left, right } from 'fp-ts/Either'\n *\n * const parse = fromNullable('nully')\n *\n * assert.deepStrictEqual(parse(1), right(1))\n * assert.deepStrictEqual(parse(null), left('nully'))\n *\n * @category constructors\n * @since 2.0.0\n */\nexport function fromNullable(e) {\n    return function (a) { return (a == null ? left(e) : right(a)); };\n}\n// TODO: `onError => Lazy<A> => Either` in v3\n/**\n * Constructs a new `Either` from a function that might throw.\n *\n * @example\n * import { Either, left, right, tryCatch } from 'fp-ts/Either'\n *\n * const unsafeHead = <A>(as: Array<A>): A => {\n *   if (as.length > 0) {\n *     return as[0]\n *   } else {\n *     throw new Error('empty array')\n *   }\n * }\n *\n * const head = <A>(as: Array<A>): Either<Error, A> => {\n *   return tryCatch(() => unsafeHead(as), e => (e instanceof Error ? e : new Error('unknown error')))\n * }\n *\n * assert.deepStrictEqual(head([]), left(new Error('empty array')))\n * assert.deepStrictEqual(head([1, 2, 3]), right(1))\n *\n * @category constructors\n * @since 2.0.0\n */\nexport function tryCatch(f, onError) {\n    try {\n        return right(f());\n    }\n    catch (e) {\n        return left(onError(e));\n    }\n}\n// TODO curry in v3\n/**\n * Converts a JavaScript Object Notation (JSON) string into an object.\n *\n * @example\n * import { parseJSON, toError, right, left } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(parseJSON('{\"a\":1}', toError), right({ a: 1 }))\n * assert.deepStrictEqual(parseJSON('{\"a\":}', toError), left(new SyntaxError('Unexpected token } in JSON at position 5')))\n *\n * @category constructors\n * @since 2.0.0\n */\nexport function parseJSON(s, onError) {\n    return tryCatch(function () { return JSON.parse(s); }, onError);\n}\n// TODO curry in v3\n/**\n * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n *\n * @example\n * import * as E from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(E.stringifyJSON({ a: 1 }, E.toError), E.right('{\"a\":1}'))\n * const circular: any = { ref: null }\n * circular.ref = circular\n * assert.deepStrictEqual(\n *   pipe(\n *     E.stringifyJSON(circular, E.toError),\n *     E.mapLeft(e => e.message.includes('Converting circular structure to JSON'))\n *   ),\n *   E.left(true)\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\nexport function stringifyJSON(u, onError) {\n    return tryCatch(function () { return JSON.stringify(u); }, onError);\n}\n/**\n * Derivable from `MonadThrow`.\n *\n * @example\n * import { fromOption, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import { none, some } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     some(1),\n *     fromOption(() => 'error')\n *   ),\n *   right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     none,\n *     fromOption(() => 'error')\n *   ),\n *   left('error')\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var fromOption = function (onNone) { return function (ma) {\n    return ma._tag === 'None' ? left(onNone()) : right(ma.value);\n}; };\n/**\n * Derivable from `MonadThrow`.\n *\n * @example\n * import { fromPredicate, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     1,\n *     fromPredicate(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     -1,\n *     fromPredicate(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   left('error')\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var fromPredicate = function (predicate, onFalse) { return function (a) { return (predicate(a) ? right(a) : left(onFalse(a))); }; };\n// -------------------------------------------------------------------------------------\n// destructors\n// -------------------------------------------------------------------------------------\n/**\n * Takes two functions and an `Either` value, if the value is a `Left` the inner value is applied to the first function,\n * if the value is a `Right` the inner value is applied to the second function.\n *\n * @example\n * import { fold, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * function onLeft(errors: Array<string>): string {\n *   return `Errors: ${errors.join(', ')}`\n * }\n *\n * function onRight(value: number): string {\n *   return `Ok: ${value}`\n * }\n *\n * assert.strictEqual(\n *   pipe(\n *     right(1),\n *     fold(onLeft, onRight)\n *   ),\n *   'Ok: 1'\n * )\n * assert.strictEqual(\n *   pipe(\n *     left(['error 1', 'error 2']),\n *     fold(onLeft, onRight)\n *   ),\n *   'Errors: error 1, error 2'\n * )\n *\n * @category destructors\n * @since 2.0.0\n */\nexport function fold(onLeft, onRight) {\n    return function (ma) { return (isLeft(ma) ? onLeft(ma.left) : onRight(ma.right)); };\n}\n/**\n * Less strict version of [`getOrElse`](#getOrElse).\n *\n * @category destructors\n * @since 2.6.0\n */\nexport var getOrElseW = function (onLeft) { return function (ma) {\n    return isLeft(ma) ? onLeft(ma.left) : ma.right;\n}; };\n/**\n * Returns the wrapped value if it's a `Right` or a default value if is a `Left`.\n *\n * @example\n * import { getOrElse, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     right(1),\n *     getOrElse(() => 0)\n *   ),\n *   1\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     left('error'),\n *     getOrElse(() => 0)\n *   ),\n *   0\n * )\n *\n * @category destructors\n * @since 2.0.0\n */\nexport var getOrElse = getOrElseW;\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * @category combinators\n * @since 2.9.0\n */\nexport function fromNullableK(e) {\n    var from = fromNullable(e);\n    return function (f) { return function () {\n        var a = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            a[_i] = arguments[_i];\n        }\n        return from(f.apply(void 0, a));\n    }; };\n}\n/**\n * @category combinators\n * @since 2.9.0\n */\nexport function chainNullableK(e) {\n    var from = fromNullableK(e);\n    return function (f) { return chain(from(f)); };\n}\n/**\n * Returns a `Right` if is a `Left` (and vice versa).\n *\n * @category combinators\n * @since 2.0.0\n */\nexport function swap(ma) {\n    return isLeft(ma) ? right(ma.left) : left(ma.right);\n}\n/**\n * Useful for recovering from errors.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport function orElse(onLeft) {\n    return function (ma) { return (isLeft(ma) ? onLeft(ma.left) : ma); };\n}\n/**\n * Less strict version of [`filterOrElse`](#filterOrElse).\n *\n * @since 2.9.0\n */\nexport var filterOrElseW = function (predicate, onFalse) {\n    return chainW(function (a) { return (predicate(a) ? right(a) : left(onFalse(a))); });\n};\n/**\n * Derivable from `MonadThrow`.\n *\n * @example\n * import { filterOrElse, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     right(1),\n *     filterOrElse(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     right(-1),\n *     filterOrElse(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   left('error')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     left('a'),\n *     filterOrElse(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   left('a')\n * )\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var filterOrElse = filterOrElseW;\n// -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\nvar map_ = function (fa, f) { return pipe(fa, map(f)); };\nvar ap_ = function (fab, fa) { return pipe(fab, ap(fa)); };\n/* istanbul ignore next */\nvar chain_ = function (ma, f) { return pipe(ma, chain(f)); };\n/* istanbul ignore next */\nvar reduce_ = function (fa, b, f) { return pipe(fa, reduce(b, f)); };\n/* istanbul ignore next */\nvar foldMap_ = function (M) { return function (fa, f) {\n    var foldMapM = foldMap(M);\n    return pipe(fa, foldMapM(f));\n}; };\n/* istanbul ignore next */\nvar reduceRight_ = function (fa, b, f) { return pipe(fa, reduceRight(b, f)); };\nvar traverse_ = function (F) {\n    var traverseF = traverse(F);\n    return function (ta, f) { return pipe(ta, traverseF(f)); };\n};\nvar bimap_ = function (fa, f, g) { return pipe(fa, bimap(f, g)); };\nvar mapLeft_ = function (fa, f) { return pipe(fa, mapLeft(f)); };\n/* istanbul ignore next */\nvar alt_ = function (fa, that) { return pipe(fa, alt(that)); };\n/* istanbul ignore next */\nvar extend_ = function (wa, f) { return pipe(wa, extend(f)); };\nvar chainRec_ = function (a, f) {\n    return tailRec(f(a), function (e) {\n        return isLeft(e) ? right(left(e.left)) : isLeft(e.right) ? left(f(e.right.left)) : right(right(e.right.right));\n    });\n};\n// -------------------------------------------------------------------------------------\n// pipeables\n// -------------------------------------------------------------------------------------\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category Functor\n * @since 2.0.0\n */\nexport var map = function (f) { return function (fa) {\n    return isLeft(fa) ? fa : right(f(fa.right));\n}; };\n/**\n * Map a pair of functions over the two type arguments of the bifunctor.\n *\n * @category Bifunctor\n * @since 2.0.0\n */\nexport var bimap = function (f, g) { return function (fa) { return (isLeft(fa) ? left(f(fa.left)) : right(g(fa.right))); }; };\n/**\n * Map a function over the first type argument of a bifunctor.\n *\n * @category Bifunctor\n * @since 2.0.0\n */\nexport var mapLeft = function (f) { return function (fa) {\n    return isLeft(fa) ? left(f(fa.left)) : fa;\n}; };\n/**\n * Less strict version of [`ap`](#ap).\n *\n * @category Apply\n * @since 2.8.0\n */\nexport var apW = function (fa) { return function (fab) {\n    return isLeft(fab) ? fab : isLeft(fa) ? fa : right(fab.right(fa.right));\n}; };\n/**\n * Apply a function to an argument under a type constructor.\n *\n * @category Apply\n * @since 2.0.0\n */\nexport var ap = apW;\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var apFirst = function (fb) {\n    return flow(map(function (a) { return function () { return a; }; }), ap(fb));\n};\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var apSecond = function (fb) {\n    return flow(map(function () { return function (b) { return b; }; }), ap(fb));\n};\n/**\n * Wrap a value into the type constructor.\n *\n * Equivalent to [`right`](#right).\n *\n * @example\n * import * as E from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(E.of('a'), E.right('a'))\n *\n * @category Applicative\n * @since 2.7.0\n */\nexport var of = right;\n/**\n * Less strict version of [`chain`](#chain).\n *\n * @category Monad\n * @since 2.6.0\n */\nexport var chainW = function (f) { return function (ma) {\n    return isLeft(ma) ? ma : f(ma.right);\n}; };\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation.\n *\n * @category Monad\n * @since 2.0.0\n */\nexport var chain = chainW;\n/**\n * Less strict version of [`chainFirst`](#chainFirst)\n *\n * Derivable from `Monad`.\n *\n * @category combinators\n * @since 2.8.0\n */\nexport var chainFirstW = function (f) { return function (ma) {\n    return pipe(ma, chainW(function (a) {\n        return pipe(f(a), map(function () { return a; }));\n    }));\n}; };\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * Derivable from `Monad`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var chainFirst = chainFirstW;\n/**\n * The `flatten` function is the conventional monad join operator. It is used to remove one level of monadic structure, projecting its bound argument into the outer level.\n *\n * Derivable from `Monad`.\n *\n * @example\n * import * as E from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(E.flatten(E.right(E.right('a'))), E.right('a'))\n * assert.deepStrictEqual(E.flatten(E.right(E.left('e'))), E.left('e'))\n * assert.deepStrictEqual(E.flatten(E.left('e')), E.left('e'))\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var flatten = \n/*#__PURE__*/\nchain(identity);\n/**\n * Less strict version of [`alt`](#alt).\n *\n * @category Alt\n * @since 2.9.0\n */\nexport var altW = function (that) { return function (fa) { return (isLeft(fa) ? that() : fa); }; };\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * @category Alt\n * @since 2.0.0\n */\nexport var alt = altW;\n/**\n * @category Extend\n * @since 2.0.0\n */\nexport var extend = function (f) { return function (wa) {\n    return isLeft(wa) ? wa : right(f(wa));\n}; };\n/**\n * Derivable from `Extend`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var duplicate = \n/*#__PURE__*/\nextend(identity);\n/**\n * Left-associative fold of a structure.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n *\n * const startWith = 'prefix'\n * const concat = (a: string, b: string) => `${a}:${b}`\n *\n * assert.deepStrictEqual(\n *   pipe(E.right('a'), E.reduce(startWith, concat)),\n *   'prefix:a',\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(E.left('e'), E.reduce(startWith, concat)),\n *   'prefix',\n * )\n *\n * @category Foldable\n * @since 2.0.0\n */\nexport var reduce = function (b, f) { return function (fa) {\n    return isLeft(fa) ? b : f(b, fa.right);\n}; };\n/**\n * Map each element of the structure to a monoid, and combine the results.\n *\n * @example\n * import { pipe } from 'fp-ts/function';\n * import * as E from 'fp-ts/Either'\n * import { monoidString } from 'fp-ts/Monoid'\n *\n * const yell = (a: string) => `${a}!`\n *\n * assert.deepStrictEqual(\n *   pipe(E.right('a'), E.foldMap(monoidString)(yell)),\n *   'a!',\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(E.left('e'), E.foldMap(monoidString)(yell)),\n *   monoidString.empty,\n * )\n *\n * @category Foldable\n * @since 2.0.0\n */\nexport var foldMap = function (M) { return function (f) { return function (fa) {\n    return isLeft(fa) ? M.empty : f(fa.right);\n}; }; };\n/**\n * Right-associative fold of a structure.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n *\n * const startWith = 'postfix'\n * const concat = (a: string, b: string) => `${a}:${b}`\n *\n * assert.deepStrictEqual(\n *   pipe(E.right('a'), E.reduceRight(startWith, concat)),\n *   'a:postfix',\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(E.left('e'), E.reduceRight(startWith, concat)),\n *   'postfix',\n * )\n *\n * @category Foldable\n * @since 2.0.0\n */\nexport var reduceRight = function (b, f) { return function (fa) {\n    return isLeft(fa) ? b : f(fa.right, b);\n}; };\n/**\n * Map each element of a structure to an action, evaluate these actions from left to right, and collect the results.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as A from 'fp-ts/Array'\n * import * as E from 'fp-ts/Either'\n * import * as O from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   pipe(E.right(['a']), E.traverse(O.option)(A.head)),\n *   O.some(E.right('a')),\n *  )\n *\n * assert.deepStrictEqual(\n *   pipe(E.right([]), E.traverse(O.option)(A.head)),\n *   O.none,\n * )\n *\n * @category Traversable\n * @since 2.6.3\n */\nexport var traverse = function (F) { return function (f) { return function (ta) { return (isLeft(ta) ? F.of(left(ta.left)) : F.map(f(ta.right), right)); }; }; };\n/**\n * Evaluate each monadic action in the structure from left to right, and collect the results.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n * import * as O from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   pipe(E.right(O.some('a')), E.sequence(O.option)),\n *   O.some(E.right('a')),\n *  )\n *\n * assert.deepStrictEqual(\n *   pipe(E.right(O.none), E.sequence(O.option)),\n *   O.none\n * )\n *\n * @category Traversable\n * @since 2.6.3\n */\nexport var sequence = function (F) { return function (ma) {\n    return isLeft(ma) ? F.of(left(ma.left)) : F.map(ma.right, right);\n}; };\n/**\n * @category MonadThrow\n * @since 2.6.3\n */\nexport var throwError = left;\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var URI = 'Either';\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getShow(SE, SA) {\n    return {\n        show: function (ma) { return (isLeft(ma) ? \"left(\" + SE.show(ma.left) + \")\" : \"right(\" + SA.show(ma.right) + \")\"); }\n    };\n}\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getEq(EL, EA) {\n    return {\n        equals: function (x, y) {\n            return x === y || (isLeft(x) ? isLeft(y) && EL.equals(x.left, y.left) : isRight(y) && EA.equals(x.right, y.right));\n        }\n    };\n}\n/**\n * Semigroup returning the left-most non-`Left` value. If both operands are `Right`s then the inner values are\n * concatenated using the provided `Semigroup`\n *\n * @example\n * import { getSemigroup, left, right } from 'fp-ts/Either'\n * import { semigroupSum } from 'fp-ts/Semigroup'\n *\n * const S = getSemigroup<string, number>(semigroupSum)\n * assert.deepStrictEqual(S.concat(left('a'), left('b')), left('a'))\n * assert.deepStrictEqual(S.concat(left('a'), right(2)), right(2))\n * assert.deepStrictEqual(S.concat(right(1), left('b')), right(1))\n * assert.deepStrictEqual(S.concat(right(1), right(2)), right(3))\n *\n * @category instances\n * @since 2.0.0\n */\nexport function getSemigroup(S) {\n    return {\n        concat: function (x, y) { return (isLeft(y) ? x : isLeft(x) ? y : right(S.concat(x.right, y.right))); }\n    };\n}\n/**\n * Semigroup returning the left-most `Left` value. If both operands are `Right`s then the inner values\n * are concatenated using the provided `Semigroup`\n *\n * @example\n * import { getApplySemigroup, left, right } from 'fp-ts/Either'\n * import { semigroupSum } from 'fp-ts/Semigroup'\n *\n * const S = getApplySemigroup<string, number>(semigroupSum)\n * assert.deepStrictEqual(S.concat(left('a'), left('b')), left('a'))\n * assert.deepStrictEqual(S.concat(left('a'), right(2)), left('a'))\n * assert.deepStrictEqual(S.concat(right(1), left('b')), left('b'))\n * assert.deepStrictEqual(S.concat(right(1), right(2)), right(3))\n *\n * @category instances\n * @since 2.0.0\n */\nexport function getApplySemigroup(S) {\n    return {\n        concat: function (x, y) { return (isLeft(x) ? x : isLeft(y) ? y : right(S.concat(x.right, y.right))); }\n    };\n}\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getApplyMonoid(M) {\n    return {\n        concat: getApplySemigroup(M).concat,\n        empty: right(M.empty)\n    };\n}\n/**\n * Builds a `Filterable` instance for `Either` given `Monoid` for the left side\n *\n * @category instances\n * @since 3.0.0\n */\nexport function getFilterable(M) {\n    var empty = left(M.empty);\n    var compact = function (ma) {\n        return isLeft(ma) ? ma : ma.right._tag === 'None' ? empty : right(ma.right.value);\n    };\n    var separate = function (ma) {\n        return isLeft(ma)\n            ? { left: ma, right: ma }\n            : isLeft(ma.right)\n                ? { left: right(ma.right.left), right: empty }\n                : { left: empty, right: right(ma.right.right) };\n    };\n    var partitionMap = function (ma, f) {\n        if (isLeft(ma)) {\n            return { left: ma, right: ma };\n        }\n        var e = f(ma.right);\n        return isLeft(e) ? { left: right(e.left), right: empty } : { left: empty, right: right(e.right) };\n    };\n    var partition = function (ma, p) {\n        return isLeft(ma)\n            ? { left: ma, right: ma }\n            : p(ma.right)\n                ? { left: empty, right: right(ma.right) }\n                : { left: right(ma.right), right: empty };\n    };\n    var filterMap = function (ma, f) {\n        if (isLeft(ma)) {\n            return ma;\n        }\n        var ob = f(ma.right);\n        return ob._tag === 'None' ? empty : right(ob.value);\n    };\n    var filter = function (ma, predicate) {\n        return isLeft(ma) ? ma : predicate(ma.right) ? ma : empty;\n    };\n    return {\n        URI: URI,\n        _E: undefined,\n        map: map_,\n        compact: compact,\n        separate: separate,\n        filter: filter,\n        filterMap: filterMap,\n        partition: partition,\n        partitionMap: partitionMap\n    };\n}\n/**\n * Builds `Witherable` instance for `Either` given `Monoid` for the left side\n *\n * @category instances\n * @since 2.0.0\n */\nexport function getWitherable(M) {\n    var F_ = getFilterable(M);\n    var wither = function (F) {\n        var traverseF = traverse_(F);\n        return function (ma, f) { return F.map(traverseF(ma, f), F_.compact); };\n    };\n    var wilt = function (F) {\n        var traverseF = traverse_(F);\n        return function (ma, f) { return F.map(traverseF(ma, f), F_.separate); };\n    };\n    return {\n        URI: URI,\n        _E: undefined,\n        map: map_,\n        compact: F_.compact,\n        separate: F_.separate,\n        filter: F_.filter,\n        filterMap: F_.filterMap,\n        partition: F_.partition,\n        partitionMap: F_.partitionMap,\n        traverse: traverse_,\n        sequence: sequence,\n        reduce: reduce_,\n        foldMap: foldMap_,\n        reduceRight: reduceRight_,\n        wither: wither,\n        wilt: wilt\n    };\n}\n/**\n * @category instances\n * @since 2.7.0\n */\nexport function getApplicativeValidation(SE) {\n    return {\n        URI: URI,\n        _E: undefined,\n        map: map_,\n        ap: function (fab, fa) {\n            return isLeft(fab)\n                ? isLeft(fa)\n                    ? left(SE.concat(fab.left, fa.left))\n                    : fab\n                : isLeft(fa)\n                    ? fa\n                    : right(fab.right(fa.right));\n        },\n        of: of\n    };\n}\n/**\n * @category instances\n * @since 2.7.0\n */\nexport function getAltValidation(SE) {\n    return {\n        URI: URI,\n        _E: undefined,\n        map: map_,\n        alt: function (me, that) {\n            if (isRight(me)) {\n                return me;\n            }\n            var ea = that();\n            return isLeft(ea) ? left(SE.concat(me.left, ea.left)) : ea;\n        }\n    };\n}\n// TODO: remove in v3\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getValidation(SE) {\n    var applicativeValidation = getApplicativeValidation(SE);\n    var altValidation = getAltValidation(SE);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: map_,\n        of: of,\n        chain: chain_,\n        bimap: bimap_,\n        mapLeft: mapLeft_,\n        reduce: reduce_,\n        foldMap: foldMap_,\n        reduceRight: reduceRight_,\n        extend: extend_,\n        traverse: traverse_,\n        sequence: sequence,\n        chainRec: chainRec_,\n        throwError: throwError,\n        ap: applicativeValidation.ap,\n        alt: altValidation.alt\n    };\n}\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getValidationSemigroup(SE, SA) {\n    return {\n        concat: function (x, y) {\n            return isLeft(x) ? (isLeft(y) ? left(SE.concat(x.left, y.left)) : x) : isLeft(y) ? y : right(SA.concat(x.right, y.right));\n        }\n    };\n}\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: map_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Applicative = {\n    URI: URI,\n    map: map_,\n    ap: ap_,\n    of: of\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Monad = {\n    URI: URI,\n    map: map_,\n    ap: ap_,\n    of: of,\n    chain: chain_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Foldable = {\n    URI: URI,\n    reduce: reduce_,\n    foldMap: foldMap_,\n    reduceRight: reduceRight_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Traversable = {\n    URI: URI,\n    map: map_,\n    reduce: reduce_,\n    foldMap: foldMap_,\n    reduceRight: reduceRight_,\n    traverse: traverse_,\n    sequence: sequence\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Bifunctor = {\n    URI: URI,\n    bimap: bimap_,\n    mapLeft: mapLeft_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alt = {\n    URI: URI,\n    map: map_,\n    alt: alt_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Extend = {\n    URI: URI,\n    map: map_,\n    extend: extend_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var ChainRec = {\n    URI: URI,\n    map: map_,\n    ap: ap_,\n    chain: chain_,\n    chainRec: chainRec_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var MonadThrow = {\n    URI: URI,\n    map: map_,\n    ap: ap_,\n    of: of,\n    chain: chain_,\n    throwError: throwError\n};\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getValidationMonoid(SE, SA) {\n    return {\n        concat: getValidationSemigroup(SE, SA).concat,\n        empty: right(SA.empty)\n    };\n}\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var either = {\n    URI: URI,\n    map: map_,\n    of: of,\n    ap: ap_,\n    chain: chain_,\n    reduce: reduce_,\n    foldMap: foldMap_,\n    reduceRight: reduceRight_,\n    traverse: traverse_,\n    sequence: sequence,\n    bimap: bimap_,\n    mapLeft: mapLeft_,\n    alt: alt_,\n    extend: extend_,\n    chainRec: chainRec_,\n    throwError: throwError\n};\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * Default value for the `onError` argument of `tryCatch`\n *\n * @since 2.0.0\n */\nexport function toError(e) {\n    return e instanceof Error ? e : new Error(String(e));\n}\n/**\n * @since 2.0.0\n */\nexport function elem(E) {\n    return function (a, ma) { return (isLeft(ma) ? false : E.equals(a, ma.right)); };\n}\n/**\n * Returns `false` if `Left` or returns the result of the application of the given predicate to the `Right` value.\n *\n * @example\n * import { exists, left, right } from 'fp-ts/Either'\n *\n * const gt2 = exists((n: number) => n > 2)\n *\n * assert.strictEqual(gt2(left('a')), false)\n * assert.strictEqual(gt2(right(1)), false)\n * assert.strictEqual(gt2(right(3)), true)\n *\n * @since 2.0.0\n */\nexport function exists(predicate) {\n    return function (ma) { return (isLeft(ma) ? false : predicate(ma.right)); };\n}\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.9.0\n */\nexport var Do = \n/*#__PURE__*/\nof({});\n/**\n * @since 2.8.0\n */\nexport var bindTo = function (name) {\n    return map(bindTo_(name));\n};\n/**\n * @since 2.8.0\n */\nexport var bindW = function (name, f) {\n    return chainW(function (a) {\n        return pipe(f(a), map(function (b) { return bind_(a, name, b); }));\n    });\n};\n/**\n * @since 2.8.0\n */\nexport var bind = bindW;\n// -------------------------------------------------------------------------------------\n// pipeable sequence S\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.8.0\n */\nexport var apSW = function (name, fb) {\n    return flow(map(function (a) { return function (b) { return bind_(a, name, b); }; }), apW(fb));\n};\n/**\n * @since 2.8.0\n */\nexport var apS = apSW;\n// -------------------------------------------------------------------------------------\n// array utils\n// -------------------------------------------------------------------------------------\n/**\n *\n * @since 2.9.0\n */\nexport var traverseArrayWithIndex = function (f) { return function (arr) {\n    // tslint:disable-next-line: readonly-array\n    var result = [];\n    for (var i = 0; i < arr.length; i++) {\n        var e = f(i, arr[i]);\n        if (e._tag === 'Left') {\n            return e;\n        }\n        result.push(e.right);\n    }\n    return right(result);\n}; };\n/**\n * map an array using provided function to Either then transform to Either of the array\n * this function have the same behavior of `A.traverse(E.either)` but it's optimized and perform better\n *\n * @example\n *\n *\n * import { traverseArray, left, right, fromPredicate } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import * as A from 'fp-ts/Array'\n *\n * const arr = A.range(0, 10)\n * assert.deepStrictEqual(\n *   pipe(\n *     arr,\n *     traverseArray((x) => right(x))\n *   ),\n *   right(arr)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     arr,\n *     traverseArray(\n *       fromPredicate(\n *         (x) => x > 5,\n *         () => 'a'\n *       )\n *     )\n *   ),\n *   left('a')\n * )\n * @since 2.9.0\n */\nexport var traverseArray = function (f) { return traverseArrayWithIndex(function (_, a) { return f(a); }); };\n/**\n * convert an array of either to an either of array\n * this function have the same behavior of `A.sequence(E.either)` but it's optimized and perform better\n *\n * @example\n *\n * import { sequenceArray, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import * as A from 'fp-ts/Array'\n *\n * const arr = A.range(0, 10)\n * assert.deepStrictEqual(pipe(arr, A.map(right), sequenceArray), right(arr))\n * assert.deepStrictEqual(pipe(arr, A.map(right), A.cons(left('Error')), sequenceArray), left('Error'))\n *\n * @since 2.9.0\n */\nexport var sequenceArray = \n/*#__PURE__*/\ntraverseArray(identity);\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,YAAxB;AACA,SAASC,QAAT,EAAmBC,IAAnB,EAAyBC,KAAzB,EAAgCC,OAAhC,EAAyCC,IAAzC,QAAqD,YAArD,C,CACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,MAAM,GAAG,UAAUC,EAAV,EAAc;EAAE,OAAOA,EAAE,CAACC,IAAH,KAAY,MAAnB;AAA4B,CAAzD;AACP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,OAAO,GAAG,UAAUF,EAAV,EAAc;EAAE,OAAOA,EAAE,CAACC,IAAH,KAAY,OAAnB;AAA6B,CAA3D,C,CACP;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIE,IAAI,GAAG,UAAUC,CAAV,EAAa;EAAE,OAAQ;IAAEH,IAAI,EAAE,MAAR;IAAgBE,IAAI,EAAEC;EAAtB,CAAR;AAAqC,CAA/D;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,KAAK,GAAG,UAAUC,CAAV,EAAa;EAAE,OAAQ;IAAEL,IAAI,EAAE,OAAR;IAAiBI,KAAK,EAAEC;EAAxB,CAAR;AAAuC,CAAlE,C,CACP;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,CAAsBH,CAAtB,EAAyB;EAC5B,OAAO,UAAUE,CAAV,EAAa;IAAE,OAAQA,CAAC,IAAI,IAAL,GAAYH,IAAI,CAACC,CAAD,CAAhB,GAAsBC,KAAK,CAACC,CAAD,CAAnC;EAA0C,CAAhE;AACH,C,CACD;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,QAAT,CAAkBC,CAAlB,EAAqBC,OAArB,EAA8B;EACjC,IAAI;IACA,OAAOL,KAAK,CAACI,CAAC,EAAF,CAAZ;EACH,CAFD,CAGA,OAAOL,CAAP,EAAU;IACN,OAAOD,IAAI,CAACO,OAAO,CAACN,CAAD,CAAR,CAAX;EACH;AACJ,C,CACD;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASO,SAAT,CAAmBC,CAAnB,EAAsBF,OAAtB,EAA+B;EAClC,OAAOF,QAAQ,CAAC,YAAY;IAAE,OAAOK,IAAI,CAACC,KAAL,CAAWF,CAAX,CAAP;EAAuB,CAAtC,EAAwCF,OAAxC,CAAf;AACH,C,CACD;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,aAAT,CAAuBC,CAAvB,EAA0BN,OAA1B,EAAmC;EACtC,OAAOF,QAAQ,CAAC,YAAY;IAAE,OAAOK,IAAI,CAACI,SAAL,CAAeD,CAAf,CAAP;EAA2B,CAA1C,EAA4CN,OAA5C,CAAf;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIQ,UAAU,GAAG,UAAUC,MAAV,EAAkB;EAAE,OAAO,UAAUnB,EAAV,EAAc;IAC7D,OAAOA,EAAE,CAACC,IAAH,KAAY,MAAZ,GAAqBE,IAAI,CAACgB,MAAM,EAAP,CAAzB,GAAsCd,KAAK,CAACL,EAAE,CAACoB,KAAJ,CAAlD;EACH,CAF2C;AAExC,CAFG;AAGP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,aAAa,GAAG,UAAUC,SAAV,EAAqBC,OAArB,EAA8B;EAAE,OAAO,UAAUjB,CAAV,EAAa;IAAE,OAAQgB,SAAS,CAAChB,CAAD,CAAT,GAAeD,KAAK,CAACC,CAAD,CAApB,GAA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"},"metadata":{},"sourceType":"module"}