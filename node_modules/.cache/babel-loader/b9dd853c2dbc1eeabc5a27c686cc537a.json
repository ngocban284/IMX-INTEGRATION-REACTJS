{"ast":null,"code":"var _jsxFileName = \"/Users/ngocban/Desktop/imx-integration-reactjs/src/Bridging.tsx\",\n    _s = $RefreshSig$();\n\nimport { ERC721TokenType, ETHTokenType, ImmutableRollupStatus } from \"@imtbl/imx-sdk\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire(\"dotenv\").config();\n\nconst Bridging = _ref => {\n  _s();\n\n  let {\n    client,\n    link,\n    wallet\n  } = _ref;\n  // withdrawals\n  const [preparingWithdrawals, setPreparingWithdrawals] = useState(Object);\n  const [readyWithdrawals, setReadyWithdrawals] = useState(Object);\n  const [completedWithdrawals, setCompletedWithdrawals] = useState(Object); // eth\n\n  const [depositAmount, setDepositAmount] = useState(\"\");\n  const [prepareAmount, setPrepareAmount] = useState(\"\"); // nft\n\n  const [depositTokenId, setDepositTokenId] = useState(\"\");\n  const [depositTokenAddress, setDepositTokenAddress] = useState(\"\");\n  const [prepareTokenId, setPrepareTokenId] = useState(\"\");\n  const [prepareTokenAddress, setPrepareTokenAddress] = useState(\"\");\n  const [completeTokenId, setCompleteTokenId] = useState(\"\");\n  const [completeTokenAddress, setCompleteTokenAddress] = useState(\"\");\n  useEffect(() => {\n    load();\n  }, []);\n\n  async function load() {\n    setPreparingWithdrawals(await client.getWithdrawals({\n      user: wallet,\n      rollup_status: ImmutableRollupStatus.included\n    })); // included in batch awaiting confirmation\n\n    setReadyWithdrawals(await client.getWithdrawals({\n      user: wallet,\n      rollup_status: ImmutableRollupStatus.confirmed,\n      withdrawn_to_wallet: false\n    })); // confirmed on-chain in a batch and ready to be withdrawn\n\n    setCompletedWithdrawals(await client.getWithdrawals({\n      user: wallet,\n      withdrawn_to_wallet: true\n    })); // confirmed on-chain in a batch and already withdrawn to L1 wallet\n  } // deposit an NFT\n\n\n  async function depositNFT() {\n    await link.deposit({\n      type: ERC721TokenType.ERC721,\n      tokenId: depositTokenId,\n      tokenAddress: depositTokenAddress\n    });\n  } // deposit eth\n\n\n  async function depositETH() {\n    await link.deposit({\n      type: ETHTokenType.ETH,\n      amount: depositAmount\n    });\n  } // prepare an NFT withdrawal\n\n\n  async function prepareWithdrawalNFT() {\n    await link.prepareWithdrawal({\n      type: ERC721TokenType.ERC721,\n      tokenId: prepareTokenId,\n      tokenAddress: prepareTokenAddress\n    });\n  } // prepare an eth withdrawal\n\n\n  async function prepareWithdrawalETH() {\n    await link.prepareWithdrawal({\n      type: ETHTokenType.ETH,\n      amount: prepareAmount\n    });\n  } // complete an NFT withdrawal\n\n\n  async function completeWithdrawalNFT() {\n    await link.completeWithdrawal({\n      type: ERC721TokenType.ERC721,\n      tokenId: completeTokenId,\n      tokenAddress: completeTokenAddress\n    });\n  } // complete an eth withdrawal\n\n\n  async function completeWithdrawalETH() {\n    await link.completeWithdrawal({\n      type: ETHTokenType.ETH\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"border border-info\",\n      children: \"ERC20\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-body-filter\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Deposit ETH:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount (ETH):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: depositAmount,\n          onChange: e => setDepositAmount(e.target.value),\n          className: \"form-control bg-black border-info text-white ms-1 mt-1 mb-1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-info filter-button text-white\",\n          onClick: depositETH,\n          children: \"Deposit ETH\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Prepare ETH for withdrawal (submit to be rolled up and confirmed on chain in the next batch):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount (ETH):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: prepareAmount,\n          onChange: e => setPrepareAmount(e.target.value),\n          className: \"form-control bg-black border-info text-white ms-1 mt-1 mb-1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-info filter-button text-white\",\n          onClick: prepareWithdrawalETH,\n          children: \"Prepare ETH Withdrawal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Complete ETH withdrawal (withdraws entire eth balance that is ready for withdrawal to L1 wallet):\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: completeWithdrawalETH,\n          children: \"Complete ETH Withdrawal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-body-filter\",\n      children: [\"ERC721:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Deposit NFT:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Token ID:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: depositTokenId,\n            onChange: e => setDepositTokenId(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Token Address:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: depositTokenAddress,\n            onChange: e => setDepositTokenAddress(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: depositNFT,\n          children: \"Deposit NFT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Prepare NFT for withdrawal (submit to be rolled up and confirmed on chain in the next batch):\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Token ID:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: prepareTokenId,\n            onChange: e => setPrepareTokenId(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Token Address:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: prepareTokenAddress,\n            onChange: e => setPrepareTokenAddress(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: prepareWithdrawalNFT,\n          children: \"Prepare NFT Withdrawal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Complete NFT withdrawal (withdraws single NFT that is ready for withdrawal to L1 wallet):\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Token ID:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: completeTokenId,\n            onChange: e => setCompleteTokenId(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Token Address:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: completeTokenAddress,\n            onChange: e => setCompleteTokenAddress(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: completeWithdrawalNFT,\n          children: \"Complete NFT Withdrawal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Withdrawals being prepared:\", JSON.stringify(preparingWithdrawals)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Ready for withdrawal:\", JSON.stringify(readyWithdrawals)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Withdrawn to wallet:\", JSON.stringify(completedWithdrawals)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Bridging, \"UYAgiTvAaq/gCKtTMM5JBFkL2zY=\");\n\n_c = Bridging;\nexport default Bridging;\n\nvar _c;\n\n$RefreshReg$(_c, \"Bridging\");","map":{"version":3,"names":["ERC721TokenType","ETHTokenType","ImmutableRollupStatus","useEffect","useState","require","config","Bridging","client","link","wallet","preparingWithdrawals","setPreparingWithdrawals","Object","readyWithdrawals","setReadyWithdrawals","completedWithdrawals","setCompletedWithdrawals","depositAmount","setDepositAmount","prepareAmount","setPrepareAmount","depositTokenId","setDepositTokenId","depositTokenAddress","setDepositTokenAddress","prepareTokenId","setPrepareTokenId","prepareTokenAddress","setPrepareTokenAddress","completeTokenId","setCompleteTokenId","completeTokenAddress","setCompleteTokenAddress","load","getWithdrawals","user","rollup_status","included","confirmed","withdrawn_to_wallet","depositNFT","deposit","type","ERC721","tokenId","tokenAddress","depositETH","ETH","amount","prepareWithdrawalNFT","prepareWithdrawal","prepareWithdrawalETH","completeWithdrawalNFT","completeWithdrawal","completeWithdrawalETH","e","target","value","JSON","stringify"],"sources":["/Users/ngocban/Desktop/imx-integration-reactjs/src/Bridging.tsx"],"sourcesContent":["import {\n  Link,\n  ImmutableXClient,\n  ImmutableMethodResults,\n  ERC721TokenType,\n  ETHTokenType,\n  ImmutableRollupStatus,\n} from \"@imtbl/imx-sdk\";\nimport { useEffect, useState } from \"react\";\nrequire(\"dotenv\").config();\n\ninterface BridgingProps {\n  client: ImmutableXClient;\n  link: Link;\n  wallet: string;\n}\n\nconst Bridging = ({ client, link, wallet }: BridgingProps) => {\n  // withdrawals\n  const [preparingWithdrawals, setPreparingWithdrawals] =\n    useState<ImmutableMethodResults.ImmutableGetWithdrawalsResult>(Object);\n  const [readyWithdrawals, setReadyWithdrawals] =\n    useState<ImmutableMethodResults.ImmutableGetWithdrawalsResult>(Object);\n  const [completedWithdrawals, setCompletedWithdrawals] =\n    useState<ImmutableMethodResults.ImmutableGetWithdrawalsResult>(Object);\n  // eth\n  const [depositAmount, setDepositAmount] = useState(\"\");\n  const [prepareAmount, setPrepareAmount] = useState(\"\");\n  // nft\n  const [depositTokenId, setDepositTokenId] = useState(\"\");\n  const [depositTokenAddress, setDepositTokenAddress] = useState(\"\");\n  const [prepareTokenId, setPrepareTokenId] = useState(\"\");\n  const [prepareTokenAddress, setPrepareTokenAddress] = useState(\"\");\n  const [completeTokenId, setCompleteTokenId] = useState(\"\");\n  const [completeTokenAddress, setCompleteTokenAddress] = useState(\"\");\n\n  useEffect(() => {\n    load();\n  }, []);\n\n  async function load(): Promise<void> {\n    setPreparingWithdrawals(\n      await client.getWithdrawals({\n        user: wallet,\n        rollup_status: ImmutableRollupStatus.included,\n      })\n    ); // included in batch awaiting confirmation\n    setReadyWithdrawals(\n      await client.getWithdrawals({\n        user: wallet,\n        rollup_status: ImmutableRollupStatus.confirmed,\n        withdrawn_to_wallet: false,\n      })\n    ); // confirmed on-chain in a batch and ready to be withdrawn\n    setCompletedWithdrawals(\n      await client.getWithdrawals({\n        user: wallet,\n        withdrawn_to_wallet: true,\n      })\n    ); // confirmed on-chain in a batch and already withdrawn to L1 wallet\n  }\n\n  // deposit an NFT\n  async function depositNFT() {\n    await link.deposit({\n      type: ERC721TokenType.ERC721,\n      tokenId: depositTokenId,\n      tokenAddress: depositTokenAddress,\n    });\n  }\n\n  // deposit eth\n  async function depositETH() {\n    await link.deposit({\n      type: ETHTokenType.ETH,\n      amount: depositAmount,\n    });\n  }\n\n  // prepare an NFT withdrawal\n  async function prepareWithdrawalNFT() {\n    await link.prepareWithdrawal({\n      type: ERC721TokenType.ERC721,\n      tokenId: prepareTokenId,\n      tokenAddress: prepareTokenAddress,\n    });\n  }\n\n  // prepare an eth withdrawal\n  async function prepareWithdrawalETH() {\n    await link.prepareWithdrawal({\n      type: ETHTokenType.ETH,\n      amount: prepareAmount,\n    });\n  }\n\n  // complete an NFT withdrawal\n  async function completeWithdrawalNFT() {\n    await link.completeWithdrawal({\n      type: ERC721TokenType.ERC721,\n      tokenId: completeTokenId,\n      tokenAddress: completeTokenAddress,\n    });\n  }\n\n  // complete an eth withdrawal\n  async function completeWithdrawalETH() {\n    await link.completeWithdrawal({\n      type: ETHTokenType.ETH,\n    });\n  }\n\n  return (\n    <div>\n      <h2 className=\"border border-info\">ERC20</h2>\n      <br />\n      <br />\n      <div className=\"text-body-filter\">\n        <div>\n          <h4>Deposit ETH:</h4>\n          <br />\n          <label>Amount (ETH):</label>\n          <input\n            type=\"text\"\n            value={depositAmount}\n            onChange={(e) => setDepositAmount(e.target.value)}\n            className=\"form-control bg-black border-info text-white ms-1 mt-1 mb-1\"\n          />\n          <button\n            type=\"button\"\n            className=\"btn btn-info filter-button text-white\"\n            onClick={depositETH}\n          >\n            Deposit ETH\n          </button>\n        </div>\n        <br />\n        <br />\n        <div>\n          <h4>\n            Prepare ETH for withdrawal (submit to be rolled up and confirmed on\n            chain in the next batch):\n          </h4>\n          <br />\n          <label>Amount (ETH):</label>\n          <input\n            type=\"text\"\n            value={prepareAmount}\n            onChange={(e) => setPrepareAmount(e.target.value)}\n            className=\"form-control bg-black border-info text-white ms-1 mt-1 mb-1\"\n          />\n\n          <button\n            type=\"button\"\n            className=\"btn btn-info filter-button text-white\"\n            onClick={prepareWithdrawalETH}\n          >\n            Prepare ETH Withdrawal\n          </button>\n        </div>\n        <br />\n        <br />\n        <div>\n          Complete ETH withdrawal (withdraws entire eth balance that is ready\n          for withdrawal to L1 wallet):\n          <br />\n          <button onClick={completeWithdrawalETH}>\n            Complete ETH Withdrawal\n          </button>\n        </div>\n      </div>\n      <br />\n      <div className=\"text-body-filter\">\n        ERC721:\n        <br />\n        <br />\n        <div>\n          Deposit NFT:\n          <br />\n          <label>\n            Token ID:\n            <input\n              type=\"text\"\n              value={depositTokenId}\n              onChange={(e) => setDepositTokenId(e.target.value)}\n            />\n          </label>\n          <label>\n            Token Address:\n            <input\n              type=\"text\"\n              value={depositTokenAddress}\n              onChange={(e) => setDepositTokenAddress(e.target.value)}\n            />\n          </label>\n          <button onClick={depositNFT}>Deposit NFT</button>\n        </div>\n        <br />\n        <br />\n        <div>\n          Prepare NFT for withdrawal (submit to be rolled up and confirmed on\n          chain in the next batch):\n          <br />\n          <label>\n            Token ID:\n            <input\n              type=\"text\"\n              value={prepareTokenId}\n              onChange={(e) => setPrepareTokenId(e.target.value)}\n            />\n          </label>\n          <label>\n            Token Address:\n            <input\n              type=\"text\"\n              value={prepareTokenAddress}\n              onChange={(e) => setPrepareTokenAddress(e.target.value)}\n            />\n          </label>\n          <button onClick={prepareWithdrawalNFT}>Prepare NFT Withdrawal</button>\n        </div>\n        <br />\n        <br />\n        <div>\n          Complete NFT withdrawal (withdraws single NFT that is ready for\n          withdrawal to L1 wallet):\n          <br />\n          <label>\n            Token ID:\n            <input\n              type=\"text\"\n              value={completeTokenId}\n              onChange={(e) => setCompleteTokenId(e.target.value)}\n            />\n          </label>\n          <label>\n            Token Address:\n            <input\n              type=\"text\"\n              value={completeTokenAddress}\n              onChange={(e) => setCompleteTokenAddress(e.target.value)}\n            />\n          </label>\n          <button onClick={completeWithdrawalNFT}>\n            Complete NFT Withdrawal\n          </button>\n        </div>\n      </div>\n      <br />\n      <br />\n      <br />\n      <p>\n        Withdrawals being prepared:\n        {JSON.stringify(preparingWithdrawals)}\n      </p>\n      <br />\n      <br />\n      <p>\n        Ready for withdrawal:\n        {JSON.stringify(readyWithdrawals)}\n      </p>\n      <br />\n      <br />\n      <p>\n        Withdrawn to wallet:\n        {JSON.stringify(completedWithdrawals)}\n      </p>\n    </div>\n  );\n};\n\nexport default Bridging;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}