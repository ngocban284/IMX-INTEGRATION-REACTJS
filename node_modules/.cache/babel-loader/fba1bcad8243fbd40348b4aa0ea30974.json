{"ast":null,"code":"/**\n * @since 0.5.2\n */\nimport { iso } from 'newtype-ts';\nimport * as t from 'io-ts';\nimport { pipe } from 'fp-ts/es6/pipeable';\nimport { map } from 'fp-ts/es6/Either';\n/**\n * Returns a codec from a newtype\n *\n * @example\n * import { fromNewtype } from 'io-ts-types/es6/fromNewtype'\n * import * as t from 'io-ts'\n * import { right } from 'fp-ts/es6/Either'\n * import { PathReporter } from 'io-ts/es6/PathReporter'\n * import { Newtype, iso } from 'newtype-ts'\n *\n * interface Token extends Newtype<{ readonly Token: unique symbol }, string> {}\n *\n * const T = fromNewtype<Token>(t.string)\n *\n * assert.deepStrictEqual(T.decode('sometoken'), right(iso<Token>().wrap('sometoken')))\n * assert.deepStrictEqual(PathReporter.report(T.decode(42)), ['Invalid value 42 supplied to : fromNewtype(string)'])\n *\n * @since 0.5.2\n */\n\nexport function fromNewtype(codec, name) {\n  if (name === void 0) {\n    name = \"fromNewtype(\" + codec.name + \")\";\n  }\n\n  var i = iso();\n  return new t.Type(name, function (u) {\n    return codec.is(u);\n  }, function (u, c) {\n    return pipe(codec.validate(u, c), map(i.wrap));\n  }, function (a) {\n    return codec.encode(i.unwrap(a));\n  });\n}","map":{"version":3,"names":["iso","t","pipe","map","fromNewtype","codec","name","i","Type","u","is","c","validate","wrap","a","encode","unwrap"],"sources":["/Users/ngocban/Desktop/imx-integration-reactjs/node_modules/io-ts-types/es6/fromNewtype.js"],"sourcesContent":["/**\n * @since 0.5.2\n */\nimport { iso } from 'newtype-ts';\nimport * as t from 'io-ts';\nimport { pipe } from 'fp-ts/es6/pipeable';\nimport { map } from 'fp-ts/es6/Either';\n/**\n * Returns a codec from a newtype\n *\n * @example\n * import { fromNewtype } from 'io-ts-types/es6/fromNewtype'\n * import * as t from 'io-ts'\n * import { right } from 'fp-ts/es6/Either'\n * import { PathReporter } from 'io-ts/es6/PathReporter'\n * import { Newtype, iso } from 'newtype-ts'\n *\n * interface Token extends Newtype<{ readonly Token: unique symbol }, string> {}\n *\n * const T = fromNewtype<Token>(t.string)\n *\n * assert.deepStrictEqual(T.decode('sometoken'), right(iso<Token>().wrap('sometoken')))\n * assert.deepStrictEqual(PathReporter.report(T.decode(42)), ['Invalid value 42 supplied to : fromNewtype(string)'])\n *\n * @since 0.5.2\n */\nexport function fromNewtype(codec, name) {\n    if (name === void 0) { name = \"fromNewtype(\" + codec.name + \")\"; }\n    var i = iso();\n    return new t.Type(name, function (u) { return codec.is(u); }, function (u, c) {\n        return pipe(codec.validate(u, c), map(i.wrap));\n    }, function (a) { return codec.encode(i.unwrap(a)); });\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,GAAT,QAAoB,YAApB;AACA,OAAO,KAAKC,CAAZ,MAAmB,OAAnB;AACA,SAASC,IAAT,QAAqB,oBAArB;AACA,SAASC,GAAT,QAAoB,kBAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,IAA5B,EAAkC;EACrC,IAAIA,IAAI,KAAK,KAAK,CAAlB,EAAqB;IAAEA,IAAI,GAAG,iBAAiBD,KAAK,CAACC,IAAvB,GAA8B,GAArC;EAA2C;;EAClE,IAAIC,CAAC,GAAGP,GAAG,EAAX;EACA,OAAO,IAAIC,CAAC,CAACO,IAAN,CAAWF,IAAX,EAAiB,UAAUG,CAAV,EAAa;IAAE,OAAOJ,KAAK,CAACK,EAAN,CAASD,CAAT,CAAP;EAAqB,CAArD,EAAuD,UAAUA,CAAV,EAAaE,CAAb,EAAgB;IAC1E,OAAOT,IAAI,CAACG,KAAK,CAACO,QAAN,CAAeH,CAAf,EAAkBE,CAAlB,CAAD,EAAuBR,GAAG,CAACI,CAAC,CAACM,IAAH,CAA1B,CAAX;EACH,CAFM,EAEJ,UAAUC,CAAV,EAAa;IAAE,OAAOT,KAAK,CAACU,MAAN,CAAaR,CAAC,CAACS,MAAF,CAASF,CAAT,CAAb,CAAP;EAAmC,CAF9C,CAAP;AAGH"},"metadata":{},"sourceType":"module"}