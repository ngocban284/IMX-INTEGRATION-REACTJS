{"ast":null,"code":"/**\n * @since 0.5.11\n */\nimport * as t from 'io-ts';\nimport { pipe } from 'fp-ts/es6/pipeable';\nimport { chain } from 'fp-ts/es6/Either';\nimport { NonEmptyString } from './NonEmptyString';\n/**\n * @example\n * import { BigIntFromString } from 'io-ts-types/es6/BigIntFromString'\n * import { right } from 'fp-ts/es6/Either'\n * import { PathReporter } from 'io-ts/es6/PathReporter'\n *\n * assert.deepStrictEqual(BigIntFromString.decode('1'), right(BigInt(1)))\n * assert.deepStrictEqual(PathReporter.report(BigIntFromString.decode('1.1')), ['Invalid value \"1.1\" supplied to : BigIntFromString'])\n * assert.deepStrictEqual(PathReporter.report(BigIntFromString.decode('')), ['Invalid value \"\" supplied to : BigIntFromString'])\n * assert.deepStrictEqual(PathReporter.report(BigIntFromString.decode(' ')), ['Invalid value \" \" supplied to : BigIntFromString'])\n *\n * @since 0.5.11\n */\n\nexport var BigIntFromString = new t.Type('BigIntFromString', // tslint:disable-next-line\nfunction (u) {\n  return typeof u === 'bigint';\n}, function (u, c) {\n  return pipe(t.string.validate(u, c), chain(function (s) {\n    if (!NonEmptyString.is(s.trim())) {\n      return t.failure(u, c);\n    }\n\n    try {\n      return t.success(BigInt(s));\n    } catch (error) {\n      return t.failure(u, c);\n    }\n  }));\n}, String);","map":{"version":3,"names":["t","pipe","chain","NonEmptyString","BigIntFromString","Type","u","c","string","validate","s","is","trim","failure","success","BigInt","error","String"],"sources":["/Users/ngocban/Desktop/imx-integration-reactjs/node_modules/io-ts-types/es6/BigIntFromString.js"],"sourcesContent":["/**\n * @since 0.5.11\n */\nimport * as t from 'io-ts';\nimport { pipe } from 'fp-ts/es6/pipeable';\nimport { chain } from 'fp-ts/es6/Either';\nimport { NonEmptyString } from './NonEmptyString';\n/**\n * @example\n * import { BigIntFromString } from 'io-ts-types/es6/BigIntFromString'\n * import { right } from 'fp-ts/es6/Either'\n * import { PathReporter } from 'io-ts/es6/PathReporter'\n *\n * assert.deepStrictEqual(BigIntFromString.decode('1'), right(BigInt(1)))\n * assert.deepStrictEqual(PathReporter.report(BigIntFromString.decode('1.1')), ['Invalid value \"1.1\" supplied to : BigIntFromString'])\n * assert.deepStrictEqual(PathReporter.report(BigIntFromString.decode('')), ['Invalid value \"\" supplied to : BigIntFromString'])\n * assert.deepStrictEqual(PathReporter.report(BigIntFromString.decode(' ')), ['Invalid value \" \" supplied to : BigIntFromString'])\n *\n * @since 0.5.11\n */\nexport var BigIntFromString = new t.Type('BigIntFromString', \n// tslint:disable-next-line\nfunction (u) { return typeof u === 'bigint'; }, function (u, c) {\n    return pipe(t.string.validate(u, c), chain(function (s) {\n        if (!NonEmptyString.is(s.trim())) {\n            return t.failure(u, c);\n        }\n        try {\n            return t.success(BigInt(s));\n        }\n        catch (error) {\n            return t.failure(u, c);\n        }\n    }));\n}, String);\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,KAAKA,CAAZ,MAAmB,OAAnB;AACA,SAASC,IAAT,QAAqB,oBAArB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,gBAAgB,GAAG,IAAIJ,CAAC,CAACK,IAAN,CAAW,kBAAX,EAC9B;AACA,UAAUC,CAAV,EAAa;EAAE,OAAO,OAAOA,CAAP,KAAa,QAApB;AAA+B,CAFhB,EAEkB,UAAUA,CAAV,EAAaC,CAAb,EAAgB;EAC5D,OAAON,IAAI,CAACD,CAAC,CAACQ,MAAF,CAASC,QAAT,CAAkBH,CAAlB,EAAqBC,CAArB,CAAD,EAA0BL,KAAK,CAAC,UAAUQ,CAAV,EAAa;IACpD,IAAI,CAACP,cAAc,CAACQ,EAAf,CAAkBD,CAAC,CAACE,IAAF,EAAlB,CAAL,EAAkC;MAC9B,OAAOZ,CAAC,CAACa,OAAF,CAAUP,CAAV,EAAaC,CAAb,CAAP;IACH;;IACD,IAAI;MACA,OAAOP,CAAC,CAACc,OAAF,CAAUC,MAAM,CAACL,CAAD,CAAhB,CAAP;IACH,CAFD,CAGA,OAAOM,KAAP,EAAc;MACV,OAAOhB,CAAC,CAACa,OAAF,CAAUP,CAAV,EAAaC,CAAb,CAAP;IACH;EACJ,CAVyC,CAA/B,CAAX;AAWH,CAd6B,EAc3BU,MAd2B,CAAvB"},"metadata":{},"sourceType":"module"}